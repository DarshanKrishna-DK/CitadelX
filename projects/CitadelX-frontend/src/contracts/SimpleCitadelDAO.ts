/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"SimpleCitadelDAO","structs":{},"methods":[{"name":"create_dao","args":[{"type":"string","name":"name","desc":"DAO name"},{"type":"string","name":"description","desc":"DAO description"},{"type":"uint64","name":"min_stake","desc":"Minimum stake required (microAlgos)"},{"type":"uint64","name":"voting_period","desc":"Voting period in seconds"},{"type":"uint64","name":"quorum_threshold","desc":"Quorum percentage (1-100)"}],"returns":{"type":"string","desc":"Success message"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Create and initialize a new DAO","events":[],"recommendations":{}},{"name":"join_dao","args":[{"type":"pay","name":"payment","desc":"Payment transaction with minimum stake"}],"returns":{"type":"string","desc":"Success message"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Join the DAO by paying the minimum stake","events":[],"recommendations":{}},{"name":"leave_dao","args":[{"type":"uint64","name":"refund_amount","desc":"Amount to refund (microAlgos)"}],"returns":{"type":"string","desc":"Success message"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Leave the DAO and get refund","events":[],"recommendations":{}},{"name":"emergency_pause","args":[],"returns":{"type":"string","desc":"Success message"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Emergency pause - only creator can call","events":[],"recommendations":{}},{"name":"emergency_unpause","args":[],"returns":{"type":"string","desc":"Success message"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Emergency unpause - only creator can call","events":[],"recommendations":{}},{"name":"get_dao_info","args":[],"returns":{"type":"(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)","desc":"Tuple with DAO information"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get DAO information (read-only)","events":[],"recommendations":{}},{"name":"withdraw_treasury","args":[{"type":"uint64","name":"amount","desc":"Amount to withdraw (microAlgos)"},{"type":"account","name":"recipient","desc":"Recipient address"}],"returns":{"type":"string","desc":"Success message"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Withdraw from treasury - only creator can call","events":[],"recommendations":{}},{"name":"get_treasury_balance","args":[],"returns":{"type":"uint64","desc":"Treasury balance in microAlgos"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get current treasury balance","events":[],"recommendations":{}},{"name":"is_dao_active","args":[],"returns":{"type":"bool","desc":"True if DAO is active, False otherwise"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Check if DAO is active","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"\n    Simplified CitadelX DAO Contract for testing and deployment\n    \n    This contract provides basic DAO functionality:\n    - DAO creation and initialization\n    - Member management (join/leave)\n    - Basic treasury management\n    - Emergency controls\n    ","networks":{},"state":{"schema":{"global":{"ints":8,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"dao_name":{"keyType":"AVMString","valueType":"AVMBytes","key":"ZGFvX25hbWU="},"dao_description":{"keyType":"AVMString","valueType":"AVMBytes","key":"ZGFvX2Rlc2NyaXB0aW9u"},"creator":{"keyType":"AVMString","valueType":"AVMBytes","key":"Y3JlYXRvcg=="},"min_stake":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWluX3N0YWtl"},"voting_period":{"keyType":"AVMString","valueType":"AVMUint64","key":"dm90aW5nX3BlcmlvZA=="},"quorum_threshold":{"keyType":"AVMString","valueType":"AVMUint64","key":"cXVvcnVtX3RocmVzaG9sZA=="},"member_count":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWVtYmVyX2NvdW50"},"total_stake":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfc3Rha2U="},"treasury_balance":{"keyType":"AVMString","valueType":"AVMUint64","key":"dHJlYXN1cnlfYmFsYW5jZQ=="},"is_initialized":{"keyType":"AVMString","valueType":"AVMUint64","key":"aXNfaW5pdGlhbGl6ZWQ="},"is_active":{"keyType":"AVMString","valueType":"AVMUint64","key":"aXNfYWN0aXZl"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[600],"errorMessage":"DAO not active"},{"pc":[592,693],"errorMessage":"DAO not initialized"},{"pc":[707,976],"errorMessage":"Insufficient treasury balance"},{"pc":[481],"errorMessage":"Minimum stake must be at least 0.1 ALGO"},{"pc":[699],"errorMessage":"No members to remove"},{"pc":[233,249,265,299,315,339,363,391,425],"errorMessage":"OnCompletion is not NoOp"},{"pc":[802],"errorMessage":"Only creator can pause DAO"},{"pc":[828],"errorMessage":"Only creator can unpause DAO"},{"pc":[966],"errorMessage":"Only creator can withdraw"},{"pc":[608],"errorMessage":"Payment must be to DAO contract"},{"pc":[629],"errorMessage":"Payment must meet minimum stake"},{"pc":[616],"errorMessage":"Payment sender must match caller"},{"pc":[503],"errorMessage":"Quorum threshold must be between 1-100%"},{"pc":[488],"errorMessage":"Voting period must be at least 1 hour"},{"pc":[429],"errorMessage":"can only call when creating"},{"pc":[236,252,268,302,318,342,366,394],"errorMessage":"can only call when not creating"},{"pc":[800,826,862,964],"errorMessage":"check self.creator exists"},{"pc":[857],"errorMessage":"check self.dao_description exists"},{"pc":[852],"errorMessage":"check self.dao_name exists"},{"pc":[597,900,1075],"errorMessage":"check self.is_active exists"},{"pc":[589,690,1065],"errorMessage":"check self.is_initialized exists"},{"pc":[633,697,884],"errorMessage":"check self.member_count exists"},{"pc":[625,867],"errorMessage":"check self.min_stake exists"},{"pc":[879],"errorMessage":"check self.quorum_threshold exists"},{"pc":[642,753,889],"errorMessage":"check self.total_stake exists"},{"pc":[652,703,763,894,970,1058],"errorMessage":"check self.treasury_balance exists"},{"pc":[873],"errorMessage":"check self.voting_period exists"},{"pc":[404],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiACAAEmDBB0cmVhc3VyeV9iYWxhbmNlBBUffHUMbWVtYmVyX2NvdW50C3RvdGFsX3N0YWtlCWlzX2FjdGl2ZQdjcmVhdG9yDmlzX2luaXRpYWxpemVkCW1pbl9zdGFrZQhkYW9fbmFtZQ9kYW9fZGVzY3JpcHRpb24Ndm90aW5nX3BlcmlvZBBxdW9ydW1fdGhyZXNob2xkMRtBAEaCCQS6hrFUBGWEYYwECRfXTQS0YxsDBA/p63EERfkp8gTdrJPPBOEjFGkE8js2fTYaAI4JAMIAoACEAGwAVABEACIAEgACIkMxGRREMRhEiAM1KUxQsCNDMRkURDEYRIgDHylMULAjQzEZFEQxGEQ2GgEXNhoCF8AciAKhSRUWVwYCTFApTFCwI0MxGRREMRhEiAIeKUxQsCNDMRkURDEYRIgB8kkVFlcGAkxQKUxQsCNDMRkURDEYRIgBwEkVFlcGAkxQKUxQsCNDMRkURDEYRDYaAReIATVJFRZXBgJMUClMULAjQzEZFEQxGEQxFiMJSTgQIxJEiACuSRUWVwYCTFApTFCwI0MxGRREMRgURDYaAVcCADYaAlcCADYaAxc2GgQXNhoFF4gADkkVFlcGAkxQKUxQsCNDigUBi/2BoI0GD0SL/oGQHA9Ei/9BAFSL/4FkDkEATCNEJwiL+2cnCYv8ZycFMQBnJweL/WcnCov+ZycLi/9nKiJnKyJnKCJnJwYjZycEI2eAGERBTyBjcmVhdGVkIHN1Y2Nlc3NmdWxseYkiQv+xigEBIicGZUQjEkQiJwRlRCMSRIv/OAcyChJEi/84ADEAEkSL/zgIIicHZURLAQ5EIiplRCMIKkxnIitlREsBCCtMZyIoZUQIKExngBdTdWNjZXNzZnVsbHkgam9pbmVkIERBT4mKAQEiJwZlRCMSRCIqZURJRCIoZUSL/w9EsTEAgBFEQU8gbWVtYmVyIHJlZnVuZLIFi/+yCLIHI7IQIrIBsyMJKkxnIitlRIv/CStMZyIoZUSL/wkoTGeAFVN1Y2Nlc3NmdWxseSBsZWZ0IERBT4kxACInBWVEEkQnBCJngApEQU8gcGF1c2VkiTEAIicFZUQSRCcEI2eADERBTyB1bnBhdXNlZIkiJwhlRCInCWVEIicFZUQiJwdlRBYiJwplRBYiJwtlRBYiKmVEFiIrZUQWIihlRBYiJwRlRCMSgAEAIk8CVEsJFYFVCBZXBgKAAgBVTFBPCFBPB1BPBlBPBVBPBFBPA1BPAlBMUE8CUExQiYoCATEAIicFZUQSRCIoZUSL/ksBDkSxgBNUcmVhc3VyeSB3aXRoZHJhd2FssgWL/rIIi/+yByOyECKyAbOL/gkoTGeAHlRyZWFzdXJ5IHdpdGhkcmF3YWwgc3VjY2Vzc2Z1bIkiKGVEFokiJwZlRCMSQQATIicEZUQjEkEACSOAAQAiTwJUiSJC//Q=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the SimpleCitadelDao contract
 */
export type SimpleCitadelDaoArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_dao(string,string,uint64,uint64,uint64)string': {
      /**
       * DAO name
       */
      name: string
      /**
       * DAO description
       */
      description: string
      /**
       * Minimum stake required (microAlgos)
       */
      minStake: bigint | number
      /**
       * Voting period in seconds
       */
      votingPeriod: bigint | number
      /**
       * Quorum percentage (1-100)
       */
      quorumThreshold: bigint | number
    }
    'join_dao(pay)string': {
      /**
       * Payment transaction with minimum stake
       */
      payment: AppMethodCallTransactionArgument
    }
    'leave_dao(uint64)string': {
      /**
       * Amount to refund (microAlgos)
       */
      refundAmount: bigint | number
    }
    'emergency_pause()string': Record<string, never>
    'emergency_unpause()string': Record<string, never>
    'get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)': Record<string, never>
    'withdraw_treasury(uint64,account)string': {
      /**
       * Amount to withdraw (microAlgos)
       */
      amount: bigint | number
      /**
       * Recipient address
       */
      recipient: Uint8Array | string
    }
    'get_treasury_balance()uint64': Record<string, never>
    'is_dao_active()bool': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_dao(string,string,uint64,uint64,uint64)string': [name: string, description: string, minStake: bigint | number, votingPeriod: bigint | number, quorumThreshold: bigint | number]
    'join_dao(pay)string': [payment: AppMethodCallTransactionArgument]
    'leave_dao(uint64)string': [refundAmount: bigint | number]
    'emergency_pause()string': []
    'emergency_unpause()string': []
    'get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)': []
    'withdraw_treasury(uint64,account)string': [amount: bigint | number, recipient: Uint8Array | string]
    'get_treasury_balance()uint64': []
    'is_dao_active()bool': []
  }
}

/**
 * The return type for each method
 */
export type SimpleCitadelDaoReturns = {
  'create_dao(string,string,uint64,uint64,uint64)string': string
  'join_dao(pay)string': string
  'leave_dao(uint64)string': string
  'emergency_pause()string': string
  'emergency_unpause()string': string
  'get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)': [string, string, string, bigint, bigint, bigint, bigint, bigint, bigint, boolean]
  'withdraw_treasury(uint64,account)string': string
  'get_treasury_balance()uint64': bigint
  'is_dao_active()bool': boolean
}

/**
 * Defines the types of available calls and state of the SimpleCitadelDao smart contract.
 */
export type SimpleCitadelDaoTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_dao(string,string,uint64,uint64,uint64)string' | 'create_dao', {
      argsObj: SimpleCitadelDaoArgs['obj']['create_dao(string,string,uint64,uint64,uint64)string']
      argsTuple: SimpleCitadelDaoArgs['tuple']['create_dao(string,string,uint64,uint64,uint64)string']
      /**
       * Success message
       */
      returns: SimpleCitadelDaoReturns['create_dao(string,string,uint64,uint64,uint64)string']
    }>
    & Record<'join_dao(pay)string' | 'join_dao', {
      argsObj: SimpleCitadelDaoArgs['obj']['join_dao(pay)string']
      argsTuple: SimpleCitadelDaoArgs['tuple']['join_dao(pay)string']
      /**
       * Success message
       */
      returns: SimpleCitadelDaoReturns['join_dao(pay)string']
    }>
    & Record<'leave_dao(uint64)string' | 'leave_dao', {
      argsObj: SimpleCitadelDaoArgs['obj']['leave_dao(uint64)string']
      argsTuple: SimpleCitadelDaoArgs['tuple']['leave_dao(uint64)string']
      /**
       * Success message
       */
      returns: SimpleCitadelDaoReturns['leave_dao(uint64)string']
    }>
    & Record<'emergency_pause()string' | 'emergency_pause', {
      argsObj: SimpleCitadelDaoArgs['obj']['emergency_pause()string']
      argsTuple: SimpleCitadelDaoArgs['tuple']['emergency_pause()string']
      /**
       * Success message
       */
      returns: SimpleCitadelDaoReturns['emergency_pause()string']
    }>
    & Record<'emergency_unpause()string' | 'emergency_unpause', {
      argsObj: SimpleCitadelDaoArgs['obj']['emergency_unpause()string']
      argsTuple: SimpleCitadelDaoArgs['tuple']['emergency_unpause()string']
      /**
       * Success message
       */
      returns: SimpleCitadelDaoReturns['emergency_unpause()string']
    }>
    & Record<'get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)' | 'get_dao_info', {
      argsObj: SimpleCitadelDaoArgs['obj']['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)']
      argsTuple: SimpleCitadelDaoArgs['tuple']['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)']
      /**
       * Tuple with DAO information
       */
      returns: SimpleCitadelDaoReturns['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)']
    }>
    & Record<'withdraw_treasury(uint64,account)string' | 'withdraw_treasury', {
      argsObj: SimpleCitadelDaoArgs['obj']['withdraw_treasury(uint64,account)string']
      argsTuple: SimpleCitadelDaoArgs['tuple']['withdraw_treasury(uint64,account)string']
      /**
       * Success message
       */
      returns: SimpleCitadelDaoReturns['withdraw_treasury(uint64,account)string']
    }>
    & Record<'get_treasury_balance()uint64' | 'get_treasury_balance', {
      argsObj: SimpleCitadelDaoArgs['obj']['get_treasury_balance()uint64']
      argsTuple: SimpleCitadelDaoArgs['tuple']['get_treasury_balance()uint64']
      /**
       * Treasury balance in microAlgos
       */
      returns: SimpleCitadelDaoReturns['get_treasury_balance()uint64']
    }>
    & Record<'is_dao_active()bool' | 'is_dao_active', {
      argsObj: SimpleCitadelDaoArgs['obj']['is_dao_active()bool']
      argsTuple: SimpleCitadelDaoArgs['tuple']['is_dao_active()bool']
      /**
       * True if DAO is active, False otherwise
       */
      returns: SimpleCitadelDaoReturns['is_dao_active()bool']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        daoName: BinaryState
        daoDescription: BinaryState
        creator: BinaryState
        minStake: bigint
        votingPeriod: bigint
        quorumThreshold: bigint
        memberCount: bigint
        totalStake: bigint
        treasuryBalance: bigint
        isInitialized: bigint
        isActive: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type SimpleCitadelDaoSignatures = keyof SimpleCitadelDaoTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type SimpleCitadelDaoNonVoidMethodSignatures = keyof SimpleCitadelDaoTypes['methods'] extends infer T ? T extends keyof SimpleCitadelDaoTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the SimpleCitadelDao smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends SimpleCitadelDaoSignatures> = SimpleCitadelDaoTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the SimpleCitadelDao smart contract to the method's return type
 */
export type MethodReturn<TSignature extends SimpleCitadelDaoSignatures> = SimpleCitadelDaoTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = SimpleCitadelDaoTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type SimpleCitadelDaoCreateCallParams =
  | Expand<CallParams<SimpleCitadelDaoArgs['obj']['create_dao(string,string,uint64,uint64,uint64)string'] | SimpleCitadelDaoArgs['tuple']['create_dao(string,string,uint64,uint64,uint64)string']> & {method: 'create_dao'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<SimpleCitadelDaoArgs['obj']['create_dao(string,string,uint64,uint64,uint64)string'] | SimpleCitadelDaoArgs['tuple']['create_dao(string,string,uint64,uint64,uint64)string']> & {method: 'create_dao(string,string,uint64,uint64,uint64)string'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type SimpleCitadelDaoDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: SimpleCitadelDaoCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the SimpleCitadelDao smart contract
 */
export abstract class SimpleCitadelDaoParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends SimpleCitadelDaoCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_dao':
          case 'create_dao(string,string,uint64,uint64,uint64)string':
            return SimpleCitadelDaoParamsFactory.create.createDao(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the SimpleCitadelDAO smart contract using the create_dao(string,string,uint64,uint64,uint64)string ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createDao(params: CallParams<SimpleCitadelDaoArgs['obj']['create_dao(string,string,uint64,uint64,uint64)string'] | SimpleCitadelDaoArgs['tuple']['create_dao(string,string,uint64,uint64,uint64)string']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_dao(string,string,uint64,uint64,uint64)string' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.description, params.args.minStake, params.args.votingPeriod, params.args.quorumThreshold],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the join_dao(pay)string ABI method
   *
   * Join the DAO by paying the minimum stake
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static joinDao(params: CallParams<SimpleCitadelDaoArgs['obj']['join_dao(pay)string'] | SimpleCitadelDaoArgs['tuple']['join_dao(pay)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'join_dao(pay)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the leave_dao(uint64)string ABI method
   *
   * Leave the DAO and get refund
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static leaveDao(params: CallParams<SimpleCitadelDaoArgs['obj']['leave_dao(uint64)string'] | SimpleCitadelDaoArgs['tuple']['leave_dao(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'leave_dao(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.refundAmount],
    }
  }
  /**
   * Constructs a no op call for the emergency_pause()string ABI method
   *
   * Emergency pause - only creator can call
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyPause(params: CallParams<SimpleCitadelDaoArgs['obj']['emergency_pause()string'] | SimpleCitadelDaoArgs['tuple']['emergency_pause()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergency_pause()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the emergency_unpause()string ABI method
   *
   * Emergency unpause - only creator can call
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyUnpause(params: CallParams<SimpleCitadelDaoArgs['obj']['emergency_unpause()string'] | SimpleCitadelDaoArgs['tuple']['emergency_unpause()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergency_unpause()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool) ABI method
   *
   * Get DAO information (read-only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getDaoInfo(params: CallParams<SimpleCitadelDaoArgs['obj']['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)'] | SimpleCitadelDaoArgs['tuple']['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the withdraw_treasury(uint64,account)string ABI method
   *
   * Withdraw from treasury - only creator can call
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawTreasury(params: CallParams<SimpleCitadelDaoArgs['obj']['withdraw_treasury(uint64,account)string'] | SimpleCitadelDaoArgs['tuple']['withdraw_treasury(uint64,account)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw_treasury(uint64,account)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.recipient],
    }
  }
  /**
   * Constructs a no op call for the get_treasury_balance()uint64 ABI method
   *
   * Get current treasury balance
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTreasuryBalance(params: CallParams<SimpleCitadelDaoArgs['obj']['get_treasury_balance()uint64'] | SimpleCitadelDaoArgs['tuple']['get_treasury_balance()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_treasury_balance()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the is_dao_active()bool ABI method
   *
   * Check if DAO is active
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isDaoActive(params: CallParams<SimpleCitadelDaoArgs['obj']['is_dao_active()bool'] | SimpleCitadelDaoArgs['tuple']['is_dao_active()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'is_dao_active()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the SimpleCitadelDAO smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class SimpleCitadelDaoFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `SimpleCitadelDaoFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new SimpleCitadelDaoClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new SimpleCitadelDaoClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the SimpleCitadelDAO smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: SimpleCitadelDaoDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? SimpleCitadelDaoParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (SimpleCitadelDaoCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new SimpleCitadelDaoClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the SimpleCitadelDAO smart contract using the create_dao(string,string,uint64,uint64,uint64)string ABI method.
       *
       * Create and initialize a new DAO
       *
       * @param params The params for the smart contract call
       * @returns The create params: Success message
       */
      createDao: (params: CallParams<SimpleCitadelDaoArgs['obj']['create_dao(string,string,uint64,uint64,uint64)string'] | SimpleCitadelDaoArgs['tuple']['create_dao(string,string,uint64,uint64,uint64)string']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(SimpleCitadelDaoParamsFactory.create.createDao(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the SimpleCitadelDAO smart contract using the create_dao(string,string,uint64,uint64,uint64)string ABI method.
       *
       * Create and initialize a new DAO
       *
       * @param params The params for the smart contract call
       * @returns The create transaction: Success message
       */
      createDao: (params: CallParams<SimpleCitadelDaoArgs['obj']['create_dao(string,string,uint64,uint64,uint64)string'] | SimpleCitadelDaoArgs['tuple']['create_dao(string,string,uint64,uint64,uint64)string']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(SimpleCitadelDaoParamsFactory.create.createDao(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the SimpleCitadelDAO smart contract using an ABI method call using the create_dao(string,string,uint64,uint64,uint64)string ABI method.
       *
       * Create and initialize a new DAO
       *
       * @param params The params for the smart contract call
       * @returns The create result: Success message
       */
      createDao: async (params: CallParams<SimpleCitadelDaoArgs['obj']['create_dao(string,string,uint64,uint64,uint64)string'] | SimpleCitadelDaoArgs['tuple']['create_dao(string,string,uint64,uint64,uint64)string']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(SimpleCitadelDaoParamsFactory.create.createDao(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | SimpleCitadelDaoReturns['create_dao(string,string,uint64,uint64,uint64)string']) }, appClient: new SimpleCitadelDaoClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the SimpleCitadelDAO smart contract
 */
export class SimpleCitadelDaoClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `SimpleCitadelDaoClient`
   *
   * @param appClient An `AppClient` instance which has been created with the SimpleCitadelDao app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `SimpleCitadelDaoClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends SimpleCitadelDaoNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `SimpleCitadelDaoClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<SimpleCitadelDaoClient> {
    return new SimpleCitadelDaoClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `SimpleCitadelDaoClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<SimpleCitadelDaoClient> {
    return new SimpleCitadelDaoClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the SimpleCitadelDAO smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `join_dao(pay)string` ABI method.
     *
     * Join the DAO by paying the minimum stake
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success message
     */
    joinDao: (params: CallParams<SimpleCitadelDaoArgs['obj']['join_dao(pay)string'] | SimpleCitadelDaoArgs['tuple']['join_dao(pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SimpleCitadelDaoParamsFactory.joinDao(params))
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `leave_dao(uint64)string` ABI method.
     *
     * Leave the DAO and get refund
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success message
     */
    leaveDao: (params: CallParams<SimpleCitadelDaoArgs['obj']['leave_dao(uint64)string'] | SimpleCitadelDaoArgs['tuple']['leave_dao(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SimpleCitadelDaoParamsFactory.leaveDao(params))
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `emergency_pause()string` ABI method.
     *
     * Emergency pause - only creator can call
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success message
     */
    emergencyPause: (params: CallParams<SimpleCitadelDaoArgs['obj']['emergency_pause()string'] | SimpleCitadelDaoArgs['tuple']['emergency_pause()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(SimpleCitadelDaoParamsFactory.emergencyPause(params))
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `emergency_unpause()string` ABI method.
     *
     * Emergency unpause - only creator can call
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success message
     */
    emergencyUnpause: (params: CallParams<SimpleCitadelDaoArgs['obj']['emergency_unpause()string'] | SimpleCitadelDaoArgs['tuple']['emergency_unpause()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(SimpleCitadelDaoParamsFactory.emergencyUnpause(params))
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get DAO information (read-only)
     *
     * @param params The params for the smart contract call
     * @returns The call params: Tuple with DAO information
     */
    getDaoInfo: (params: CallParams<SimpleCitadelDaoArgs['obj']['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)'] | SimpleCitadelDaoArgs['tuple']['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(SimpleCitadelDaoParamsFactory.getDaoInfo(params))
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `withdraw_treasury(uint64,account)string` ABI method.
     *
     * Withdraw from treasury - only creator can call
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success message
     */
    withdrawTreasury: (params: CallParams<SimpleCitadelDaoArgs['obj']['withdraw_treasury(uint64,account)string'] | SimpleCitadelDaoArgs['tuple']['withdraw_treasury(uint64,account)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SimpleCitadelDaoParamsFactory.withdrawTreasury(params))
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `get_treasury_balance()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current treasury balance
     *
     * @param params The params for the smart contract call
     * @returns The call params: Treasury balance in microAlgos
     */
    getTreasuryBalance: (params: CallParams<SimpleCitadelDaoArgs['obj']['get_treasury_balance()uint64'] | SimpleCitadelDaoArgs['tuple']['get_treasury_balance()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(SimpleCitadelDaoParamsFactory.getTreasuryBalance(params))
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `is_dao_active()bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if DAO is active
     *
     * @param params The params for the smart contract call
     * @returns The call params: True if DAO is active, False otherwise
     */
    isDaoActive: (params: CallParams<SimpleCitadelDaoArgs['obj']['is_dao_active()bool'] | SimpleCitadelDaoArgs['tuple']['is_dao_active()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(SimpleCitadelDaoParamsFactory.isDaoActive(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the SimpleCitadelDAO smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `join_dao(pay)string` ABI method.
     *
     * Join the DAO by paying the minimum stake
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success message
     */
    joinDao: (params: CallParams<SimpleCitadelDaoArgs['obj']['join_dao(pay)string'] | SimpleCitadelDaoArgs['tuple']['join_dao(pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SimpleCitadelDaoParamsFactory.joinDao(params))
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `leave_dao(uint64)string` ABI method.
     *
     * Leave the DAO and get refund
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success message
     */
    leaveDao: (params: CallParams<SimpleCitadelDaoArgs['obj']['leave_dao(uint64)string'] | SimpleCitadelDaoArgs['tuple']['leave_dao(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SimpleCitadelDaoParamsFactory.leaveDao(params))
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `emergency_pause()string` ABI method.
     *
     * Emergency pause - only creator can call
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success message
     */
    emergencyPause: (params: CallParams<SimpleCitadelDaoArgs['obj']['emergency_pause()string'] | SimpleCitadelDaoArgs['tuple']['emergency_pause()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(SimpleCitadelDaoParamsFactory.emergencyPause(params))
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `emergency_unpause()string` ABI method.
     *
     * Emergency unpause - only creator can call
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success message
     */
    emergencyUnpause: (params: CallParams<SimpleCitadelDaoArgs['obj']['emergency_unpause()string'] | SimpleCitadelDaoArgs['tuple']['emergency_unpause()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(SimpleCitadelDaoParamsFactory.emergencyUnpause(params))
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get DAO information (read-only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Tuple with DAO information
     */
    getDaoInfo: (params: CallParams<SimpleCitadelDaoArgs['obj']['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)'] | SimpleCitadelDaoArgs['tuple']['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(SimpleCitadelDaoParamsFactory.getDaoInfo(params))
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `withdraw_treasury(uint64,account)string` ABI method.
     *
     * Withdraw from treasury - only creator can call
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success message
     */
    withdrawTreasury: (params: CallParams<SimpleCitadelDaoArgs['obj']['withdraw_treasury(uint64,account)string'] | SimpleCitadelDaoArgs['tuple']['withdraw_treasury(uint64,account)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SimpleCitadelDaoParamsFactory.withdrawTreasury(params))
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `get_treasury_balance()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current treasury balance
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Treasury balance in microAlgos
     */
    getTreasuryBalance: (params: CallParams<SimpleCitadelDaoArgs['obj']['get_treasury_balance()uint64'] | SimpleCitadelDaoArgs['tuple']['get_treasury_balance()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(SimpleCitadelDaoParamsFactory.getTreasuryBalance(params))
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `is_dao_active()bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if DAO is active
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: True if DAO is active, False otherwise
     */
    isDaoActive: (params: CallParams<SimpleCitadelDaoArgs['obj']['is_dao_active()bool'] | SimpleCitadelDaoArgs['tuple']['is_dao_active()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(SimpleCitadelDaoParamsFactory.isDaoActive(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the SimpleCitadelDAO smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `join_dao(pay)string` ABI method.
     *
     * Join the DAO by paying the minimum stake
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success message
     */
    joinDao: async (params: CallParams<SimpleCitadelDaoArgs['obj']['join_dao(pay)string'] | SimpleCitadelDaoArgs['tuple']['join_dao(pay)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SimpleCitadelDaoParamsFactory.joinDao(params))
      return {...result, return: result.return as unknown as (undefined | SimpleCitadelDaoReturns['join_dao(pay)string'])}
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `leave_dao(uint64)string` ABI method.
     *
     * Leave the DAO and get refund
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success message
     */
    leaveDao: async (params: CallParams<SimpleCitadelDaoArgs['obj']['leave_dao(uint64)string'] | SimpleCitadelDaoArgs['tuple']['leave_dao(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SimpleCitadelDaoParamsFactory.leaveDao(params))
      return {...result, return: result.return as unknown as (undefined | SimpleCitadelDaoReturns['leave_dao(uint64)string'])}
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `emergency_pause()string` ABI method.
     *
     * Emergency pause - only creator can call
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success message
     */
    emergencyPause: async (params: CallParams<SimpleCitadelDaoArgs['obj']['emergency_pause()string'] | SimpleCitadelDaoArgs['tuple']['emergency_pause()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(SimpleCitadelDaoParamsFactory.emergencyPause(params))
      return {...result, return: result.return as unknown as (undefined | SimpleCitadelDaoReturns['emergency_pause()string'])}
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `emergency_unpause()string` ABI method.
     *
     * Emergency unpause - only creator can call
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success message
     */
    emergencyUnpause: async (params: CallParams<SimpleCitadelDaoArgs['obj']['emergency_unpause()string'] | SimpleCitadelDaoArgs['tuple']['emergency_unpause()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(SimpleCitadelDaoParamsFactory.emergencyUnpause(params))
      return {...result, return: result.return as unknown as (undefined | SimpleCitadelDaoReturns['emergency_unpause()string'])}
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get DAO information (read-only)
     *
     * @param params The params for the smart contract call
     * @returns The call result: Tuple with DAO information
     */
    getDaoInfo: async (params: CallParams<SimpleCitadelDaoArgs['obj']['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)'] | SimpleCitadelDaoArgs['tuple']['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(SimpleCitadelDaoParamsFactory.getDaoInfo(params))
      return {...result, return: result.return as unknown as (undefined | SimpleCitadelDaoReturns['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)'])}
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `withdraw_treasury(uint64,account)string` ABI method.
     *
     * Withdraw from treasury - only creator can call
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success message
     */
    withdrawTreasury: async (params: CallParams<SimpleCitadelDaoArgs['obj']['withdraw_treasury(uint64,account)string'] | SimpleCitadelDaoArgs['tuple']['withdraw_treasury(uint64,account)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SimpleCitadelDaoParamsFactory.withdrawTreasury(params))
      return {...result, return: result.return as unknown as (undefined | SimpleCitadelDaoReturns['withdraw_treasury(uint64,account)string'])}
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `get_treasury_balance()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current treasury balance
     *
     * @param params The params for the smart contract call
     * @returns The call result: Treasury balance in microAlgos
     */
    getTreasuryBalance: async (params: CallParams<SimpleCitadelDaoArgs['obj']['get_treasury_balance()uint64'] | SimpleCitadelDaoArgs['tuple']['get_treasury_balance()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(SimpleCitadelDaoParamsFactory.getTreasuryBalance(params))
      return {...result, return: result.return as unknown as (undefined | SimpleCitadelDaoReturns['get_treasury_balance()uint64'])}
    },

    /**
     * Makes a call to the SimpleCitadelDAO smart contract using the `is_dao_active()bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if DAO is active
     *
     * @param params The params for the smart contract call
     * @returns The call result: True if DAO is active, False otherwise
     */
    isDaoActive: async (params: CallParams<SimpleCitadelDaoArgs['obj']['is_dao_active()bool'] | SimpleCitadelDaoArgs['tuple']['is_dao_active()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(SimpleCitadelDaoParamsFactory.isDaoActive(params))
      return {...result, return: result.return as unknown as (undefined | SimpleCitadelDaoReturns['is_dao_active()bool'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new SimpleCitadelDaoClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the SimpleCitadelDAO smart contract using the `get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get DAO information (read-only)
   *
   * @param params The params for the smart contract call
   * @returns The call result: Tuple with DAO information
   */
  async getDaoInfo(params: CallParams<SimpleCitadelDaoArgs['obj']['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)'] | SimpleCitadelDaoArgs['tuple']['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)']> = {args: []}) {
    const result = await this.appClient.send.call(SimpleCitadelDaoParamsFactory.getDaoInfo(params))
    return result.return as unknown as SimpleCitadelDaoReturns['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)']
  }

  /**
   * Makes a readonly (simulated) call to the SimpleCitadelDAO smart contract using the `get_treasury_balance()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get current treasury balance
   *
   * @param params The params for the smart contract call
   * @returns The call result: Treasury balance in microAlgos
   */
  async getTreasuryBalance(params: CallParams<SimpleCitadelDaoArgs['obj']['get_treasury_balance()uint64'] | SimpleCitadelDaoArgs['tuple']['get_treasury_balance()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(SimpleCitadelDaoParamsFactory.getTreasuryBalance(params))
    return result.return as unknown as SimpleCitadelDaoReturns['get_treasury_balance()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the SimpleCitadelDAO smart contract using the `is_dao_active()bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Check if DAO is active
   *
   * @param params The params for the smart contract call
   * @returns The call result: True if DAO is active, False otherwise
   */
  async isDaoActive(params: CallParams<SimpleCitadelDaoArgs['obj']['is_dao_active()bool'] | SimpleCitadelDaoArgs['tuple']['is_dao_active()bool']> = {args: []}) {
    const result = await this.appClient.send.call(SimpleCitadelDaoParamsFactory.isDaoActive(params))
    return result.return as unknown as SimpleCitadelDaoReturns['is_dao_active()bool']
  }

  /**
   * Methods to access state for the current SimpleCitadelDAO app
   */
  state = {
    /**
     * Methods to access global state for the current SimpleCitadelDAO app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          daoName: new BinaryStateValue(result.dao_name),
          daoDescription: new BinaryStateValue(result.dao_description),
          creator: new BinaryStateValue(result.creator),
          minStake: result.min_stake,
          votingPeriod: result.voting_period,
          quorumThreshold: result.quorum_threshold,
          memberCount: result.member_count,
          totalStake: result.total_stake,
          treasuryBalance: result.treasury_balance,
          isInitialized: result.is_initialized,
          isActive: result.is_active,
        }
      },
      /**
       * Get the current value of the dao_name key in global state
       */
      daoName: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("dao_name")) as Uint8Array | undefined) },
      /**
       * Get the current value of the dao_description key in global state
       */
      daoDescription: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("dao_description")) as Uint8Array | undefined) },
      /**
       * Get the current value of the creator key in global state
       */
      creator: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("creator")) as Uint8Array | undefined) },
      /**
       * Get the current value of the min_stake key in global state
       */
      minStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("min_stake")) as bigint | undefined },
      /**
       * Get the current value of the voting_period key in global state
       */
      votingPeriod: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("voting_period")) as bigint | undefined },
      /**
       * Get the current value of the quorum_threshold key in global state
       */
      quorumThreshold: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("quorum_threshold")) as bigint | undefined },
      /**
       * Get the current value of the member_count key in global state
       */
      memberCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("member_count")) as bigint | undefined },
      /**
       * Get the current value of the total_stake key in global state
       */
      totalStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_stake")) as bigint | undefined },
      /**
       * Get the current value of the treasury_balance key in global state
       */
      treasuryBalance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("treasury_balance")) as bigint | undefined },
      /**
       * Get the current value of the is_initialized key in global state
       */
      isInitialized: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("is_initialized")) as bigint | undefined },
      /**
       * Get the current value of the is_active key in global state
       */
      isActive: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("is_active")) as bigint | undefined },
    },
  }

  public newGroup(): SimpleCitadelDaoComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a join_dao(pay)string method call against the SimpleCitadelDAO contract
       */
      joinDao(params: CallParams<SimpleCitadelDaoArgs['obj']['join_dao(pay)string'] | SimpleCitadelDaoArgs['tuple']['join_dao(pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.joinDao(params)))
        resultMappers.push((v) => client.decodeReturnValue('join_dao(pay)string', v))
        return this
      },
      /**
       * Add a leave_dao(uint64)string method call against the SimpleCitadelDAO contract
       */
      leaveDao(params: CallParams<SimpleCitadelDaoArgs['obj']['leave_dao(uint64)string'] | SimpleCitadelDaoArgs['tuple']['leave_dao(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.leaveDao(params)))
        resultMappers.push((v) => client.decodeReturnValue('leave_dao(uint64)string', v))
        return this
      },
      /**
       * Add a emergency_pause()string method call against the SimpleCitadelDAO contract
       */
      emergencyPause(params: CallParams<SimpleCitadelDaoArgs['obj']['emergency_pause()string'] | SimpleCitadelDaoArgs['tuple']['emergency_pause()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyPause(params)))
        resultMappers.push((v) => client.decodeReturnValue('emergency_pause()string', v))
        return this
      },
      /**
       * Add a emergency_unpause()string method call against the SimpleCitadelDAO contract
       */
      emergencyUnpause(params: CallParams<SimpleCitadelDaoArgs['obj']['emergency_unpause()string'] | SimpleCitadelDaoArgs['tuple']['emergency_unpause()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyUnpause(params)))
        resultMappers.push((v) => client.decodeReturnValue('emergency_unpause()string', v))
        return this
      },
      /**
       * Add a get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool) method call against the SimpleCitadelDAO contract
       */
      getDaoInfo(params: CallParams<SimpleCitadelDaoArgs['obj']['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)'] | SimpleCitadelDaoArgs['tuple']['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getDaoInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)', v))
        return this
      },
      /**
       * Add a withdraw_treasury(uint64,account)string method call against the SimpleCitadelDAO contract
       */
      withdrawTreasury(params: CallParams<SimpleCitadelDaoArgs['obj']['withdraw_treasury(uint64,account)string'] | SimpleCitadelDaoArgs['tuple']['withdraw_treasury(uint64,account)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawTreasury(params)))
        resultMappers.push((v) => client.decodeReturnValue('withdraw_treasury(uint64,account)string', v))
        return this
      },
      /**
       * Add a get_treasury_balance()uint64 method call against the SimpleCitadelDAO contract
       */
      getTreasuryBalance(params: CallParams<SimpleCitadelDaoArgs['obj']['get_treasury_balance()uint64'] | SimpleCitadelDaoArgs['tuple']['get_treasury_balance()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTreasuryBalance(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_treasury_balance()uint64', v))
        return this
      },
      /**
       * Add a is_dao_active()bool method call against the SimpleCitadelDAO contract
       */
      isDaoActive(params: CallParams<SimpleCitadelDaoArgs['obj']['is_dao_active()bool'] | SimpleCitadelDaoArgs['tuple']['is_dao_active()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isDaoActive(params)))
        resultMappers.push((v) => client.decodeReturnValue('is_dao_active()bool', v))
        return this
      },
      /**
       * Add a clear state call to the SimpleCitadelDAO contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as SimpleCitadelDaoComposer
  }
}
export type SimpleCitadelDaoComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the join_dao(pay)string ABI method.
   *
   * Join the DAO by paying the minimum stake
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  joinDao(params?: CallParams<SimpleCitadelDaoArgs['obj']['join_dao(pay)string'] | SimpleCitadelDaoArgs['tuple']['join_dao(pay)string']>): SimpleCitadelDaoComposer<[...TReturns, SimpleCitadelDaoReturns['join_dao(pay)string'] | undefined]>

  /**
   * Calls the leave_dao(uint64)string ABI method.
   *
   * Leave the DAO and get refund
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  leaveDao(params?: CallParams<SimpleCitadelDaoArgs['obj']['leave_dao(uint64)string'] | SimpleCitadelDaoArgs['tuple']['leave_dao(uint64)string']>): SimpleCitadelDaoComposer<[...TReturns, SimpleCitadelDaoReturns['leave_dao(uint64)string'] | undefined]>

  /**
   * Calls the emergency_pause()string ABI method.
   *
   * Emergency pause - only creator can call
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyPause(params?: CallParams<SimpleCitadelDaoArgs['obj']['emergency_pause()string'] | SimpleCitadelDaoArgs['tuple']['emergency_pause()string']>): SimpleCitadelDaoComposer<[...TReturns, SimpleCitadelDaoReturns['emergency_pause()string'] | undefined]>

  /**
   * Calls the emergency_unpause()string ABI method.
   *
   * Emergency unpause - only creator can call
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyUnpause(params?: CallParams<SimpleCitadelDaoArgs['obj']['emergency_unpause()string'] | SimpleCitadelDaoArgs['tuple']['emergency_unpause()string']>): SimpleCitadelDaoComposer<[...TReturns, SimpleCitadelDaoReturns['emergency_unpause()string'] | undefined]>

  /**
   * Calls the get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool) ABI method.
   *
   * Get DAO information (read-only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDaoInfo(params?: CallParams<SimpleCitadelDaoArgs['obj']['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)'] | SimpleCitadelDaoArgs['tuple']['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)']>): SimpleCitadelDaoComposer<[...TReturns, SimpleCitadelDaoReturns['get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)'] | undefined]>

  /**
   * Calls the withdraw_treasury(uint64,account)string ABI method.
   *
   * Withdraw from treasury - only creator can call
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawTreasury(params?: CallParams<SimpleCitadelDaoArgs['obj']['withdraw_treasury(uint64,account)string'] | SimpleCitadelDaoArgs['tuple']['withdraw_treasury(uint64,account)string']>): SimpleCitadelDaoComposer<[...TReturns, SimpleCitadelDaoReturns['withdraw_treasury(uint64,account)string'] | undefined]>

  /**
   * Calls the get_treasury_balance()uint64 ABI method.
   *
   * Get current treasury balance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTreasuryBalance(params?: CallParams<SimpleCitadelDaoArgs['obj']['get_treasury_balance()uint64'] | SimpleCitadelDaoArgs['tuple']['get_treasury_balance()uint64']>): SimpleCitadelDaoComposer<[...TReturns, SimpleCitadelDaoReturns['get_treasury_balance()uint64'] | undefined]>

  /**
   * Calls the is_dao_active()bool ABI method.
   *
   * Check if DAO is active
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isDaoActive(params?: CallParams<SimpleCitadelDaoArgs['obj']['is_dao_active()bool'] | SimpleCitadelDaoArgs['tuple']['is_dao_active()bool']>): SimpleCitadelDaoComposer<[...TReturns, SimpleCitadelDaoReturns['is_dao_active()bool'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the SimpleCitadelDAO smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): SimpleCitadelDaoComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): SimpleCitadelDaoComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<SimpleCitadelDaoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<SimpleCitadelDaoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<SimpleCitadelDaoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<SimpleCitadelDaoComposerResults<TReturns>>
}
export type SimpleCitadelDaoComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

