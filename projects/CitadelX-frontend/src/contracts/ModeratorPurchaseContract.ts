/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ModeratorPurchaseContract","structs":{},"methods":[{"name":"create_moderator","args":[{"type":"account","name":"creator"},{"type":"uint64","name":"hourly_price_algo"},{"type":"uint64","name":"monthly_price_algo"},{"type":"uint64","name":"buyout_price_algo"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Initialize moderator with pricing in ALGO","events":[],"recommendations":{}},{"name":"purchase_hourly_access","args":[{"type":"pay","name":"payment"},{"type":"uint64","name":"hours"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Purchase hourly access to moderator","events":[],"recommendations":{}},{"name":"purchase_monthly_license","args":[{"type":"pay","name":"payment"},{"type":"uint64","name":"months"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Purchase monthly license for moderator","events":[],"recommendations":{}},{"name":"buyout_moderator","args":[{"type":"pay","name":"payment"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfer permanent ownership with 90/10 revenue split","events":[],"recommendations":{}},{"name":"update_pricing","args":[{"type":"uint64","name":"new_hourly_price"},{"type":"uint64","name":"new_monthly_price"},{"type":"uint64","name":"new_buyout_price"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update pricing - only current owner can call","events":[],"recommendations":{}},{"name":"use_hourly_access","args":[{"type":"uint64","name":"hours_used"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Deduct hours from user's hourly access","events":[],"recommendations":{}},{"name":"get_moderator_info","args":[],"returns":{"type":"(uint64,uint64,uint64,address,address)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get pricing and ownership info (read-only, no cost)","events":[],"recommendations":{}},{"name":"get_user_access","args":[{"type":"account","name":"user"}],"returns":{"type":"(uint64,uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get user's access details (read-only, no cost)","events":[],"recommendations":{}},{"name":"get_contract_stats","args":[],"returns":{"type":"(uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get contract statistics (read-only, no cost)","events":[],"recommendations":{}},{"name":"has_valid_access","args":[{"type":"account","name":"user"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Check if user has valid access (read-only, no cost)","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"\n    Smart contract for moderator purchases with 3 access types:\n    1. Hourly access (pay per hour)\n    2. Monthly license (subscription)\n    3. Buyout (permanent ownership)\n    \n    Based on citadel-algo library patterns with 90/10 revenue split.\n    ","networks":{},"state":{"schema":{"global":{"ints":7,"bytes":3},"local":{"ints":4,"bytes":0}},"keys":{"global":{"contract_owner":{"keyType":"AVMString","valueType":"address","key":"Y29udHJhY3Rfb3duZXI="},"moderator_owner":{"keyType":"AVMString","valueType":"address","key":"bW9kZXJhdG9yX293bmVy"},"moderator_creator":{"keyType":"AVMString","valueType":"address","key":"bW9kZXJhdG9yX2NyZWF0b3I="},"moderator_exists":{"keyType":"AVMString","valueType":"AVMUint64","key":"bW9kZXJhdG9yX2V4aXN0cw=="},"hourly_price":{"keyType":"AVMString","valueType":"AVMUint64","key":"aG91cmx5X3ByaWNl"},"monthly_price":{"keyType":"AVMString","valueType":"AVMUint64","key":"bW9udGhseV9wcmljZQ=="},"buyout_price":{"keyType":"AVMString","valueType":"AVMUint64","key":"YnV5b3V0X3ByaWNl"},"total_transactions":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfdHJhbnNhY3Rpb25z"},"total_revenue":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfcmV2ZW51ZQ=="},"total_users":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfdXNlcnM="}},"local":{"user_access_type":{"keyType":"AVMString","valueType":"AVMUint64","key":"dXNlcl9hY2Nlc3NfdHlwZQ=="},"access_expiry":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWNjZXNzX2V4cGlyeQ=="},"hours_remaining":{"keyType":"AVMString","valueType":"AVMUint64","key":"aG91cnNfcmVtYWluaW5n"},"total_spent":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfc3BlbnQ="}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1397],"errorMessage":"Insufficient hours remaining"},{"pc":[612,827,1089],"errorMessage":"Moderator does not exist"},{"pc":[1384],"errorMessage":"No hourly access found"},{"pc":[300,322,338,360,376,395,420,446,475,504],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1311],"errorMessage":"Only owner can update pricing"},{"pc":[1099],"errorMessage":"You already own this moderator"},{"pc":[508],"errorMessage":"can only call when creating"},{"pc":[303,325,341,363,379,398,423,449,478],"errorMessage":"can only call when not creating"},{"pc":[950,1507,1601],"errorMessage":"check self.access_expiry exists for account"},{"pc":[1116,1454],"errorMessage":"check self.buyout_price exists"},{"pc":[617,1438],"errorMessage":"check self.hourly_price exists"},{"pc":[708,1391,1499,1577],"errorMessage":"check self.hours_remaining exists for account"},{"pc":[1467],"errorMessage":"check self.moderator_creator exists"},{"pc":[609,824,1086],"errorMessage":"check self.moderator_exists exists"},{"pc":[663,885,1094,1309,1462],"errorMessage":"check self.moderator_owner exists"},{"pc":[832,1446],"errorMessage":"check self.monthly_price exists"},{"pc":[755,1002,1234,1536],"errorMessage":"check self.total_revenue exists"},{"pc":[731,978,1210,1515],"errorMessage":"check self.total_spent exists for account"},{"pc":[746,993,1225,1531],"errorMessage":"check self.total_transactions exists"},{"pc":[768,1015,1247,1541],"errorMessage":"check self.total_users exists"},{"pc":[1381,1491,1562],"errorMessage":"check self.user_access_type exists for account"},{"pc":[433,459,488],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiAEAAHAhD1aJg8EFR98dRJ0b3RhbF90cmFuc2FjdGlvbnMNdG90YWxfcmV2ZW51ZQt0b3RhbF91c2Vycw9tb2RlcmF0b3Jfb3duZXIPaG91cnNfcmVtYWluaW5nC3RvdGFsX3NwZW50EHVzZXJfYWNjZXNzX3R5cGUNYWNjZXNzX2V4cGlyeRBtb2RlcmF0b3JfZXhpc3RzDGhvdXJseV9wcmljZQ1tb250aGx5X3ByaWNlDGJ1eW91dF9wcmljZQEAEW1vZGVyYXRvcl9jcmVhdG9yMRtBAE2CCgQR0tovBJwJ48EEp+Z8IAR7LvXCBLyAzEAEgQQroARrH/6eBLhAVZQEy0W11QRJ0nrrNhoAjgoAzgCxAJQAegBhAE4APgAoABgAAiJDMRkURDEYRDYaARfAHIgE1ChMULAjQzEZFEQxGESIBK8oTFCwI0MxGRREMRhENhoBF8AciARrKExQsCNDMRkURDEYRIgEKyhMULAjQzEZFEQxGEQ2GgGIA9ooTFCwI0MxGRREMRhENhoBNhoCNhoDiAN5KExQsCNDMRkURDEYRDEWIwlJOBAjEkSIAoIoTFCwI0MxGRREMRhEMRYjCUk4ECMSRDYaAYgBXyhMULAjQzEZFEQxGEQxFiMJSTgQIxJENhoBiABrKExQsCNDMRkURDEYFEQ2GgEXwBw2GgI2GgM2GgSIAAIjQ4oEAIAOY29udHJhY3Rfb3duZXIxAGcnDov8ZycEi/xnJwkjZ4v9FyQLJwpMZ4v+FyQLJwtMZ4v/FyQLJwxMZykiZyoiZysiZ4mKAgEiJwllRCMSRCInCmVEi/8XTEsBC4v+OAcyChJEi/44CElPAg9Ei/44ADEAEkRJJQuBZApKCbEiJwRlRIAVSG91cmx5IGFjY2VzcyBwYXltZW50sgVPArIIsgcjshAisgGzMQAiJwVjRE8DCDEAJwVPAmYxACcHI2YxACInBmNESU8DCDEAJwZPAmYiKWVEIwgpTGciKmVETwIIKkxnQAAJIitlRCMIK0xngCgAJlN1Y2Nlc3NmdWxseSBwdXJjaGFzZWQgaG91cnMgb2YgYWNjZXNziYoCASInCWVEIxJEIicLZUSL/xdMSwELi/44BzIKEkSL/jgISU4DSU8CD0SL/jgAMQASREklC4FkCkxLAQlOArEiJwRlRIAXTW9udGhseSBsaWNlbnNlIHBheW1lbnSyBbIHsggjshAisgGzMgdJTgKBgJqeAU8CC0wxACInCGNMSU4CTgREDEEAb4sDCDEAJwhPAmYxACcHgQJmMQAiJwZjREmLAAgxACcGTwJmIillRCMIKUxnIiplRIsBCCpMZ0AACSIrZUQjCCtMZ4AoACZTdWNjZXNzZnVsbHkgcHVyY2hhc2VkIG1vbnRobHkgbGljZW5zZYwAiYsCCDEAJwhPAmZC/46KAQEiJwllRCMSRCInBGVESTEAE0SL/zgHMgoSRIv/OAgiJwxlREsBDkSL/zgAMQASREklC4FkCkoJsYAYTW9kZXJhdG9yIGJ1eW91dCBwYXltZW50sgVMsghPArIHI7IQIrIBsycEMQBnMQAnB4EDZjEAJwgiZjEAJwUiZjEAIicGY0RJTwMIMQAnBk8CZiIpZUQjCClMZyIqZURPAggqTGdAAAkiK2VEIwgrTGeALAAqU3VjY2Vzc2Z1bGx5IHB1cmNoYXNlZCBtb2RlcmF0b3Igb3duZXJzaGlwiYoDATEAIicEZUQSRIv9FyQLJwpMZ4v+FyQLJwtMZ4v/FyQLJwxMZ4AeABxQcmljaW5nIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5iYoBATEAIicHY0QjEkQxACInBWNEi/8XSg9ECTEAJwVPAmaAGQAXVXNlZCBob3VycyBzdWNjZXNzZnVsbHmJIicKZUQkChYiJwtlRCQKFiInDGVEJAoWIicEZUQiJw5lRE8ETwRQTwNQTwJQTFCJigEBi/8iJwdjRBaL/yInBWNEFov/IicIY0QWi/8iJwZjRBZPA08DUE8CUExQiSIpZUQWIiplRBYiK2VEFk4CUExQiYoBAYv/IicHY0xJTwJEMgdMIxJBABCL/yInBWNEJw0iTwJUjACJiwCBAhJBABOL/yInCGNEiwENJw0iTwJUjACJiwCBAxJBAAaAAYCMAIknDYwAiQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the ModeratorPurchaseContract contract
 */
export type ModeratorPurchaseContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_moderator(account,uint64,uint64,uint64)void': {
      creator: Uint8Array | string
      hourlyPriceAlgo: bigint | number
      monthlyPriceAlgo: bigint | number
      buyoutPriceAlgo: bigint | number
    }
    'purchase_hourly_access(pay,uint64)string': {
      payment: AppMethodCallTransactionArgument
      hours: bigint | number
    }
    'purchase_monthly_license(pay,uint64)string': {
      payment: AppMethodCallTransactionArgument
      months: bigint | number
    }
    'buyout_moderator(pay)string': {
      payment: AppMethodCallTransactionArgument
    }
    'update_pricing(uint64,uint64,uint64)string': {
      newHourlyPrice: bigint | number
      newMonthlyPrice: bigint | number
      newBuyoutPrice: bigint | number
    }
    'use_hourly_access(uint64)string': {
      hoursUsed: bigint | number
    }
    'get_moderator_info()(uint64,uint64,uint64,address,address)': Record<string, never>
    'get_user_access(account)(uint64,uint64,uint64,uint64)': {
      user: Uint8Array | string
    }
    'get_contract_stats()(uint64,uint64,uint64)': Record<string, never>
    'has_valid_access(account)bool': {
      user: Uint8Array | string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_moderator(account,uint64,uint64,uint64)void': [creator: Uint8Array | string, hourlyPriceAlgo: bigint | number, monthlyPriceAlgo: bigint | number, buyoutPriceAlgo: bigint | number]
    'purchase_hourly_access(pay,uint64)string': [payment: AppMethodCallTransactionArgument, hours: bigint | number]
    'purchase_monthly_license(pay,uint64)string': [payment: AppMethodCallTransactionArgument, months: bigint | number]
    'buyout_moderator(pay)string': [payment: AppMethodCallTransactionArgument]
    'update_pricing(uint64,uint64,uint64)string': [newHourlyPrice: bigint | number, newMonthlyPrice: bigint | number, newBuyoutPrice: bigint | number]
    'use_hourly_access(uint64)string': [hoursUsed: bigint | number]
    'get_moderator_info()(uint64,uint64,uint64,address,address)': []
    'get_user_access(account)(uint64,uint64,uint64,uint64)': [user: Uint8Array | string]
    'get_contract_stats()(uint64,uint64,uint64)': []
    'has_valid_access(account)bool': [user: Uint8Array | string]
  }
}

/**
 * The return type for each method
 */
export type ModeratorPurchaseContractReturns = {
  'create_moderator(account,uint64,uint64,uint64)void': void
  'purchase_hourly_access(pay,uint64)string': string
  'purchase_monthly_license(pay,uint64)string': string
  'buyout_moderator(pay)string': string
  'update_pricing(uint64,uint64,uint64)string': string
  'use_hourly_access(uint64)string': string
  'get_moderator_info()(uint64,uint64,uint64,address,address)': [bigint, bigint, bigint, string, string]
  'get_user_access(account)(uint64,uint64,uint64,uint64)': [bigint, bigint, bigint, bigint]
  'get_contract_stats()(uint64,uint64,uint64)': [bigint, bigint, bigint]
  'has_valid_access(account)bool': boolean
}

/**
 * Defines the types of available calls and state of the ModeratorPurchaseContract smart contract.
 */
export type ModeratorPurchaseContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_moderator(account,uint64,uint64,uint64)void' | 'create_moderator', {
      argsObj: ModeratorPurchaseContractArgs['obj']['create_moderator(account,uint64,uint64,uint64)void']
      argsTuple: ModeratorPurchaseContractArgs['tuple']['create_moderator(account,uint64,uint64,uint64)void']
      returns: ModeratorPurchaseContractReturns['create_moderator(account,uint64,uint64,uint64)void']
    }>
    & Record<'purchase_hourly_access(pay,uint64)string' | 'purchase_hourly_access', {
      argsObj: ModeratorPurchaseContractArgs['obj']['purchase_hourly_access(pay,uint64)string']
      argsTuple: ModeratorPurchaseContractArgs['tuple']['purchase_hourly_access(pay,uint64)string']
      returns: ModeratorPurchaseContractReturns['purchase_hourly_access(pay,uint64)string']
    }>
    & Record<'purchase_monthly_license(pay,uint64)string' | 'purchase_monthly_license', {
      argsObj: ModeratorPurchaseContractArgs['obj']['purchase_monthly_license(pay,uint64)string']
      argsTuple: ModeratorPurchaseContractArgs['tuple']['purchase_monthly_license(pay,uint64)string']
      returns: ModeratorPurchaseContractReturns['purchase_monthly_license(pay,uint64)string']
    }>
    & Record<'buyout_moderator(pay)string' | 'buyout_moderator', {
      argsObj: ModeratorPurchaseContractArgs['obj']['buyout_moderator(pay)string']
      argsTuple: ModeratorPurchaseContractArgs['tuple']['buyout_moderator(pay)string']
      returns: ModeratorPurchaseContractReturns['buyout_moderator(pay)string']
    }>
    & Record<'update_pricing(uint64,uint64,uint64)string' | 'update_pricing', {
      argsObj: ModeratorPurchaseContractArgs['obj']['update_pricing(uint64,uint64,uint64)string']
      argsTuple: ModeratorPurchaseContractArgs['tuple']['update_pricing(uint64,uint64,uint64)string']
      returns: ModeratorPurchaseContractReturns['update_pricing(uint64,uint64,uint64)string']
    }>
    & Record<'use_hourly_access(uint64)string' | 'use_hourly_access', {
      argsObj: ModeratorPurchaseContractArgs['obj']['use_hourly_access(uint64)string']
      argsTuple: ModeratorPurchaseContractArgs['tuple']['use_hourly_access(uint64)string']
      returns: ModeratorPurchaseContractReturns['use_hourly_access(uint64)string']
    }>
    & Record<'get_moderator_info()(uint64,uint64,uint64,address,address)' | 'get_moderator_info', {
      argsObj: ModeratorPurchaseContractArgs['obj']['get_moderator_info()(uint64,uint64,uint64,address,address)']
      argsTuple: ModeratorPurchaseContractArgs['tuple']['get_moderator_info()(uint64,uint64,uint64,address,address)']
      returns: ModeratorPurchaseContractReturns['get_moderator_info()(uint64,uint64,uint64,address,address)']
    }>
    & Record<'get_user_access(account)(uint64,uint64,uint64,uint64)' | 'get_user_access', {
      argsObj: ModeratorPurchaseContractArgs['obj']['get_user_access(account)(uint64,uint64,uint64,uint64)']
      argsTuple: ModeratorPurchaseContractArgs['tuple']['get_user_access(account)(uint64,uint64,uint64,uint64)']
      returns: ModeratorPurchaseContractReturns['get_user_access(account)(uint64,uint64,uint64,uint64)']
    }>
    & Record<'get_contract_stats()(uint64,uint64,uint64)' | 'get_contract_stats', {
      argsObj: ModeratorPurchaseContractArgs['obj']['get_contract_stats()(uint64,uint64,uint64)']
      argsTuple: ModeratorPurchaseContractArgs['tuple']['get_contract_stats()(uint64,uint64,uint64)']
      returns: ModeratorPurchaseContractReturns['get_contract_stats()(uint64,uint64,uint64)']
    }>
    & Record<'has_valid_access(account)bool' | 'has_valid_access', {
      argsObj: ModeratorPurchaseContractArgs['obj']['has_valid_access(account)bool']
      argsTuple: ModeratorPurchaseContractArgs['tuple']['has_valid_access(account)bool']
      returns: ModeratorPurchaseContractReturns['has_valid_access(account)bool']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        contractOwner: string
        moderatorOwner: string
        moderatorCreator: string
        moderatorExists: bigint
        hourlyPrice: bigint
        monthlyPrice: bigint
        buyoutPrice: bigint
        totalTransactions: bigint
        totalRevenue: bigint
        totalUsers: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        userAccessType: bigint
        accessExpiry: bigint
        hoursRemaining: bigint
        totalSpent: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ModeratorPurchaseContractSignatures = keyof ModeratorPurchaseContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ModeratorPurchaseContractNonVoidMethodSignatures = keyof ModeratorPurchaseContractTypes['methods'] extends infer T ? T extends keyof ModeratorPurchaseContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ModeratorPurchaseContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ModeratorPurchaseContractSignatures> = ModeratorPurchaseContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ModeratorPurchaseContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ModeratorPurchaseContractSignatures> = ModeratorPurchaseContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ModeratorPurchaseContractTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = ModeratorPurchaseContractTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ModeratorPurchaseContractCreateCallParams =
  | Expand<CallParams<ModeratorPurchaseContractArgs['obj']['create_moderator(account,uint64,uint64,uint64)void'] | ModeratorPurchaseContractArgs['tuple']['create_moderator(account,uint64,uint64,uint64)void']> & {method: 'create_moderator'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<ModeratorPurchaseContractArgs['obj']['create_moderator(account,uint64,uint64,uint64)void'] | ModeratorPurchaseContractArgs['tuple']['create_moderator(account,uint64,uint64,uint64)void']> & {method: 'create_moderator(account,uint64,uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ModeratorPurchaseContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ModeratorPurchaseContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ModeratorPurchaseContract smart contract
 */
export abstract class ModeratorPurchaseContractParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends ModeratorPurchaseContractCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_moderator':
          case 'create_moderator(account,uint64,uint64,uint64)void':
            return ModeratorPurchaseContractParamsFactory.create.createModerator(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ModeratorPurchaseContract smart contract using the create_moderator(account,uint64,uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createModerator(params: CallParams<ModeratorPurchaseContractArgs['obj']['create_moderator(account,uint64,uint64,uint64)void'] | ModeratorPurchaseContractArgs['tuple']['create_moderator(account,uint64,uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_moderator(account,uint64,uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.creator, params.args.hourlyPriceAlgo, params.args.monthlyPriceAlgo, params.args.buyoutPriceAlgo],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the purchase_hourly_access(pay,uint64)string ABI method
   *
   * Purchase hourly access to moderator
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static purchaseHourlyAccess(params: CallParams<ModeratorPurchaseContractArgs['obj']['purchase_hourly_access(pay,uint64)string'] | ModeratorPurchaseContractArgs['tuple']['purchase_hourly_access(pay,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'purchase_hourly_access(pay,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.hours],
    }
  }
  /**
   * Constructs a no op call for the purchase_monthly_license(pay,uint64)string ABI method
   *
   * Purchase monthly license for moderator
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static purchaseMonthlyLicense(params: CallParams<ModeratorPurchaseContractArgs['obj']['purchase_monthly_license(pay,uint64)string'] | ModeratorPurchaseContractArgs['tuple']['purchase_monthly_license(pay,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'purchase_monthly_license(pay,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.months],
    }
  }
  /**
   * Constructs a no op call for the buyout_moderator(pay)string ABI method
   *
   * Transfer permanent ownership with 90/10 revenue split
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buyoutModerator(params: CallParams<ModeratorPurchaseContractArgs['obj']['buyout_moderator(pay)string'] | ModeratorPurchaseContractArgs['tuple']['buyout_moderator(pay)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buyout_moderator(pay)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the update_pricing(uint64,uint64,uint64)string ABI method
   *
   * Update pricing - only current owner can call
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePricing(params: CallParams<ModeratorPurchaseContractArgs['obj']['update_pricing(uint64,uint64,uint64)string'] | ModeratorPurchaseContractArgs['tuple']['update_pricing(uint64,uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_pricing(uint64,uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newHourlyPrice, params.args.newMonthlyPrice, params.args.newBuyoutPrice],
    }
  }
  /**
   * Constructs a no op call for the use_hourly_access(uint64)string ABI method
   *
   * Deduct hours from user's hourly access
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static useHourlyAccess(params: CallParams<ModeratorPurchaseContractArgs['obj']['use_hourly_access(uint64)string'] | ModeratorPurchaseContractArgs['tuple']['use_hourly_access(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'use_hourly_access(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.hoursUsed],
    }
  }
  /**
   * Constructs a no op call for the get_moderator_info()(uint64,uint64,uint64,address,address) ABI method
   *
   * Get pricing and ownership info (read-only, no cost)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getModeratorInfo(params: CallParams<ModeratorPurchaseContractArgs['obj']['get_moderator_info()(uint64,uint64,uint64,address,address)'] | ModeratorPurchaseContractArgs['tuple']['get_moderator_info()(uint64,uint64,uint64,address,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_moderator_info()(uint64,uint64,uint64,address,address)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_user_access(account)(uint64,uint64,uint64,uint64) ABI method
   *
   * Get user's access details (read-only, no cost)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserAccess(params: CallParams<ModeratorPurchaseContractArgs['obj']['get_user_access(account)(uint64,uint64,uint64,uint64)'] | ModeratorPurchaseContractArgs['tuple']['get_user_access(account)(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_user_access(account)(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the get_contract_stats()(uint64,uint64,uint64) ABI method
   *
   * Get contract statistics (read-only, no cost)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getContractStats(params: CallParams<ModeratorPurchaseContractArgs['obj']['get_contract_stats()(uint64,uint64,uint64)'] | ModeratorPurchaseContractArgs['tuple']['get_contract_stats()(uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_contract_stats()(uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the has_valid_access(account)bool ABI method
   *
   * Check if user has valid access (read-only, no cost)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hasValidAccess(params: CallParams<ModeratorPurchaseContractArgs['obj']['has_valid_access(account)bool'] | ModeratorPurchaseContractArgs['tuple']['has_valid_access(account)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'has_valid_access(account)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ModeratorPurchaseContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ModeratorPurchaseContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ModeratorPurchaseContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ModeratorPurchaseContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ModeratorPurchaseContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ModeratorPurchaseContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ModeratorPurchaseContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? ModeratorPurchaseContractParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (ModeratorPurchaseContractCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new ModeratorPurchaseContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ModeratorPurchaseContract smart contract using the create_moderator(account,uint64,uint64,uint64)void ABI method.
       *
       * Initialize moderator with pricing in ALGO
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createModerator: (params: CallParams<ModeratorPurchaseContractArgs['obj']['create_moderator(account,uint64,uint64,uint64)void'] | ModeratorPurchaseContractArgs['tuple']['create_moderator(account,uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(ModeratorPurchaseContractParamsFactory.create.createModerator(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ModeratorPurchaseContract smart contract using the create_moderator(account,uint64,uint64,uint64)void ABI method.
       *
       * Initialize moderator with pricing in ALGO
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createModerator: (params: CallParams<ModeratorPurchaseContractArgs['obj']['create_moderator(account,uint64,uint64,uint64)void'] | ModeratorPurchaseContractArgs['tuple']['create_moderator(account,uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(ModeratorPurchaseContractParamsFactory.create.createModerator(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ModeratorPurchaseContract smart contract using an ABI method call using the create_moderator(account,uint64,uint64,uint64)void ABI method.
       *
       * Initialize moderator with pricing in ALGO
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createModerator: async (params: CallParams<ModeratorPurchaseContractArgs['obj']['create_moderator(account,uint64,uint64,uint64)void'] | ModeratorPurchaseContractArgs['tuple']['create_moderator(account,uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(ModeratorPurchaseContractParamsFactory.create.createModerator(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | ModeratorPurchaseContractReturns['create_moderator(account,uint64,uint64,uint64)void']) }, appClient: new ModeratorPurchaseContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ModeratorPurchaseContract smart contract
 */
export class ModeratorPurchaseContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ModeratorPurchaseContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ModeratorPurchaseContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ModeratorPurchaseContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ModeratorPurchaseContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ModeratorPurchaseContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ModeratorPurchaseContractClient> {
    return new ModeratorPurchaseContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ModeratorPurchaseContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ModeratorPurchaseContractClient> {
    return new ModeratorPurchaseContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ModeratorPurchaseContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `purchase_hourly_access(pay,uint64)string` ABI method.
     *
     * Purchase hourly access to moderator
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    purchaseHourlyAccess: (params: CallParams<ModeratorPurchaseContractArgs['obj']['purchase_hourly_access(pay,uint64)string'] | ModeratorPurchaseContractArgs['tuple']['purchase_hourly_access(pay,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ModeratorPurchaseContractParamsFactory.purchaseHourlyAccess(params))
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `purchase_monthly_license(pay,uint64)string` ABI method.
     *
     * Purchase monthly license for moderator
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    purchaseMonthlyLicense: (params: CallParams<ModeratorPurchaseContractArgs['obj']['purchase_monthly_license(pay,uint64)string'] | ModeratorPurchaseContractArgs['tuple']['purchase_monthly_license(pay,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ModeratorPurchaseContractParamsFactory.purchaseMonthlyLicense(params))
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `buyout_moderator(pay)string` ABI method.
     *
     * Transfer permanent ownership with 90/10 revenue split
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buyoutModerator: (params: CallParams<ModeratorPurchaseContractArgs['obj']['buyout_moderator(pay)string'] | ModeratorPurchaseContractArgs['tuple']['buyout_moderator(pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ModeratorPurchaseContractParamsFactory.buyoutModerator(params))
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `update_pricing(uint64,uint64,uint64)string` ABI method.
     *
     * Update pricing - only current owner can call
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePricing: (params: CallParams<ModeratorPurchaseContractArgs['obj']['update_pricing(uint64,uint64,uint64)string'] | ModeratorPurchaseContractArgs['tuple']['update_pricing(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ModeratorPurchaseContractParamsFactory.updatePricing(params))
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `use_hourly_access(uint64)string` ABI method.
     *
     * Deduct hours from user's hourly access
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    useHourlyAccess: (params: CallParams<ModeratorPurchaseContractArgs['obj']['use_hourly_access(uint64)string'] | ModeratorPurchaseContractArgs['tuple']['use_hourly_access(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ModeratorPurchaseContractParamsFactory.useHourlyAccess(params))
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `get_moderator_info()(uint64,uint64,uint64,address,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get pricing and ownership info (read-only, no cost)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getModeratorInfo: (params: CallParams<ModeratorPurchaseContractArgs['obj']['get_moderator_info()(uint64,uint64,uint64,address,address)'] | ModeratorPurchaseContractArgs['tuple']['get_moderator_info()(uint64,uint64,uint64,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ModeratorPurchaseContractParamsFactory.getModeratorInfo(params))
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `get_user_access(account)(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's access details (read-only, no cost)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserAccess: (params: CallParams<ModeratorPurchaseContractArgs['obj']['get_user_access(account)(uint64,uint64,uint64,uint64)'] | ModeratorPurchaseContractArgs['tuple']['get_user_access(account)(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ModeratorPurchaseContractParamsFactory.getUserAccess(params))
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `get_contract_stats()(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get contract statistics (read-only, no cost)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getContractStats: (params: CallParams<ModeratorPurchaseContractArgs['obj']['get_contract_stats()(uint64,uint64,uint64)'] | ModeratorPurchaseContractArgs['tuple']['get_contract_stats()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ModeratorPurchaseContractParamsFactory.getContractStats(params))
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `has_valid_access(account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if user has valid access (read-only, no cost)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hasValidAccess: (params: CallParams<ModeratorPurchaseContractArgs['obj']['has_valid_access(account)bool'] | ModeratorPurchaseContractArgs['tuple']['has_valid_access(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ModeratorPurchaseContractParamsFactory.hasValidAccess(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ModeratorPurchaseContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `purchase_hourly_access(pay,uint64)string` ABI method.
     *
     * Purchase hourly access to moderator
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    purchaseHourlyAccess: (params: CallParams<ModeratorPurchaseContractArgs['obj']['purchase_hourly_access(pay,uint64)string'] | ModeratorPurchaseContractArgs['tuple']['purchase_hourly_access(pay,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ModeratorPurchaseContractParamsFactory.purchaseHourlyAccess(params))
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `purchase_monthly_license(pay,uint64)string` ABI method.
     *
     * Purchase monthly license for moderator
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    purchaseMonthlyLicense: (params: CallParams<ModeratorPurchaseContractArgs['obj']['purchase_monthly_license(pay,uint64)string'] | ModeratorPurchaseContractArgs['tuple']['purchase_monthly_license(pay,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ModeratorPurchaseContractParamsFactory.purchaseMonthlyLicense(params))
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `buyout_moderator(pay)string` ABI method.
     *
     * Transfer permanent ownership with 90/10 revenue split
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buyoutModerator: (params: CallParams<ModeratorPurchaseContractArgs['obj']['buyout_moderator(pay)string'] | ModeratorPurchaseContractArgs['tuple']['buyout_moderator(pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ModeratorPurchaseContractParamsFactory.buyoutModerator(params))
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `update_pricing(uint64,uint64,uint64)string` ABI method.
     *
     * Update pricing - only current owner can call
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePricing: (params: CallParams<ModeratorPurchaseContractArgs['obj']['update_pricing(uint64,uint64,uint64)string'] | ModeratorPurchaseContractArgs['tuple']['update_pricing(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ModeratorPurchaseContractParamsFactory.updatePricing(params))
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `use_hourly_access(uint64)string` ABI method.
     *
     * Deduct hours from user's hourly access
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    useHourlyAccess: (params: CallParams<ModeratorPurchaseContractArgs['obj']['use_hourly_access(uint64)string'] | ModeratorPurchaseContractArgs['tuple']['use_hourly_access(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ModeratorPurchaseContractParamsFactory.useHourlyAccess(params))
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `get_moderator_info()(uint64,uint64,uint64,address,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get pricing and ownership info (read-only, no cost)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getModeratorInfo: (params: CallParams<ModeratorPurchaseContractArgs['obj']['get_moderator_info()(uint64,uint64,uint64,address,address)'] | ModeratorPurchaseContractArgs['tuple']['get_moderator_info()(uint64,uint64,uint64,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ModeratorPurchaseContractParamsFactory.getModeratorInfo(params))
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `get_user_access(account)(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's access details (read-only, no cost)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserAccess: (params: CallParams<ModeratorPurchaseContractArgs['obj']['get_user_access(account)(uint64,uint64,uint64,uint64)'] | ModeratorPurchaseContractArgs['tuple']['get_user_access(account)(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ModeratorPurchaseContractParamsFactory.getUserAccess(params))
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `get_contract_stats()(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get contract statistics (read-only, no cost)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getContractStats: (params: CallParams<ModeratorPurchaseContractArgs['obj']['get_contract_stats()(uint64,uint64,uint64)'] | ModeratorPurchaseContractArgs['tuple']['get_contract_stats()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ModeratorPurchaseContractParamsFactory.getContractStats(params))
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `has_valid_access(account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if user has valid access (read-only, no cost)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hasValidAccess: (params: CallParams<ModeratorPurchaseContractArgs['obj']['has_valid_access(account)bool'] | ModeratorPurchaseContractArgs['tuple']['has_valid_access(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ModeratorPurchaseContractParamsFactory.hasValidAccess(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ModeratorPurchaseContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `purchase_hourly_access(pay,uint64)string` ABI method.
     *
     * Purchase hourly access to moderator
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    purchaseHourlyAccess: async (params: CallParams<ModeratorPurchaseContractArgs['obj']['purchase_hourly_access(pay,uint64)string'] | ModeratorPurchaseContractArgs['tuple']['purchase_hourly_access(pay,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ModeratorPurchaseContractParamsFactory.purchaseHourlyAccess(params))
      return {...result, return: result.return as unknown as (undefined | ModeratorPurchaseContractReturns['purchase_hourly_access(pay,uint64)string'])}
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `purchase_monthly_license(pay,uint64)string` ABI method.
     *
     * Purchase monthly license for moderator
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    purchaseMonthlyLicense: async (params: CallParams<ModeratorPurchaseContractArgs['obj']['purchase_monthly_license(pay,uint64)string'] | ModeratorPurchaseContractArgs['tuple']['purchase_monthly_license(pay,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ModeratorPurchaseContractParamsFactory.purchaseMonthlyLicense(params))
      return {...result, return: result.return as unknown as (undefined | ModeratorPurchaseContractReturns['purchase_monthly_license(pay,uint64)string'])}
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `buyout_moderator(pay)string` ABI method.
     *
     * Transfer permanent ownership with 90/10 revenue split
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buyoutModerator: async (params: CallParams<ModeratorPurchaseContractArgs['obj']['buyout_moderator(pay)string'] | ModeratorPurchaseContractArgs['tuple']['buyout_moderator(pay)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ModeratorPurchaseContractParamsFactory.buyoutModerator(params))
      return {...result, return: result.return as unknown as (undefined | ModeratorPurchaseContractReturns['buyout_moderator(pay)string'])}
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `update_pricing(uint64,uint64,uint64)string` ABI method.
     *
     * Update pricing - only current owner can call
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePricing: async (params: CallParams<ModeratorPurchaseContractArgs['obj']['update_pricing(uint64,uint64,uint64)string'] | ModeratorPurchaseContractArgs['tuple']['update_pricing(uint64,uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ModeratorPurchaseContractParamsFactory.updatePricing(params))
      return {...result, return: result.return as unknown as (undefined | ModeratorPurchaseContractReturns['update_pricing(uint64,uint64,uint64)string'])}
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `use_hourly_access(uint64)string` ABI method.
     *
     * Deduct hours from user's hourly access
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    useHourlyAccess: async (params: CallParams<ModeratorPurchaseContractArgs['obj']['use_hourly_access(uint64)string'] | ModeratorPurchaseContractArgs['tuple']['use_hourly_access(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ModeratorPurchaseContractParamsFactory.useHourlyAccess(params))
      return {...result, return: result.return as unknown as (undefined | ModeratorPurchaseContractReturns['use_hourly_access(uint64)string'])}
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `get_moderator_info()(uint64,uint64,uint64,address,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get pricing and ownership info (read-only, no cost)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getModeratorInfo: async (params: CallParams<ModeratorPurchaseContractArgs['obj']['get_moderator_info()(uint64,uint64,uint64,address,address)'] | ModeratorPurchaseContractArgs['tuple']['get_moderator_info()(uint64,uint64,uint64,address,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ModeratorPurchaseContractParamsFactory.getModeratorInfo(params))
      return {...result, return: result.return as unknown as (undefined | ModeratorPurchaseContractReturns['get_moderator_info()(uint64,uint64,uint64,address,address)'])}
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `get_user_access(account)(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get user's access details (read-only, no cost)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserAccess: async (params: CallParams<ModeratorPurchaseContractArgs['obj']['get_user_access(account)(uint64,uint64,uint64,uint64)'] | ModeratorPurchaseContractArgs['tuple']['get_user_access(account)(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ModeratorPurchaseContractParamsFactory.getUserAccess(params))
      return {...result, return: result.return as unknown as (undefined | ModeratorPurchaseContractReturns['get_user_access(account)(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `get_contract_stats()(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get contract statistics (read-only, no cost)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getContractStats: async (params: CallParams<ModeratorPurchaseContractArgs['obj']['get_contract_stats()(uint64,uint64,uint64)'] | ModeratorPurchaseContractArgs['tuple']['get_contract_stats()(uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ModeratorPurchaseContractParamsFactory.getContractStats(params))
      return {...result, return: result.return as unknown as (undefined | ModeratorPurchaseContractReturns['get_contract_stats()(uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the ModeratorPurchaseContract smart contract using the `has_valid_access(account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if user has valid access (read-only, no cost)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hasValidAccess: async (params: CallParams<ModeratorPurchaseContractArgs['obj']['has_valid_access(account)bool'] | ModeratorPurchaseContractArgs['tuple']['has_valid_access(account)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ModeratorPurchaseContractParamsFactory.hasValidAccess(params))
      return {...result, return: result.return as unknown as (undefined | ModeratorPurchaseContractReturns['has_valid_access(account)bool'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ModeratorPurchaseContractClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the ModeratorPurchaseContract smart contract using the `get_moderator_info()(uint64,uint64,uint64,address,address)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get pricing and ownership info (read-only, no cost)
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getModeratorInfo(params: CallParams<ModeratorPurchaseContractArgs['obj']['get_moderator_info()(uint64,uint64,uint64,address,address)'] | ModeratorPurchaseContractArgs['tuple']['get_moderator_info()(uint64,uint64,uint64,address,address)']> = {args: []}) {
    const result = await this.appClient.send.call(ModeratorPurchaseContractParamsFactory.getModeratorInfo(params))
    return result.return as unknown as ModeratorPurchaseContractReturns['get_moderator_info()(uint64,uint64,uint64,address,address)']
  }

  /**
   * Makes a readonly (simulated) call to the ModeratorPurchaseContract smart contract using the `get_user_access(account)(uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get user's access details (read-only, no cost)
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getUserAccess(params: CallParams<ModeratorPurchaseContractArgs['obj']['get_user_access(account)(uint64,uint64,uint64,uint64)'] | ModeratorPurchaseContractArgs['tuple']['get_user_access(account)(uint64,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(ModeratorPurchaseContractParamsFactory.getUserAccess(params))
    return result.return as unknown as ModeratorPurchaseContractReturns['get_user_access(account)(uint64,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the ModeratorPurchaseContract smart contract using the `get_contract_stats()(uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get contract statistics (read-only, no cost)
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getContractStats(params: CallParams<ModeratorPurchaseContractArgs['obj']['get_contract_stats()(uint64,uint64,uint64)'] | ModeratorPurchaseContractArgs['tuple']['get_contract_stats()(uint64,uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(ModeratorPurchaseContractParamsFactory.getContractStats(params))
    return result.return as unknown as ModeratorPurchaseContractReturns['get_contract_stats()(uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the ModeratorPurchaseContract smart contract using the `has_valid_access(account)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Check if user has valid access (read-only, no cost)
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async hasValidAccess(params: CallParams<ModeratorPurchaseContractArgs['obj']['has_valid_access(account)bool'] | ModeratorPurchaseContractArgs['tuple']['has_valid_access(account)bool']>) {
    const result = await this.appClient.send.call(ModeratorPurchaseContractParamsFactory.hasValidAccess(params))
    return result.return as unknown as ModeratorPurchaseContractReturns['has_valid_access(account)bool']
  }

  /**
   * Methods to access state for the current ModeratorPurchaseContract app
   */
  state = {
    /**
     * Methods to access global state for the current ModeratorPurchaseContract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          contractOwner: result.contract_owner,
          moderatorOwner: result.moderator_owner,
          moderatorCreator: result.moderator_creator,
          moderatorExists: result.moderator_exists,
          hourlyPrice: result.hourly_price,
          monthlyPrice: result.monthly_price,
          buyoutPrice: result.buyout_price,
          totalTransactions: result.total_transactions,
          totalRevenue: result.total_revenue,
          totalUsers: result.total_users,
        }
      },
      /**
       * Get the current value of the contract_owner key in global state
       */
      contractOwner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("contract_owner")) as string | undefined },
      /**
       * Get the current value of the moderator_owner key in global state
       */
      moderatorOwner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("moderator_owner")) as string | undefined },
      /**
       * Get the current value of the moderator_creator key in global state
       */
      moderatorCreator: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("moderator_creator")) as string | undefined },
      /**
       * Get the current value of the moderator_exists key in global state
       */
      moderatorExists: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("moderator_exists")) as bigint | undefined },
      /**
       * Get the current value of the hourly_price key in global state
       */
      hourlyPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("hourly_price")) as bigint | undefined },
      /**
       * Get the current value of the monthly_price key in global state
       */
      monthlyPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("monthly_price")) as bigint | undefined },
      /**
       * Get the current value of the buyout_price key in global state
       */
      buyoutPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("buyout_price")) as bigint | undefined },
      /**
       * Get the current value of the total_transactions key in global state
       */
      totalTransactions: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_transactions")) as bigint | undefined },
      /**
       * Get the current value of the total_revenue key in global state
       */
      totalRevenue: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_revenue")) as bigint | undefined },
      /**
       * Get the current value of the total_users key in global state
       */
      totalUsers: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_users")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current ModeratorPurchaseContract app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            userAccessType: result.user_access_type,
            accessExpiry: result.access_expiry,
            hoursRemaining: result.hours_remaining,
            totalSpent: result.total_spent,
          }
        },
        /**
         * Get the current value of the user_access_type key in local state
         */
        userAccessType: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("user_access_type")) as bigint | undefined },
        /**
         * Get the current value of the access_expiry key in local state
         */
        accessExpiry: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("access_expiry")) as bigint | undefined },
        /**
         * Get the current value of the hours_remaining key in local state
         */
        hoursRemaining: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("hours_remaining")) as bigint | undefined },
        /**
         * Get the current value of the total_spent key in local state
         */
        totalSpent: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("total_spent")) as bigint | undefined },
      }
    },
  }

  public newGroup(): ModeratorPurchaseContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a purchase_hourly_access(pay,uint64)string method call against the ModeratorPurchaseContract contract
       */
      purchaseHourlyAccess(params: CallParams<ModeratorPurchaseContractArgs['obj']['purchase_hourly_access(pay,uint64)string'] | ModeratorPurchaseContractArgs['tuple']['purchase_hourly_access(pay,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.purchaseHourlyAccess(params)))
        resultMappers.push((v) => client.decodeReturnValue('purchase_hourly_access(pay,uint64)string', v))
        return this
      },
      /**
       * Add a purchase_monthly_license(pay,uint64)string method call against the ModeratorPurchaseContract contract
       */
      purchaseMonthlyLicense(params: CallParams<ModeratorPurchaseContractArgs['obj']['purchase_monthly_license(pay,uint64)string'] | ModeratorPurchaseContractArgs['tuple']['purchase_monthly_license(pay,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.purchaseMonthlyLicense(params)))
        resultMappers.push((v) => client.decodeReturnValue('purchase_monthly_license(pay,uint64)string', v))
        return this
      },
      /**
       * Add a buyout_moderator(pay)string method call against the ModeratorPurchaseContract contract
       */
      buyoutModerator(params: CallParams<ModeratorPurchaseContractArgs['obj']['buyout_moderator(pay)string'] | ModeratorPurchaseContractArgs['tuple']['buyout_moderator(pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buyoutModerator(params)))
        resultMappers.push((v) => client.decodeReturnValue('buyout_moderator(pay)string', v))
        return this
      },
      /**
       * Add a update_pricing(uint64,uint64,uint64)string method call against the ModeratorPurchaseContract contract
       */
      updatePricing(params: CallParams<ModeratorPurchaseContractArgs['obj']['update_pricing(uint64,uint64,uint64)string'] | ModeratorPurchaseContractArgs['tuple']['update_pricing(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePricing(params)))
        resultMappers.push((v) => client.decodeReturnValue('update_pricing(uint64,uint64,uint64)string', v))
        return this
      },
      /**
       * Add a use_hourly_access(uint64)string method call against the ModeratorPurchaseContract contract
       */
      useHourlyAccess(params: CallParams<ModeratorPurchaseContractArgs['obj']['use_hourly_access(uint64)string'] | ModeratorPurchaseContractArgs['tuple']['use_hourly_access(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.useHourlyAccess(params)))
        resultMappers.push((v) => client.decodeReturnValue('use_hourly_access(uint64)string', v))
        return this
      },
      /**
       * Add a get_moderator_info()(uint64,uint64,uint64,address,address) method call against the ModeratorPurchaseContract contract
       */
      getModeratorInfo(params: CallParams<ModeratorPurchaseContractArgs['obj']['get_moderator_info()(uint64,uint64,uint64,address,address)'] | ModeratorPurchaseContractArgs['tuple']['get_moderator_info()(uint64,uint64,uint64,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getModeratorInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_moderator_info()(uint64,uint64,uint64,address,address)', v))
        return this
      },
      /**
       * Add a get_user_access(account)(uint64,uint64,uint64,uint64) method call against the ModeratorPurchaseContract contract
       */
      getUserAccess(params: CallParams<ModeratorPurchaseContractArgs['obj']['get_user_access(account)(uint64,uint64,uint64,uint64)'] | ModeratorPurchaseContractArgs['tuple']['get_user_access(account)(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserAccess(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_user_access(account)(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_contract_stats()(uint64,uint64,uint64) method call against the ModeratorPurchaseContract contract
       */
      getContractStats(params: CallParams<ModeratorPurchaseContractArgs['obj']['get_contract_stats()(uint64,uint64,uint64)'] | ModeratorPurchaseContractArgs['tuple']['get_contract_stats()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getContractStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_contract_stats()(uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a has_valid_access(account)bool method call against the ModeratorPurchaseContract contract
       */
      hasValidAccess(params: CallParams<ModeratorPurchaseContractArgs['obj']['has_valid_access(account)bool'] | ModeratorPurchaseContractArgs['tuple']['has_valid_access(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hasValidAccess(params)))
        resultMappers.push((v) => client.decodeReturnValue('has_valid_access(account)bool', v))
        return this
      },
      /**
       * Add a clear state call to the ModeratorPurchaseContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ModeratorPurchaseContractComposer
  }
}
export type ModeratorPurchaseContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the purchase_hourly_access(pay,uint64)string ABI method.
   *
   * Purchase hourly access to moderator
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchaseHourlyAccess(params?: CallParams<ModeratorPurchaseContractArgs['obj']['purchase_hourly_access(pay,uint64)string'] | ModeratorPurchaseContractArgs['tuple']['purchase_hourly_access(pay,uint64)string']>): ModeratorPurchaseContractComposer<[...TReturns, ModeratorPurchaseContractReturns['purchase_hourly_access(pay,uint64)string'] | undefined]>

  /**
   * Calls the purchase_monthly_license(pay,uint64)string ABI method.
   *
   * Purchase monthly license for moderator
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchaseMonthlyLicense(params?: CallParams<ModeratorPurchaseContractArgs['obj']['purchase_monthly_license(pay,uint64)string'] | ModeratorPurchaseContractArgs['tuple']['purchase_monthly_license(pay,uint64)string']>): ModeratorPurchaseContractComposer<[...TReturns, ModeratorPurchaseContractReturns['purchase_monthly_license(pay,uint64)string'] | undefined]>

  /**
   * Calls the buyout_moderator(pay)string ABI method.
   *
   * Transfer permanent ownership with 90/10 revenue split
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyoutModerator(params?: CallParams<ModeratorPurchaseContractArgs['obj']['buyout_moderator(pay)string'] | ModeratorPurchaseContractArgs['tuple']['buyout_moderator(pay)string']>): ModeratorPurchaseContractComposer<[...TReturns, ModeratorPurchaseContractReturns['buyout_moderator(pay)string'] | undefined]>

  /**
   * Calls the update_pricing(uint64,uint64,uint64)string ABI method.
   *
   * Update pricing - only current owner can call
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePricing(params?: CallParams<ModeratorPurchaseContractArgs['obj']['update_pricing(uint64,uint64,uint64)string'] | ModeratorPurchaseContractArgs['tuple']['update_pricing(uint64,uint64,uint64)string']>): ModeratorPurchaseContractComposer<[...TReturns, ModeratorPurchaseContractReturns['update_pricing(uint64,uint64,uint64)string'] | undefined]>

  /**
   * Calls the use_hourly_access(uint64)string ABI method.
   *
   * Deduct hours from user's hourly access
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  useHourlyAccess(params?: CallParams<ModeratorPurchaseContractArgs['obj']['use_hourly_access(uint64)string'] | ModeratorPurchaseContractArgs['tuple']['use_hourly_access(uint64)string']>): ModeratorPurchaseContractComposer<[...TReturns, ModeratorPurchaseContractReturns['use_hourly_access(uint64)string'] | undefined]>

  /**
   * Calls the get_moderator_info()(uint64,uint64,uint64,address,address) ABI method.
   *
   * Get pricing and ownership info (read-only, no cost)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getModeratorInfo(params?: CallParams<ModeratorPurchaseContractArgs['obj']['get_moderator_info()(uint64,uint64,uint64,address,address)'] | ModeratorPurchaseContractArgs['tuple']['get_moderator_info()(uint64,uint64,uint64,address,address)']>): ModeratorPurchaseContractComposer<[...TReturns, ModeratorPurchaseContractReturns['get_moderator_info()(uint64,uint64,uint64,address,address)'] | undefined]>

  /**
   * Calls the get_user_access(account)(uint64,uint64,uint64,uint64) ABI method.
   *
   * Get user's access details (read-only, no cost)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserAccess(params?: CallParams<ModeratorPurchaseContractArgs['obj']['get_user_access(account)(uint64,uint64,uint64,uint64)'] | ModeratorPurchaseContractArgs['tuple']['get_user_access(account)(uint64,uint64,uint64,uint64)']>): ModeratorPurchaseContractComposer<[...TReturns, ModeratorPurchaseContractReturns['get_user_access(account)(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the get_contract_stats()(uint64,uint64,uint64) ABI method.
   *
   * Get contract statistics (read-only, no cost)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getContractStats(params?: CallParams<ModeratorPurchaseContractArgs['obj']['get_contract_stats()(uint64,uint64,uint64)'] | ModeratorPurchaseContractArgs['tuple']['get_contract_stats()(uint64,uint64,uint64)']>): ModeratorPurchaseContractComposer<[...TReturns, ModeratorPurchaseContractReturns['get_contract_stats()(uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the has_valid_access(account)bool ABI method.
   *
   * Check if user has valid access (read-only, no cost)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hasValidAccess(params?: CallParams<ModeratorPurchaseContractArgs['obj']['has_valid_access(account)bool'] | ModeratorPurchaseContractArgs['tuple']['has_valid_access(account)bool']>): ModeratorPurchaseContractComposer<[...TReturns, ModeratorPurchaseContractReturns['has_valid_access(account)bool'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ModeratorPurchaseContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ModeratorPurchaseContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ModeratorPurchaseContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ModeratorPurchaseContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ModeratorPurchaseContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ModeratorPurchaseContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ModeratorPurchaseContractComposerResults<TReturns>>
}
export type ModeratorPurchaseContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

