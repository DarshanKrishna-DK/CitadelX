/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"CitadelDAO","structs":{"DAOConfig":[{"name":"minMembers","type":"uint64"},{"name":"minStake","type":"uint64"},{"name":"votingPeriod","type":"uint64"},{"name":"activationThreshold","type":"uint64"},{"name":"creator","type":"address"}],"ProposalData":[{"name":"daoId","type":"string"},{"name":"title","type":"string"},{"name":"description","type":"string"},{"name":"creator","type":"address"},{"name":"requiredVotes","type":"uint64"},{"name":"currentVotes","type":"uint64"},{"name":"status","type":"string"},{"name":"createdAt","type":"uint64"}]},"methods":[{"name":"create_dao_proposal","args":[{"type":"string","name":"dao_name","desc":"Name of the DAO"},{"type":"string","name":"description","desc":"DAO description"},{"type":"string","name":"category","desc":"AI moderator category"},{"type":"uint64","name":"min_members","desc":"Minimum members required"},{"type":"uint64","name":"min_stake","desc":"Minimum stake per member in microAlgos"},{"type":"uint64","name":"voting_period","desc":"Voting period in seconds"},{"type":"uint64","name":"activation_threshold","desc":"Percentage needed to pass (51-100)"},{"type":"pay","name":"payment_txn","desc":"Initial treasury contribution payment"}],"returns":{"type":"string","desc":"DAO ID"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a DAO proposal with initial treasury contribution","events":[],"recommendations":{}},{"name":"join_dao","args":[{"type":"string","name":"dao_id","desc":"ID of the DAO to join"},{"type":"pay","name":"payment_txn","desc":"Stake payment transaction"}],"returns":{"type":"string","desc":"Success message"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Join an existing DAO with required stake payment","events":[],"recommendations":{}},{"name":"create_proposal","args":[{"type":"string","name":"dao_id","desc":"ID of the DAO"},{"type":"string","name":"proposal_title","desc":"Title of the proposal"},{"type":"string","name":"proposal_description","desc":"Description with context documents"},{"type":"string","name":"moderator_category","desc":"Category of AI moderator"}],"returns":{"type":"string","desc":"Proposal ID"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new proposal for DAO activation and AI moderator creation","events":[],"recommendations":{}},{"name":"vote_on_proposal","args":[{"type":"string","name":"proposal_id","desc":"ID of the proposal"},{"type":"bool","name":"vote_yes","desc":"True for yes, False for no"}],"returns":{"type":"string","desc":"Success message with updated vote count"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Cast a vote on a proposal (members can only vote once)","events":[],"recommendations":{}},{"name":"execute_proposal","args":[{"type":"string","name":"proposal_id","desc":"ID of the passed proposal"},{"type":"string","name":"moderator_name","desc":"Name for the AI moderator"}],"returns":{"type":"uint64","desc":"NFT Asset ID (mock for now)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Execute a passed proposal and mint NFT for AI moderator","events":[],"recommendations":{}},{"name":"distribute_revenue","args":[{"type":"string","name":"dao_id","desc":"ID of the DAO"},{"type":"uint64","name":"revenue_amount","desc":"Revenue to distribute in microAlgos"}],"returns":{"type":"string","desc":"Success message"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Distribute revenue among DAO members proportionally","events":[],"recommendations":{}},{"name":"get_dao_info","args":[{"type":"string","name":"dao_id","desc":"ID of the DAO"}],"returns":{"type":"string","desc":"DAO information as formatted string"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get DAO configuration and status","events":[],"recommendations":{}},{"name":"get_proposal_info","args":[{"type":"string","name":"proposal_id","desc":"ID of the proposal"}],"returns":{"type":"string","desc":"Proposal information as formatted string"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get proposal details and voting status","events":[],"recommendations":{}},{"name":"check_membership","args":[{"type":"string","name":"dao_id","desc":"ID of the DAO"},{"type":"account","name":"member_address","desc":"Address to check"}],"returns":{"type":"bool","desc":"True if member, False otherwise"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Check if an address is a member of a DAO","events":[],"recommendations":{}},{"name":"get_treasury_balance","args":[{"type":"string","name":"dao_id","desc":"ID of the DAO"}],"returns":{"type":"uint64","desc":"Treasury balance in microAlgos"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get DAO treasury balance","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"\n    Enhanced CitadelDAO Smart Contract\n    \n    Manages DAO creation, membership, proposals, voting with proper payment handling,\n    and revenue distribution with comprehensive state management\n    ","networks":{},"state":{"schema":{"global":{"ints":2,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"dao_counter":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZGFvX2NvdW50ZXI="},"proposal_counter":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHJvcG9zYWxfY291bnRlcg=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"dao_configs":{"keyType":"AVMBytes","valueType":"DAOConfig","prefix":"ZGFvX2NvbmZpZ18="},"proposals":{"keyType":"AVMBytes","valueType":"ProposalData","prefix":"cHJvcG9zYWxf"},"member_stakes":{"keyType":"AVMBytes","valueType":"uint64","prefix":"c3Rha2Vf"},"votes":{"keyType":"AVMBytes","valueType":"uint64","prefix":"dm90ZV8="},"treasury_balances":{"keyType":"AVMBytes","valueType":"uint64","prefix":"dHJlYXN1cnlf"}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[768],"errorMessage":"Already a member of this DAO"},{"pc":[1048],"errorMessage":"Already voted on this proposal"},{"pc":[724,828,1376],"errorMessage":"DAO does not exist"},{"pc":[633],"errorMessage":"Initial payment must meet minimum stake"},{"pc":[574],"errorMessage":"Minimum 2 members required for DAO"},{"pc":[582],"errorMessage":"Minimum stake must be at least 0.1 ALGO"},{"pc":[196,219,247,277,307,341,370,403,451,491],"errorMessage":"OnCompletion is not NoOp"},{"pc":[842],"errorMessage":"Only DAO members can create proposals"},{"pc":[1245],"errorMessage":"Only DAO members can execute proposals"},{"pc":[1028],"errorMessage":"Only DAO members can vote"},{"pc":[616,734],"errorMessage":"Payment must be to contract"},{"pc":[754],"errorMessage":"Payment must meet minimum stake"},{"pc":[624,742],"errorMessage":"Payment sender must match transaction sender"},{"pc":[985,1202],"errorMessage":"Proposal does not exist"},{"pc":[1222],"errorMessage":"Proposal has not passed"},{"pc":[1006],"errorMessage":"Proposal is not active"},{"pc":[600],"errorMessage":"Threshold must be between 51-100"},{"pc":[608],"errorMessage":"Voting period must be at least 1 day"},{"pc":[564],"errorMessage":"can only call when creating"},{"pc":[199,222,250,280,310,344,373,406,454,494],"errorMessage":"can only call when not creating"},{"pc":[726,830,1465],"errorMessage":"check self.dao_configs entry exists"},{"pc":[638],"errorMessage":"check self.dao_counter exists"},{"pc":[847],"errorMessage":"check self.proposal_counter exists"},{"pc":[991,1205,1590],"errorMessage":"check self.proposals entry exists"},{"pc":[779,1383,1471,1705],"errorMessage":"check self.treasury_balances entry exists"},{"pc":[470,538],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiAEAQACNiYJBBUffHUGc3Rha2VfC2Rhb19jb25maWdfCXRyZWFzdXJ5Xwlwcm9wb3NhbF8LZGFvX2NvdW50ZXIQcHJvcG9zYWxfY291bnRlcgZhY3RpdmUGcGFzc2VkMRhAAAgnBSNnJwYjZzEbQQG6ggoEOvvtqAShm/04BHYwVqgEJp+F5ARZhzgcBOPBPzUEXfqrBQRVnWHGBK1gptIEwg55KjYaAI4KASkBAQDRALAAkwBxAFMANQAZAAIjQzEZFEQxGEQ2GgFXAgCIBdAWKExQsCJDMRkURDEYRDYaAVcCADYaAhfAHIgFnShMULAiQzEZFEQxGEQ2GgFXAgCIBQpJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgCIBHVJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgIXiAQSSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIANhoCVwIAiAM+FihMULAiQzEZFEQxGEQ2GgFXAgA2GgKIAkpJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgA2GgRXAgCIAX9JFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgAxFiIJSTgQIhJEiADvSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIANhoCVwIANhoDVwIANhoEFzYaBRc2GgYXNhoHFzEWIglJOBAiEkSIABlJFRZXBgJMUChMULAiQzEZQP6OMRgURCJDiggBi/skD0SL/IGgjQYPRIv+gTMPQQB2i/6BZA5BAG4iRIv9gYCjBQ9Ei/84BzIKEkSL/zgAMQASRIv/OAhJi/wPRCMnBWVEIggnBUsBZxaABGRhb19MUIv7Fov8Fov9Fov+FjEATwRPBFBPA1BPAlBMUCpLAlBMv0kxAFApTFBPAhZMSwG/K0sCUEy/iSNC/4+KAgEqi/5QSb1FAUS+RIv/OAcyChJEi/84ADEAEkSL/zgITIEIW0sBDkSL/jEAUClMUEm+RQEUREsBFr8ri/5QSb5EF08CCBa/gBlTdWNjZXNzZnVsbHkgam9pbmVkIERBTzogi/5QiYoEASqL/FBJvUUBRL5Ei/wxAFApTFC+RQFEIycGZUQiCCcGSwFnFoAFcHJvcF9MUEsBI1tPAoEYWwuBZAoxAEwWMgcWi/wVgUAISRZXBgKAAgBATFCL/RVPAghJFlcGAk8CTFCL/hVPAghMTwRQTwNQgAgAAAAAAAAAAFBMFlcGAlBMUIv8UIv9UIv+UCcHUCcESwJQSbxITL+JigIBJwSL/lBHAr1FAUS+TElPAkRJJVlLARVLAk4CUicHEkRJI1lLASRZSwJOAlIxAFApTFC+RQFEi/4xAFCABXZvdGVfTFBJvkUBFESL/4ABABNJTgMkIksCTRZPAky/QQAriwFJgS5bIggWXC5JjAFJgS5bSwGBJlsPTIwDQQANiwFJJVkjTFgnCFCMA4sDSYwBiwBJvEhMv4sCQQA0gAN5ZXOAC1ZvdGUgY2FzdDogTFCAEywgVG90YWwgeWVzIHZvdGVzOiBQiwGBLlsWUIwAiYACbm9C/8qKAgEnBIv+UEm9RQFESb5ESSVZSwEVSwJLAk8CUicIEkRLASNZSwIkWUsDTgJSMQBQKUxQvkUBREsBgQRZSwJMSwJSsQEyCkcDsiyyK7IqsimyKIAeaHR0cHM6Ly9jaXRhZGVseC5haS9tb2RlcmF0b3IvsieABkNJVE1PRLIli/+yJiOyJCOyIyKyIoEDshAjsgGzMgdPAiNPA1iACGV4ZWN1dGVkUEsCvEhPAky/iYoCASqL/lC9RQFEK4v+UEm+RBeL/wgWv4AjUmV2ZW51ZSBhZGRlZCB0byB0cmVhc3VyeSBmb3IgREFPOiCL/lCJigEBKov/UEm9RQFAABGADURBTyBub3QgZm91bmRMiYsAvkQri/9QvkQXgAVEQU86IIv/UIAPLCBNaW4gTWVtYmVyczogUEsCI1sWUIANLCBNaW4gU3Rha2U6IFBPAoEIWxZQgAwsIFRyZWFzdXJ5OiBQTBZQTImKAQEnBIv/UEm9RQFAABaAElByb3Bvc2FsIG5vdCBmb3VuZEyJiwC+REkkWUsBgQRZSwJOAlKAClByb3Bvc2FsOiBMUIAKLCBTdGF0dXM6IFBLASVZSwIVSwNOAlJQgAksIFZvdGVzOiBQSwGBLlsWUIABL1BMgSZbFlBMiYoCAYv+i/9QKUxQvkUBgAEAI08CVImKAQEri/9QvkQXiQ==","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type DaoConfig = {
  minMembers: bigint,
  minStake: bigint,
  votingPeriod: bigint,
  activationThreshold: bigint,
  creator: string
}


/**
 * Converts the ABI tuple representation of a DAOConfig to the struct representation
 */
export function DaoConfigFromTuple(abiTuple: [bigint, bigint, bigint, bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.DAOConfig, APP_SPEC.structs) as DaoConfig
}

export type ProposalData = {
  daoId: string,
  title: string,
  description: string,
  creator: string,
  requiredVotes: bigint,
  currentVotes: bigint,
  status: string,
  createdAt: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalData to the struct representation
 */
export function ProposalDataFromTuple(abiTuple: [string, string, string, string, bigint, bigint, string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalData, APP_SPEC.structs) as ProposalData
}

/**
 * The argument types for the CitadelDao contract
 */
export type CitadelDaoArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string': {
      /**
       * Name of the DAO
       */
      daoName: string
      /**
       * DAO description
       */
      description: string
      /**
       * AI moderator category
       */
      category: string
      /**
       * Minimum members required
       */
      minMembers: bigint | number
      /**
       * Minimum stake per member in microAlgos
       */
      minStake: bigint | number
      /**
       * Voting period in seconds
       */
      votingPeriod: bigint | number
      /**
       * Percentage needed to pass (51-100)
       */
      activationThreshold: bigint | number
      /**
       * Initial treasury contribution payment
       */
      paymentTxn: AppMethodCallTransactionArgument
    }
    'join_dao(string,pay)string': {
      /**
       * ID of the DAO to join
       */
      daoId: string
      /**
       * Stake payment transaction
       */
      paymentTxn: AppMethodCallTransactionArgument
    }
    'create_proposal(string,string,string,string)string': {
      /**
       * ID of the DAO
       */
      daoId: string
      /**
       * Title of the proposal
       */
      proposalTitle: string
      /**
       * Description with context documents
       */
      proposalDescription: string
      /**
       * Category of AI moderator
       */
      moderatorCategory: string
    }
    'vote_on_proposal(string,bool)string': {
      /**
       * ID of the proposal
       */
      proposalId: string
      /**
       * True for yes, False for no
       */
      voteYes: boolean
    }
    'execute_proposal(string,string)uint64': {
      /**
       * ID of the passed proposal
       */
      proposalId: string
      /**
       * Name for the AI moderator
       */
      moderatorName: string
    }
    'distribute_revenue(string,uint64)string': {
      /**
       * ID of the DAO
       */
      daoId: string
      /**
       * Revenue to distribute in microAlgos
       */
      revenueAmount: bigint | number
    }
    'get_dao_info(string)string': {
      /**
       * ID of the DAO
       */
      daoId: string
    }
    'get_proposal_info(string)string': {
      /**
       * ID of the proposal
       */
      proposalId: string
    }
    'check_membership(string,account)bool': {
      /**
       * ID of the DAO
       */
      daoId: string
      /**
       * Address to check
       */
      memberAddress: Uint8Array | string
    }
    'get_treasury_balance(string)uint64': {
      /**
       * ID of the DAO
       */
      daoId: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string': [daoName: string, description: string, category: string, minMembers: bigint | number, minStake: bigint | number, votingPeriod: bigint | number, activationThreshold: bigint | number, paymentTxn: AppMethodCallTransactionArgument]
    'join_dao(string,pay)string': [daoId: string, paymentTxn: AppMethodCallTransactionArgument]
    'create_proposal(string,string,string,string)string': [daoId: string, proposalTitle: string, proposalDescription: string, moderatorCategory: string]
    'vote_on_proposal(string,bool)string': [proposalId: string, voteYes: boolean]
    'execute_proposal(string,string)uint64': [proposalId: string, moderatorName: string]
    'distribute_revenue(string,uint64)string': [daoId: string, revenueAmount: bigint | number]
    'get_dao_info(string)string': [daoId: string]
    'get_proposal_info(string)string': [proposalId: string]
    'check_membership(string,account)bool': [daoId: string, memberAddress: Uint8Array | string]
    'get_treasury_balance(string)uint64': [daoId: string]
  }
}

/**
 * The return type for each method
 */
export type CitadelDaoReturns = {
  'create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string': string
  'join_dao(string,pay)string': string
  'create_proposal(string,string,string,string)string': string
  'vote_on_proposal(string,bool)string': string
  'execute_proposal(string,string)uint64': bigint
  'distribute_revenue(string,uint64)string': string
  'get_dao_info(string)string': string
  'get_proposal_info(string)string': string
  'check_membership(string,account)bool': boolean
  'get_treasury_balance(string)uint64': bigint
}

/**
 * Defines the types of available calls and state of the CitadelDao smart contract.
 */
export type CitadelDaoTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string' | 'create_dao_proposal', {
      argsObj: CitadelDaoArgs['obj']['create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string']
      argsTuple: CitadelDaoArgs['tuple']['create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string']
      /**
       * DAO ID
       */
      returns: CitadelDaoReturns['create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string']
    }>
    & Record<'join_dao(string,pay)string' | 'join_dao', {
      argsObj: CitadelDaoArgs['obj']['join_dao(string,pay)string']
      argsTuple: CitadelDaoArgs['tuple']['join_dao(string,pay)string']
      /**
       * Success message
       */
      returns: CitadelDaoReturns['join_dao(string,pay)string']
    }>
    & Record<'create_proposal(string,string,string,string)string' | 'create_proposal', {
      argsObj: CitadelDaoArgs['obj']['create_proposal(string,string,string,string)string']
      argsTuple: CitadelDaoArgs['tuple']['create_proposal(string,string,string,string)string']
      /**
       * Proposal ID
       */
      returns: CitadelDaoReturns['create_proposal(string,string,string,string)string']
    }>
    & Record<'vote_on_proposal(string,bool)string' | 'vote_on_proposal', {
      argsObj: CitadelDaoArgs['obj']['vote_on_proposal(string,bool)string']
      argsTuple: CitadelDaoArgs['tuple']['vote_on_proposal(string,bool)string']
      /**
       * Success message with updated vote count
       */
      returns: CitadelDaoReturns['vote_on_proposal(string,bool)string']
    }>
    & Record<'execute_proposal(string,string)uint64' | 'execute_proposal', {
      argsObj: CitadelDaoArgs['obj']['execute_proposal(string,string)uint64']
      argsTuple: CitadelDaoArgs['tuple']['execute_proposal(string,string)uint64']
      /**
       * NFT Asset ID (mock for now)
       */
      returns: CitadelDaoReturns['execute_proposal(string,string)uint64']
    }>
    & Record<'distribute_revenue(string,uint64)string' | 'distribute_revenue', {
      argsObj: CitadelDaoArgs['obj']['distribute_revenue(string,uint64)string']
      argsTuple: CitadelDaoArgs['tuple']['distribute_revenue(string,uint64)string']
      /**
       * Success message
       */
      returns: CitadelDaoReturns['distribute_revenue(string,uint64)string']
    }>
    & Record<'get_dao_info(string)string' | 'get_dao_info', {
      argsObj: CitadelDaoArgs['obj']['get_dao_info(string)string']
      argsTuple: CitadelDaoArgs['tuple']['get_dao_info(string)string']
      /**
       * DAO information as formatted string
       */
      returns: CitadelDaoReturns['get_dao_info(string)string']
    }>
    & Record<'get_proposal_info(string)string' | 'get_proposal_info', {
      argsObj: CitadelDaoArgs['obj']['get_proposal_info(string)string']
      argsTuple: CitadelDaoArgs['tuple']['get_proposal_info(string)string']
      /**
       * Proposal information as formatted string
       */
      returns: CitadelDaoReturns['get_proposal_info(string)string']
    }>
    & Record<'check_membership(string,account)bool' | 'check_membership', {
      argsObj: CitadelDaoArgs['obj']['check_membership(string,account)bool']
      argsTuple: CitadelDaoArgs['tuple']['check_membership(string,account)bool']
      /**
       * True if member, False otherwise
       */
      returns: CitadelDaoReturns['check_membership(string,account)bool']
    }>
    & Record<'get_treasury_balance(string)uint64' | 'get_treasury_balance', {
      argsObj: CitadelDaoArgs['obj']['get_treasury_balance(string)uint64']
      argsTuple: CitadelDaoArgs['tuple']['get_treasury_balance(string)uint64']
      /**
       * Treasury balance in microAlgos
       */
      returns: CitadelDaoReturns['get_treasury_balance(string)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        daoCounter: bigint
        proposalCounter: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        daoConfigs: Map<Uint8Array | string, DaoConfig>
        proposals: Map<Uint8Array | string, ProposalData>
        memberStakes: Map<Uint8Array | string, bigint>
        votes: Map<Uint8Array | string, bigint>
        treasuryBalances: Map<Uint8Array | string, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CitadelDaoSignatures = keyof CitadelDaoTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CitadelDaoNonVoidMethodSignatures = keyof CitadelDaoTypes['methods'] extends infer T ? T extends keyof CitadelDaoTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CitadelDao smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CitadelDaoSignatures> = CitadelDaoTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CitadelDao smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CitadelDaoSignatures> = CitadelDaoTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CitadelDaoTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = CitadelDaoTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CitadelDaoCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type CitadelDaoDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CitadelDaoCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CitadelDao smart contract
 */
export abstract class CitadelDaoParamsFactory {
  /**
   * Constructs a no op call for the create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string ABI method
   *
   * Create a DAO proposal with initial treasury contribution
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createDaoProposal(params: CallParams<CitadelDaoArgs['obj']['create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string'] | CitadelDaoArgs['tuple']['create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.daoName, params.args.description, params.args.category, params.args.minMembers, params.args.minStake, params.args.votingPeriod, params.args.activationThreshold, params.args.paymentTxn],
    }
  }
  /**
   * Constructs a no op call for the join_dao(string,pay)string ABI method
   *
   * Join an existing DAO with required stake payment
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static joinDao(params: CallParams<CitadelDaoArgs['obj']['join_dao(string,pay)string'] | CitadelDaoArgs['tuple']['join_dao(string,pay)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'join_dao(string,pay)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.daoId, params.args.paymentTxn],
    }
  }
  /**
   * Constructs a no op call for the create_proposal(string,string,string,string)string ABI method
   *
   * Create a new proposal for DAO activation and AI moderator creation
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createProposal(params: CallParams<CitadelDaoArgs['obj']['create_proposal(string,string,string,string)string'] | CitadelDaoArgs['tuple']['create_proposal(string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_proposal(string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.daoId, params.args.proposalTitle, params.args.proposalDescription, params.args.moderatorCategory],
    }
  }
  /**
   * Constructs a no op call for the vote_on_proposal(string,bool)string ABI method
   *
   * Cast a vote on a proposal (members can only vote once)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static voteOnProposal(params: CallParams<CitadelDaoArgs['obj']['vote_on_proposal(string,bool)string'] | CitadelDaoArgs['tuple']['vote_on_proposal(string,bool)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'vote_on_proposal(string,bool)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.voteYes],
    }
  }
  /**
   * Constructs a no op call for the execute_proposal(string,string)uint64 ABI method
   *
   * Execute a passed proposal and mint NFT for AI moderator
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static executeProposal(params: CallParams<CitadelDaoArgs['obj']['execute_proposal(string,string)uint64'] | CitadelDaoArgs['tuple']['execute_proposal(string,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'execute_proposal(string,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.moderatorName],
    }
  }
  /**
   * Constructs a no op call for the distribute_revenue(string,uint64)string ABI method
   *
   * Distribute revenue among DAO members proportionally
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static distributeRevenue(params: CallParams<CitadelDaoArgs['obj']['distribute_revenue(string,uint64)string'] | CitadelDaoArgs['tuple']['distribute_revenue(string,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'distribute_revenue(string,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.daoId, params.args.revenueAmount],
    }
  }
  /**
   * Constructs a no op call for the get_dao_info(string)string ABI method
   *
   * Get DAO configuration and status
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getDaoInfo(params: CallParams<CitadelDaoArgs['obj']['get_dao_info(string)string'] | CitadelDaoArgs['tuple']['get_dao_info(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_dao_info(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.daoId],
    }
  }
  /**
   * Constructs a no op call for the get_proposal_info(string)string ABI method
   *
   * Get proposal details and voting status
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getProposalInfo(params: CallParams<CitadelDaoArgs['obj']['get_proposal_info(string)string'] | CitadelDaoArgs['tuple']['get_proposal_info(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_proposal_info(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    }
  }
  /**
   * Constructs a no op call for the check_membership(string,account)bool ABI method
   *
   * Check if an address is a member of a DAO
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static checkMembership(params: CallParams<CitadelDaoArgs['obj']['check_membership(string,account)bool'] | CitadelDaoArgs['tuple']['check_membership(string,account)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'check_membership(string,account)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.daoId, params.args.memberAddress],
    }
  }
  /**
   * Constructs a no op call for the get_treasury_balance(string)uint64 ABI method
   *
   * Get DAO treasury balance
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTreasuryBalance(params: CallParams<CitadelDaoArgs['obj']['get_treasury_balance(string)uint64'] | CitadelDaoArgs['tuple']['get_treasury_balance(string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_treasury_balance(string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.daoId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CitadelDAO smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CitadelDaoFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CitadelDaoFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CitadelDaoClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CitadelDaoClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CitadelDAO smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CitadelDaoDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new CitadelDaoClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CitadelDAO smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CitadelDAO smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CitadelDAO smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new CitadelDaoClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CitadelDAO smart contract
 */
export class CitadelDaoClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CitadelDaoClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CitadelDao app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CitadelDaoClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CitadelDaoNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CitadelDaoClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CitadelDaoClient> {
    return new CitadelDaoClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CitadelDaoClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CitadelDaoClient> {
    return new CitadelDaoClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the CitadelDAO smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string` ABI method.
     *
     * Create a DAO proposal with initial treasury contribution
     *
     * @param params The params for the smart contract call
     * @returns The call params: DAO ID
     */
    createDaoProposal: (params: CallParams<CitadelDaoArgs['obj']['create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string'] | CitadelDaoArgs['tuple']['create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitadelDaoParamsFactory.createDaoProposal(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `join_dao(string,pay)string` ABI method.
     *
     * Join an existing DAO with required stake payment
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success message
     */
    joinDao: (params: CallParams<CitadelDaoArgs['obj']['join_dao(string,pay)string'] | CitadelDaoArgs['tuple']['join_dao(string,pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitadelDaoParamsFactory.joinDao(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `create_proposal(string,string,string,string)string` ABI method.
     *
     * Create a new proposal for DAO activation and AI moderator creation
     *
     * @param params The params for the smart contract call
     * @returns The call params: Proposal ID
     */
    createProposal: (params: CallParams<CitadelDaoArgs['obj']['create_proposal(string,string,string,string)string'] | CitadelDaoArgs['tuple']['create_proposal(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitadelDaoParamsFactory.createProposal(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `vote_on_proposal(string,bool)string` ABI method.
     *
     * Cast a vote on a proposal (members can only vote once)
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success message with updated vote count
     */
    voteOnProposal: (params: CallParams<CitadelDaoArgs['obj']['vote_on_proposal(string,bool)string'] | CitadelDaoArgs['tuple']['vote_on_proposal(string,bool)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitadelDaoParamsFactory.voteOnProposal(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `execute_proposal(string,string)uint64` ABI method.
     *
     * Execute a passed proposal and mint NFT for AI moderator
     *
     * @param params The params for the smart contract call
     * @returns The call params: NFT Asset ID (mock for now)
     */
    executeProposal: (params: CallParams<CitadelDaoArgs['obj']['execute_proposal(string,string)uint64'] | CitadelDaoArgs['tuple']['execute_proposal(string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitadelDaoParamsFactory.executeProposal(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `distribute_revenue(string,uint64)string` ABI method.
     *
     * Distribute revenue among DAO members proportionally
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success message
     */
    distributeRevenue: (params: CallParams<CitadelDaoArgs['obj']['distribute_revenue(string,uint64)string'] | CitadelDaoArgs['tuple']['distribute_revenue(string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitadelDaoParamsFactory.distributeRevenue(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `get_dao_info(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get DAO configuration and status
     *
     * @param params The params for the smart contract call
     * @returns The call params: DAO information as formatted string
     */
    getDaoInfo: (params: CallParams<CitadelDaoArgs['obj']['get_dao_info(string)string'] | CitadelDaoArgs['tuple']['get_dao_info(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitadelDaoParamsFactory.getDaoInfo(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `get_proposal_info(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get proposal details and voting status
     *
     * @param params The params for the smart contract call
     * @returns The call params: Proposal information as formatted string
     */
    getProposalInfo: (params: CallParams<CitadelDaoArgs['obj']['get_proposal_info(string)string'] | CitadelDaoArgs['tuple']['get_proposal_info(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitadelDaoParamsFactory.getProposalInfo(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `check_membership(string,account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if an address is a member of a DAO
     *
     * @param params The params for the smart contract call
     * @returns The call params: True if member, False otherwise
     */
    checkMembership: (params: CallParams<CitadelDaoArgs['obj']['check_membership(string,account)bool'] | CitadelDaoArgs['tuple']['check_membership(string,account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitadelDaoParamsFactory.checkMembership(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `get_treasury_balance(string)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get DAO treasury balance
     *
     * @param params The params for the smart contract call
     * @returns The call params: Treasury balance in microAlgos
     */
    getTreasuryBalance: (params: CallParams<CitadelDaoArgs['obj']['get_treasury_balance(string)uint64'] | CitadelDaoArgs['tuple']['get_treasury_balance(string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitadelDaoParamsFactory.getTreasuryBalance(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the CitadelDAO smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string` ABI method.
     *
     * Create a DAO proposal with initial treasury contribution
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: DAO ID
     */
    createDaoProposal: (params: CallParams<CitadelDaoArgs['obj']['create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string'] | CitadelDaoArgs['tuple']['create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitadelDaoParamsFactory.createDaoProposal(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `join_dao(string,pay)string` ABI method.
     *
     * Join an existing DAO with required stake payment
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success message
     */
    joinDao: (params: CallParams<CitadelDaoArgs['obj']['join_dao(string,pay)string'] | CitadelDaoArgs['tuple']['join_dao(string,pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitadelDaoParamsFactory.joinDao(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `create_proposal(string,string,string,string)string` ABI method.
     *
     * Create a new proposal for DAO activation and AI moderator creation
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Proposal ID
     */
    createProposal: (params: CallParams<CitadelDaoArgs['obj']['create_proposal(string,string,string,string)string'] | CitadelDaoArgs['tuple']['create_proposal(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitadelDaoParamsFactory.createProposal(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `vote_on_proposal(string,bool)string` ABI method.
     *
     * Cast a vote on a proposal (members can only vote once)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success message with updated vote count
     */
    voteOnProposal: (params: CallParams<CitadelDaoArgs['obj']['vote_on_proposal(string,bool)string'] | CitadelDaoArgs['tuple']['vote_on_proposal(string,bool)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitadelDaoParamsFactory.voteOnProposal(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `execute_proposal(string,string)uint64` ABI method.
     *
     * Execute a passed proposal and mint NFT for AI moderator
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: NFT Asset ID (mock for now)
     */
    executeProposal: (params: CallParams<CitadelDaoArgs['obj']['execute_proposal(string,string)uint64'] | CitadelDaoArgs['tuple']['execute_proposal(string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitadelDaoParamsFactory.executeProposal(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `distribute_revenue(string,uint64)string` ABI method.
     *
     * Distribute revenue among DAO members proportionally
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success message
     */
    distributeRevenue: (params: CallParams<CitadelDaoArgs['obj']['distribute_revenue(string,uint64)string'] | CitadelDaoArgs['tuple']['distribute_revenue(string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitadelDaoParamsFactory.distributeRevenue(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `get_dao_info(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get DAO configuration and status
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: DAO information as formatted string
     */
    getDaoInfo: (params: CallParams<CitadelDaoArgs['obj']['get_dao_info(string)string'] | CitadelDaoArgs['tuple']['get_dao_info(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitadelDaoParamsFactory.getDaoInfo(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `get_proposal_info(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get proposal details and voting status
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Proposal information as formatted string
     */
    getProposalInfo: (params: CallParams<CitadelDaoArgs['obj']['get_proposal_info(string)string'] | CitadelDaoArgs['tuple']['get_proposal_info(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitadelDaoParamsFactory.getProposalInfo(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `check_membership(string,account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if an address is a member of a DAO
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: True if member, False otherwise
     */
    checkMembership: (params: CallParams<CitadelDaoArgs['obj']['check_membership(string,account)bool'] | CitadelDaoArgs['tuple']['check_membership(string,account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitadelDaoParamsFactory.checkMembership(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `get_treasury_balance(string)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get DAO treasury balance
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Treasury balance in microAlgos
     */
    getTreasuryBalance: (params: CallParams<CitadelDaoArgs['obj']['get_treasury_balance(string)uint64'] | CitadelDaoArgs['tuple']['get_treasury_balance(string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitadelDaoParamsFactory.getTreasuryBalance(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the CitadelDAO smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string` ABI method.
     *
     * Create a DAO proposal with initial treasury contribution
     *
     * @param params The params for the smart contract call
     * @returns The call result: DAO ID
     */
    createDaoProposal: async (params: CallParams<CitadelDaoArgs['obj']['create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string'] | CitadelDaoArgs['tuple']['create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitadelDaoParamsFactory.createDaoProposal(params))
      return {...result, return: result.return as unknown as (undefined | CitadelDaoReturns['create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string'])}
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `join_dao(string,pay)string` ABI method.
     *
     * Join an existing DAO with required stake payment
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success message
     */
    joinDao: async (params: CallParams<CitadelDaoArgs['obj']['join_dao(string,pay)string'] | CitadelDaoArgs['tuple']['join_dao(string,pay)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitadelDaoParamsFactory.joinDao(params))
      return {...result, return: result.return as unknown as (undefined | CitadelDaoReturns['join_dao(string,pay)string'])}
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `create_proposal(string,string,string,string)string` ABI method.
     *
     * Create a new proposal for DAO activation and AI moderator creation
     *
     * @param params The params for the smart contract call
     * @returns The call result: Proposal ID
     */
    createProposal: async (params: CallParams<CitadelDaoArgs['obj']['create_proposal(string,string,string,string)string'] | CitadelDaoArgs['tuple']['create_proposal(string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitadelDaoParamsFactory.createProposal(params))
      return {...result, return: result.return as unknown as (undefined | CitadelDaoReturns['create_proposal(string,string,string,string)string'])}
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `vote_on_proposal(string,bool)string` ABI method.
     *
     * Cast a vote on a proposal (members can only vote once)
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success message with updated vote count
     */
    voteOnProposal: async (params: CallParams<CitadelDaoArgs['obj']['vote_on_proposal(string,bool)string'] | CitadelDaoArgs['tuple']['vote_on_proposal(string,bool)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitadelDaoParamsFactory.voteOnProposal(params))
      return {...result, return: result.return as unknown as (undefined | CitadelDaoReturns['vote_on_proposal(string,bool)string'])}
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `execute_proposal(string,string)uint64` ABI method.
     *
     * Execute a passed proposal and mint NFT for AI moderator
     *
     * @param params The params for the smart contract call
     * @returns The call result: NFT Asset ID (mock for now)
     */
    executeProposal: async (params: CallParams<CitadelDaoArgs['obj']['execute_proposal(string,string)uint64'] | CitadelDaoArgs['tuple']['execute_proposal(string,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitadelDaoParamsFactory.executeProposal(params))
      return {...result, return: result.return as unknown as (undefined | CitadelDaoReturns['execute_proposal(string,string)uint64'])}
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `distribute_revenue(string,uint64)string` ABI method.
     *
     * Distribute revenue among DAO members proportionally
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success message
     */
    distributeRevenue: async (params: CallParams<CitadelDaoArgs['obj']['distribute_revenue(string,uint64)string'] | CitadelDaoArgs['tuple']['distribute_revenue(string,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitadelDaoParamsFactory.distributeRevenue(params))
      return {...result, return: result.return as unknown as (undefined | CitadelDaoReturns['distribute_revenue(string,uint64)string'])}
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `get_dao_info(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get DAO configuration and status
     *
     * @param params The params for the smart contract call
     * @returns The call result: DAO information as formatted string
     */
    getDaoInfo: async (params: CallParams<CitadelDaoArgs['obj']['get_dao_info(string)string'] | CitadelDaoArgs['tuple']['get_dao_info(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitadelDaoParamsFactory.getDaoInfo(params))
      return {...result, return: result.return as unknown as (undefined | CitadelDaoReturns['get_dao_info(string)string'])}
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `get_proposal_info(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get proposal details and voting status
     *
     * @param params The params for the smart contract call
     * @returns The call result: Proposal information as formatted string
     */
    getProposalInfo: async (params: CallParams<CitadelDaoArgs['obj']['get_proposal_info(string)string'] | CitadelDaoArgs['tuple']['get_proposal_info(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitadelDaoParamsFactory.getProposalInfo(params))
      return {...result, return: result.return as unknown as (undefined | CitadelDaoReturns['get_proposal_info(string)string'])}
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `check_membership(string,account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if an address is a member of a DAO
     *
     * @param params The params for the smart contract call
     * @returns The call result: True if member, False otherwise
     */
    checkMembership: async (params: CallParams<CitadelDaoArgs['obj']['check_membership(string,account)bool'] | CitadelDaoArgs['tuple']['check_membership(string,account)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitadelDaoParamsFactory.checkMembership(params))
      return {...result, return: result.return as unknown as (undefined | CitadelDaoReturns['check_membership(string,account)bool'])}
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `get_treasury_balance(string)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get DAO treasury balance
     *
     * @param params The params for the smart contract call
     * @returns The call result: Treasury balance in microAlgos
     */
    getTreasuryBalance: async (params: CallParams<CitadelDaoArgs['obj']['get_treasury_balance(string)uint64'] | CitadelDaoArgs['tuple']['get_treasury_balance(string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitadelDaoParamsFactory.getTreasuryBalance(params))
      return {...result, return: result.return as unknown as (undefined | CitadelDaoReturns['get_treasury_balance(string)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CitadelDaoClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the CitadelDAO smart contract using the `get_dao_info(string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get DAO configuration and status
   *
   * @param params The params for the smart contract call
   * @returns The call result: DAO information as formatted string
   */
  async getDaoInfo(params: CallParams<CitadelDaoArgs['obj']['get_dao_info(string)string'] | CitadelDaoArgs['tuple']['get_dao_info(string)string']>) {
    const result = await this.appClient.send.call(CitadelDaoParamsFactory.getDaoInfo(params))
    return result.return as unknown as CitadelDaoReturns['get_dao_info(string)string']
  }

  /**
   * Makes a readonly (simulated) call to the CitadelDAO smart contract using the `get_proposal_info(string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get proposal details and voting status
   *
   * @param params The params for the smart contract call
   * @returns The call result: Proposal information as formatted string
   */
  async getProposalInfo(params: CallParams<CitadelDaoArgs['obj']['get_proposal_info(string)string'] | CitadelDaoArgs['tuple']['get_proposal_info(string)string']>) {
    const result = await this.appClient.send.call(CitadelDaoParamsFactory.getProposalInfo(params))
    return result.return as unknown as CitadelDaoReturns['get_proposal_info(string)string']
  }

  /**
   * Makes a readonly (simulated) call to the CitadelDAO smart contract using the `check_membership(string,account)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Check if an address is a member of a DAO
   *
   * @param params The params for the smart contract call
   * @returns The call result: True if member, False otherwise
   */
  async checkMembership(params: CallParams<CitadelDaoArgs['obj']['check_membership(string,account)bool'] | CitadelDaoArgs['tuple']['check_membership(string,account)bool']>) {
    const result = await this.appClient.send.call(CitadelDaoParamsFactory.checkMembership(params))
    return result.return as unknown as CitadelDaoReturns['check_membership(string,account)bool']
  }

  /**
   * Makes a readonly (simulated) call to the CitadelDAO smart contract using the `get_treasury_balance(string)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get DAO treasury balance
   *
   * @param params The params for the smart contract call
   * @returns The call result: Treasury balance in microAlgos
   */
  async getTreasuryBalance(params: CallParams<CitadelDaoArgs['obj']['get_treasury_balance(string)uint64'] | CitadelDaoArgs['tuple']['get_treasury_balance(string)uint64']>) {
    const result = await this.appClient.send.call(CitadelDaoParamsFactory.getTreasuryBalance(params))
    return result.return as unknown as CitadelDaoReturns['get_treasury_balance(string)uint64']
  }

  /**
   * Methods to access state for the current CitadelDAO app
   */
  state = {
    /**
     * Methods to access global state for the current CitadelDAO app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          daoCounter: result.dao_counter,
          proposalCounter: result.proposal_counter,
        }
      },
      /**
       * Get the current value of the dao_counter key in global state
       */
      daoCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("dao_counter")) as bigint | undefined },
      /**
       * Get the current value of the proposal_counter key in global state
       */
      proposalCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("proposal_counter")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current CitadelDAO app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the dao_configs map in box state
       */
      daoConfigs: {
        /**
         * Get all current values of the dao_configs map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, DaoConfig>> => { return (await this.appClient.state.box.getMap("dao_configs")) as Map<Uint8Array, DaoConfig> },
        /**
         * Get a current value of the dao_configs map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<DaoConfig | undefined> => { return await this.appClient.state.box.getMapValue("dao_configs", key) as DaoConfig | undefined },
      },
      /**
       * Get values from the proposals map in box state
       */
      proposals: {
        /**
         * Get all current values of the proposals map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, ProposalData>> => { return (await this.appClient.state.box.getMap("proposals")) as Map<Uint8Array, ProposalData> },
        /**
         * Get a current value of the proposals map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<ProposalData | undefined> => { return await this.appClient.state.box.getMapValue("proposals", key) as ProposalData | undefined },
      },
      /**
       * Get values from the member_stakes map in box state
       */
      memberStakes: {
        /**
         * Get all current values of the member_stakes map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, bigint>> => { return (await this.appClient.state.box.getMap("member_stakes")) as Map<Uint8Array, bigint> },
        /**
         * Get a current value of the member_stakes map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("member_stakes", key) as bigint | undefined },
      },
      /**
       * Get values from the votes map in box state
       */
      votes: {
        /**
         * Get all current values of the votes map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, bigint>> => { return (await this.appClient.state.box.getMap("votes")) as Map<Uint8Array, bigint> },
        /**
         * Get a current value of the votes map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("votes", key) as bigint | undefined },
      },
      /**
       * Get values from the treasury_balances map in box state
       */
      treasuryBalances: {
        /**
         * Get all current values of the treasury_balances map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, bigint>> => { return (await this.appClient.state.box.getMap("treasury_balances")) as Map<Uint8Array, bigint> },
        /**
         * Get a current value of the treasury_balances map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("treasury_balances", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): CitadelDaoComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string method call against the CitadelDAO contract
       */
      createDaoProposal(params: CallParams<CitadelDaoArgs['obj']['create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string'] | CitadelDaoArgs['tuple']['create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createDaoProposal(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string', v))
        return this
      },
      /**
       * Add a join_dao(string,pay)string method call against the CitadelDAO contract
       */
      joinDao(params: CallParams<CitadelDaoArgs['obj']['join_dao(string,pay)string'] | CitadelDaoArgs['tuple']['join_dao(string,pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.joinDao(params)))
        resultMappers.push((v) => client.decodeReturnValue('join_dao(string,pay)string', v))
        return this
      },
      /**
       * Add a create_proposal(string,string,string,string)string method call against the CitadelDAO contract
       */
      createProposal(params: CallParams<CitadelDaoArgs['obj']['create_proposal(string,string,string,string)string'] | CitadelDaoArgs['tuple']['create_proposal(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createProposal(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_proposal(string,string,string,string)string', v))
        return this
      },
      /**
       * Add a vote_on_proposal(string,bool)string method call against the CitadelDAO contract
       */
      voteOnProposal(params: CallParams<CitadelDaoArgs['obj']['vote_on_proposal(string,bool)string'] | CitadelDaoArgs['tuple']['vote_on_proposal(string,bool)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.voteOnProposal(params)))
        resultMappers.push((v) => client.decodeReturnValue('vote_on_proposal(string,bool)string', v))
        return this
      },
      /**
       * Add a execute_proposal(string,string)uint64 method call against the CitadelDAO contract
       */
      executeProposal(params: CallParams<CitadelDaoArgs['obj']['execute_proposal(string,string)uint64'] | CitadelDaoArgs['tuple']['execute_proposal(string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.executeProposal(params)))
        resultMappers.push((v) => client.decodeReturnValue('execute_proposal(string,string)uint64', v))
        return this
      },
      /**
       * Add a distribute_revenue(string,uint64)string method call against the CitadelDAO contract
       */
      distributeRevenue(params: CallParams<CitadelDaoArgs['obj']['distribute_revenue(string,uint64)string'] | CitadelDaoArgs['tuple']['distribute_revenue(string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.distributeRevenue(params)))
        resultMappers.push((v) => client.decodeReturnValue('distribute_revenue(string,uint64)string', v))
        return this
      },
      /**
       * Add a get_dao_info(string)string method call against the CitadelDAO contract
       */
      getDaoInfo(params: CallParams<CitadelDaoArgs['obj']['get_dao_info(string)string'] | CitadelDaoArgs['tuple']['get_dao_info(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getDaoInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_dao_info(string)string', v))
        return this
      },
      /**
       * Add a get_proposal_info(string)string method call against the CitadelDAO contract
       */
      getProposalInfo(params: CallParams<CitadelDaoArgs['obj']['get_proposal_info(string)string'] | CitadelDaoArgs['tuple']['get_proposal_info(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getProposalInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_proposal_info(string)string', v))
        return this
      },
      /**
       * Add a check_membership(string,account)bool method call against the CitadelDAO contract
       */
      checkMembership(params: CallParams<CitadelDaoArgs['obj']['check_membership(string,account)bool'] | CitadelDaoArgs['tuple']['check_membership(string,account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.checkMembership(params)))
        resultMappers.push((v) => client.decodeReturnValue('check_membership(string,account)bool', v))
        return this
      },
      /**
       * Add a get_treasury_balance(string)uint64 method call against the CitadelDAO contract
       */
      getTreasuryBalance(params: CallParams<CitadelDaoArgs['obj']['get_treasury_balance(string)uint64'] | CitadelDaoArgs['tuple']['get_treasury_balance(string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTreasuryBalance(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_treasury_balance(string)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the CitadelDAO contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CitadelDaoComposer
  }
}
export type CitadelDaoComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string ABI method.
   *
   * Create a DAO proposal with initial treasury contribution
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createDaoProposal(params?: CallParams<CitadelDaoArgs['obj']['create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string'] | CitadelDaoArgs['tuple']['create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string']>): CitadelDaoComposer<[...TReturns, CitadelDaoReturns['create_dao_proposal(string,string,string,uint64,uint64,uint64,uint64,pay)string'] | undefined]>

  /**
   * Calls the join_dao(string,pay)string ABI method.
   *
   * Join an existing DAO with required stake payment
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  joinDao(params?: CallParams<CitadelDaoArgs['obj']['join_dao(string,pay)string'] | CitadelDaoArgs['tuple']['join_dao(string,pay)string']>): CitadelDaoComposer<[...TReturns, CitadelDaoReturns['join_dao(string,pay)string'] | undefined]>

  /**
   * Calls the create_proposal(string,string,string,string)string ABI method.
   *
   * Create a new proposal for DAO activation and AI moderator creation
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createProposal(params?: CallParams<CitadelDaoArgs['obj']['create_proposal(string,string,string,string)string'] | CitadelDaoArgs['tuple']['create_proposal(string,string,string,string)string']>): CitadelDaoComposer<[...TReturns, CitadelDaoReturns['create_proposal(string,string,string,string)string'] | undefined]>

  /**
   * Calls the vote_on_proposal(string,bool)string ABI method.
   *
   * Cast a vote on a proposal (members can only vote once)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteOnProposal(params?: CallParams<CitadelDaoArgs['obj']['vote_on_proposal(string,bool)string'] | CitadelDaoArgs['tuple']['vote_on_proposal(string,bool)string']>): CitadelDaoComposer<[...TReturns, CitadelDaoReturns['vote_on_proposal(string,bool)string'] | undefined]>

  /**
   * Calls the execute_proposal(string,string)uint64 ABI method.
   *
   * Execute a passed proposal and mint NFT for AI moderator
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  executeProposal(params?: CallParams<CitadelDaoArgs['obj']['execute_proposal(string,string)uint64'] | CitadelDaoArgs['tuple']['execute_proposal(string,string)uint64']>): CitadelDaoComposer<[...TReturns, CitadelDaoReturns['execute_proposal(string,string)uint64'] | undefined]>

  /**
   * Calls the distribute_revenue(string,uint64)string ABI method.
   *
   * Distribute revenue among DAO members proportionally
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  distributeRevenue(params?: CallParams<CitadelDaoArgs['obj']['distribute_revenue(string,uint64)string'] | CitadelDaoArgs['tuple']['distribute_revenue(string,uint64)string']>): CitadelDaoComposer<[...TReturns, CitadelDaoReturns['distribute_revenue(string,uint64)string'] | undefined]>

  /**
   * Calls the get_dao_info(string)string ABI method.
   *
   * Get DAO configuration and status
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDaoInfo(params?: CallParams<CitadelDaoArgs['obj']['get_dao_info(string)string'] | CitadelDaoArgs['tuple']['get_dao_info(string)string']>): CitadelDaoComposer<[...TReturns, CitadelDaoReturns['get_dao_info(string)string'] | undefined]>

  /**
   * Calls the get_proposal_info(string)string ABI method.
   *
   * Get proposal details and voting status
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProposalInfo(params?: CallParams<CitadelDaoArgs['obj']['get_proposal_info(string)string'] | CitadelDaoArgs['tuple']['get_proposal_info(string)string']>): CitadelDaoComposer<[...TReturns, CitadelDaoReturns['get_proposal_info(string)string'] | undefined]>

  /**
   * Calls the check_membership(string,account)bool ABI method.
   *
   * Check if an address is a member of a DAO
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkMembership(params?: CallParams<CitadelDaoArgs['obj']['check_membership(string,account)bool'] | CitadelDaoArgs['tuple']['check_membership(string,account)bool']>): CitadelDaoComposer<[...TReturns, CitadelDaoReturns['check_membership(string,account)bool'] | undefined]>

  /**
   * Calls the get_treasury_balance(string)uint64 ABI method.
   *
   * Get DAO treasury balance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTreasuryBalance(params?: CallParams<CitadelDaoArgs['obj']['get_treasury_balance(string)uint64'] | CitadelDaoArgs['tuple']['get_treasury_balance(string)uint64']>): CitadelDaoComposer<[...TReturns, CitadelDaoReturns['get_treasury_balance(string)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the CitadelDAO smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CitadelDaoComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CitadelDaoComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CitadelDaoComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CitadelDaoComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CitadelDaoComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CitadelDaoComposerResults<TReturns>>
}
export type CitadelDaoComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

