/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"CitadelDAO","structs":{},"methods":[{"name":"create_dao","args":[{"type":"string","name":"dao_name","desc":"Name of the DAO"},{"type":"uint64","name":"min_members","desc":"Minimum members required"},{"type":"uint64","name":"min_stake","desc":"Minimum stake per member in microAlgos"},{"type":"uint64","name":"voting_period","desc":"Voting period in seconds"},{"type":"uint64","name":"activation_threshold","desc":"Percentage needed to pass (0-100)"}],"returns":{"type":"string","desc":"Success message with DAO ID"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initialize a new DAO","events":[],"recommendations":{}},{"name":"join_dao","args":[{"type":"string","name":"dao_id","desc":"ID of the DAO to join"},{"type":"uint64","name":"stake_amount","desc":"Amount to stake in microAlgos"}],"returns":{"type":"string","desc":"Success message"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Join an existing DAO with required stake","events":[],"recommendations":{}},{"name":"create_proposal","args":[{"type":"string","name":"dao_id","desc":"ID of the DAO"},{"type":"string","name":"proposal_title","desc":"Title of the proposal"},{"type":"string","name":"proposal_description","desc":"Description"},{"type":"uint64","name":"required_votes","desc":"Number of votes required to pass"}],"returns":{"type":"string","desc":"Proposal ID"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new proposal for voting","events":[],"recommendations":{}},{"name":"vote","args":[{"type":"string","name":"proposal_id","desc":"ID of the proposal"},{"type":"bool","name":"vote_yes","desc":"True for yes, False for no"},{"type":"uint64","name":"voting_power","desc":"Voter's voting power"}],"returns":{"type":"string","desc":"Success message with vote count"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Cast a vote on a proposal","events":[],"recommendations":{}},{"name":"execute_proposal","args":[{"type":"string","name":"proposal_id","desc":"ID of the passed proposal"},{"type":"string","name":"moderator_name","desc":"Name for the AI moderator"}],"returns":{"type":"uint64","desc":"NFT Asset ID"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Execute a passed proposal and mint NFT for AI moderator","events":[],"recommendations":{}},{"name":"distribute_revenue","args":[{"type":"string","name":"dao_id","desc":"ID of the DAO"},{"type":"uint64","name":"total_revenue","desc":"Total revenue to distribute in microAlgos"},{"type":"uint64","name":"member_count","desc":"Number of members"}],"returns":{"type":"string","desc":"Success message"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Distribute revenue among DAO members","events":[],"recommendations":{}},{"name":"get_dao_info","args":[{"type":"string","name":"dao_id","desc":"ID of the DAO"}],"returns":{"type":"string","desc":"DAO information as string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get DAO information","events":[],"recommendations":{}},{"name":"get_proposal_status","args":[{"type":"string","name":"proposal_id","desc":"ID of the proposal"}],"returns":{"type":"string","desc":"Proposal status"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get proposal voting status","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"\n    CitadelDAO Smart Contract\n    \n    Manages DAO creation, membership, proposals, voting, and revenue distribution\n    ","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[388],"errorMessage":"Minimum members must be greater than 0"},{"pc":[391],"errorMessage":"Minimum stake must be greater than 0"},{"pc":[605],"errorMessage":"No members to distribute to"},{"pc":[85,115,145,183,212,249,295,329],"errorMessage":"OnCompletion is not NoOp"},{"pc":[461],"errorMessage":"Stake amount must be greater than 0"},{"pc":[409],"errorMessage":"Threshold must be between 51-100"},{"pc":[380],"errorMessage":"can only call when creating"},{"pc":[88,118,148,186,215,252,298,332],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiACAQAmAQQVH3x1MRtBAWOCCASqJ8ydBLQeHbYEmHub+wQtaotiBFmHOBwErEonNgRd+qsFBLKKEtg2GgCOCAD2ANQApgCBAGQAPgAgAAIjQzEZFEQxGEQ2GgFXAgCIAjVJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgCIAgBJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgIXNhoDF4gBskkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCAIgBhBYoTFCwIkMxGRREMRhENhoBVwIANhoCNhoDF4gBNEkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBBeIANdJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgIXiACQSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIANhoCFzYaAxc2GgQXNhoFF4gAGUkVFlcGAkxQKExQsCJDMRlA/tcxGBREIkOKBQGL/ESL/USL/4EzD0EANIv/gWQOQQAsIkSAJERBTyBjcmVhdGVkIHN1Y2Nlc3NmdWxseSB3aXRoIG5hbWU6IIv7UIkjQv/RigIBi/9EgBlTdWNjZXNzZnVsbHkgam9pbmVkIERBTzogi/5QiYoEAYAJcHJvcG9zYWxfi/xQgAFfUIv9UIASUHJvcG9zYWwgY3JlYXRlZDogTFCJigMBi/6AAQATQQAfgAN5ZXOAC1ZvdGUgY2FzdDogTFCABCBvbiBQi/1QiYACbm9C/9+KAgGB6AcyBwiJigMBi/9EgBxSZXZlbnVlIGRpc3RyaWJ1dGVkIHRvIERBTzogi/1QiYoBAYAOREFPIEluZm8gZm9yOiCL/1CJigEBgBFQcm9wb3NhbCBzdGF0dXM6IIv/UIk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the CitadelDao contract
 */
export type CitadelDaoArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_dao(string,uint64,uint64,uint64,uint64)string': {
      /**
       * Name of the DAO
       */
      daoName: string
      /**
       * Minimum members required
       */
      minMembers: bigint | number
      /**
       * Minimum stake per member in microAlgos
       */
      minStake: bigint | number
      /**
       * Voting period in seconds
       */
      votingPeriod: bigint | number
      /**
       * Percentage needed to pass (0-100)
       */
      activationThreshold: bigint | number
    }
    'join_dao(string,uint64)string': {
      /**
       * ID of the DAO to join
       */
      daoId: string
      /**
       * Amount to stake in microAlgos
       */
      stakeAmount: bigint | number
    }
    'create_proposal(string,string,string,uint64)string': {
      /**
       * ID of the DAO
       */
      daoId: string
      /**
       * Title of the proposal
       */
      proposalTitle: string
      /**
       * Description
       */
      proposalDescription: string
      /**
       * Number of votes required to pass
       */
      requiredVotes: bigint | number
    }
    'vote(string,bool,uint64)string': {
      /**
       * ID of the proposal
       */
      proposalId: string
      /**
       * True for yes, False for no
       */
      voteYes: boolean
      /**
       * Voter's voting power
       */
      votingPower: bigint | number
    }
    'execute_proposal(string,string)uint64': {
      /**
       * ID of the passed proposal
       */
      proposalId: string
      /**
       * Name for the AI moderator
       */
      moderatorName: string
    }
    'distribute_revenue(string,uint64,uint64)string': {
      /**
       * ID of the DAO
       */
      daoId: string
      /**
       * Total revenue to distribute in microAlgos
       */
      totalRevenue: bigint | number
      /**
       * Number of members
       */
      memberCount: bigint | number
    }
    'get_dao_info(string)string': {
      /**
       * ID of the DAO
       */
      daoId: string
    }
    'get_proposal_status(string)string': {
      /**
       * ID of the proposal
       */
      proposalId: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_dao(string,uint64,uint64,uint64,uint64)string': [daoName: string, minMembers: bigint | number, minStake: bigint | number, votingPeriod: bigint | number, activationThreshold: bigint | number]
    'join_dao(string,uint64)string': [daoId: string, stakeAmount: bigint | number]
    'create_proposal(string,string,string,uint64)string': [daoId: string, proposalTitle: string, proposalDescription: string, requiredVotes: bigint | number]
    'vote(string,bool,uint64)string': [proposalId: string, voteYes: boolean, votingPower: bigint | number]
    'execute_proposal(string,string)uint64': [proposalId: string, moderatorName: string]
    'distribute_revenue(string,uint64,uint64)string': [daoId: string, totalRevenue: bigint | number, memberCount: bigint | number]
    'get_dao_info(string)string': [daoId: string]
    'get_proposal_status(string)string': [proposalId: string]
  }
}

/**
 * The return type for each method
 */
export type CitadelDaoReturns = {
  'create_dao(string,uint64,uint64,uint64,uint64)string': string
  'join_dao(string,uint64)string': string
  'create_proposal(string,string,string,uint64)string': string
  'vote(string,bool,uint64)string': string
  'execute_proposal(string,string)uint64': bigint
  'distribute_revenue(string,uint64,uint64)string': string
  'get_dao_info(string)string': string
  'get_proposal_status(string)string': string
}

/**
 * Defines the types of available calls and state of the CitadelDao smart contract.
 */
export type CitadelDaoTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_dao(string,uint64,uint64,uint64,uint64)string' | 'create_dao', {
      argsObj: CitadelDaoArgs['obj']['create_dao(string,uint64,uint64,uint64,uint64)string']
      argsTuple: CitadelDaoArgs['tuple']['create_dao(string,uint64,uint64,uint64,uint64)string']
      /**
       * Success message with DAO ID
       */
      returns: CitadelDaoReturns['create_dao(string,uint64,uint64,uint64,uint64)string']
    }>
    & Record<'join_dao(string,uint64)string' | 'join_dao', {
      argsObj: CitadelDaoArgs['obj']['join_dao(string,uint64)string']
      argsTuple: CitadelDaoArgs['tuple']['join_dao(string,uint64)string']
      /**
       * Success message
       */
      returns: CitadelDaoReturns['join_dao(string,uint64)string']
    }>
    & Record<'create_proposal(string,string,string,uint64)string' | 'create_proposal', {
      argsObj: CitadelDaoArgs['obj']['create_proposal(string,string,string,uint64)string']
      argsTuple: CitadelDaoArgs['tuple']['create_proposal(string,string,string,uint64)string']
      /**
       * Proposal ID
       */
      returns: CitadelDaoReturns['create_proposal(string,string,string,uint64)string']
    }>
    & Record<'vote(string,bool,uint64)string' | 'vote', {
      argsObj: CitadelDaoArgs['obj']['vote(string,bool,uint64)string']
      argsTuple: CitadelDaoArgs['tuple']['vote(string,bool,uint64)string']
      /**
       * Success message with vote count
       */
      returns: CitadelDaoReturns['vote(string,bool,uint64)string']
    }>
    & Record<'execute_proposal(string,string)uint64' | 'execute_proposal', {
      argsObj: CitadelDaoArgs['obj']['execute_proposal(string,string)uint64']
      argsTuple: CitadelDaoArgs['tuple']['execute_proposal(string,string)uint64']
      /**
       * NFT Asset ID
       */
      returns: CitadelDaoReturns['execute_proposal(string,string)uint64']
    }>
    & Record<'distribute_revenue(string,uint64,uint64)string' | 'distribute_revenue', {
      argsObj: CitadelDaoArgs['obj']['distribute_revenue(string,uint64,uint64)string']
      argsTuple: CitadelDaoArgs['tuple']['distribute_revenue(string,uint64,uint64)string']
      /**
       * Success message
       */
      returns: CitadelDaoReturns['distribute_revenue(string,uint64,uint64)string']
    }>
    & Record<'get_dao_info(string)string' | 'get_dao_info', {
      argsObj: CitadelDaoArgs['obj']['get_dao_info(string)string']
      argsTuple: CitadelDaoArgs['tuple']['get_dao_info(string)string']
      /**
       * DAO information as string
       */
      returns: CitadelDaoReturns['get_dao_info(string)string']
    }>
    & Record<'get_proposal_status(string)string' | 'get_proposal_status', {
      argsObj: CitadelDaoArgs['obj']['get_proposal_status(string)string']
      argsTuple: CitadelDaoArgs['tuple']['get_proposal_status(string)string']
      /**
       * Proposal status
       */
      returns: CitadelDaoReturns['get_proposal_status(string)string']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type CitadelDaoSignatures = keyof CitadelDaoTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CitadelDaoNonVoidMethodSignatures = keyof CitadelDaoTypes['methods'] extends infer T ? T extends keyof CitadelDaoTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CitadelDao smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CitadelDaoSignatures> = CitadelDaoTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CitadelDao smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CitadelDaoSignatures> = CitadelDaoTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type CitadelDaoCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type CitadelDaoDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CitadelDaoCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CitadelDao smart contract
 */
export abstract class CitadelDaoParamsFactory {
  /**
   * Constructs a no op call for the create_dao(string,uint64,uint64,uint64,uint64)string ABI method
   *
   * Initialize a new DAO
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createDao(params: CallParams<CitadelDaoArgs['obj']['create_dao(string,uint64,uint64,uint64,uint64)string'] | CitadelDaoArgs['tuple']['create_dao(string,uint64,uint64,uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_dao(string,uint64,uint64,uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.daoName, params.args.minMembers, params.args.minStake, params.args.votingPeriod, params.args.activationThreshold],
    }
  }
  /**
   * Constructs a no op call for the join_dao(string,uint64)string ABI method
   *
   * Join an existing DAO with required stake
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static joinDao(params: CallParams<CitadelDaoArgs['obj']['join_dao(string,uint64)string'] | CitadelDaoArgs['tuple']['join_dao(string,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'join_dao(string,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.daoId, params.args.stakeAmount],
    }
  }
  /**
   * Constructs a no op call for the create_proposal(string,string,string,uint64)string ABI method
   *
   * Create a new proposal for voting
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createProposal(params: CallParams<CitadelDaoArgs['obj']['create_proposal(string,string,string,uint64)string'] | CitadelDaoArgs['tuple']['create_proposal(string,string,string,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_proposal(string,string,string,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.daoId, params.args.proposalTitle, params.args.proposalDescription, params.args.requiredVotes],
    }
  }
  /**
   * Constructs a no op call for the vote(string,bool,uint64)string ABI method
   *
   * Cast a vote on a proposal
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static vote(params: CallParams<CitadelDaoArgs['obj']['vote(string,bool,uint64)string'] | CitadelDaoArgs['tuple']['vote(string,bool,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'vote(string,bool,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.voteYes, params.args.votingPower],
    }
  }
  /**
   * Constructs a no op call for the execute_proposal(string,string)uint64 ABI method
   *
   * Execute a passed proposal and mint NFT for AI moderator
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static executeProposal(params: CallParams<CitadelDaoArgs['obj']['execute_proposal(string,string)uint64'] | CitadelDaoArgs['tuple']['execute_proposal(string,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'execute_proposal(string,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.moderatorName],
    }
  }
  /**
   * Constructs a no op call for the distribute_revenue(string,uint64,uint64)string ABI method
   *
   * Distribute revenue among DAO members
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static distributeRevenue(params: CallParams<CitadelDaoArgs['obj']['distribute_revenue(string,uint64,uint64)string'] | CitadelDaoArgs['tuple']['distribute_revenue(string,uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'distribute_revenue(string,uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.daoId, params.args.totalRevenue, params.args.memberCount],
    }
  }
  /**
   * Constructs a no op call for the get_dao_info(string)string ABI method
   *
   * Get DAO information
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getDaoInfo(params: CallParams<CitadelDaoArgs['obj']['get_dao_info(string)string'] | CitadelDaoArgs['tuple']['get_dao_info(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_dao_info(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.daoId],
    }
  }
  /**
   * Constructs a no op call for the get_proposal_status(string)string ABI method
   *
   * Get proposal voting status
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getProposalStatus(params: CallParams<CitadelDaoArgs['obj']['get_proposal_status(string)string'] | CitadelDaoArgs['tuple']['get_proposal_status(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_proposal_status(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CitadelDAO smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CitadelDaoFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CitadelDaoFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CitadelDaoClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CitadelDaoClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CitadelDAO smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CitadelDaoDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new CitadelDaoClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CitadelDAO smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CitadelDAO smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CitadelDAO smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new CitadelDaoClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CitadelDAO smart contract
 */
export class CitadelDaoClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CitadelDaoClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CitadelDao app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CitadelDaoClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CitadelDaoNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CitadelDaoClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CitadelDaoClient> {
    return new CitadelDaoClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CitadelDaoClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CitadelDaoClient> {
    return new CitadelDaoClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the CitadelDAO smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `create_dao(string,uint64,uint64,uint64,uint64)string` ABI method.
     *
     * Initialize a new DAO
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success message with DAO ID
     */
    createDao: (params: CallParams<CitadelDaoArgs['obj']['create_dao(string,uint64,uint64,uint64,uint64)string'] | CitadelDaoArgs['tuple']['create_dao(string,uint64,uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitadelDaoParamsFactory.createDao(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `join_dao(string,uint64)string` ABI method.
     *
     * Join an existing DAO with required stake
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success message
     */
    joinDao: (params: CallParams<CitadelDaoArgs['obj']['join_dao(string,uint64)string'] | CitadelDaoArgs['tuple']['join_dao(string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitadelDaoParamsFactory.joinDao(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `create_proposal(string,string,string,uint64)string` ABI method.
     *
     * Create a new proposal for voting
     *
     * @param params The params for the smart contract call
     * @returns The call params: Proposal ID
     */
    createProposal: (params: CallParams<CitadelDaoArgs['obj']['create_proposal(string,string,string,uint64)string'] | CitadelDaoArgs['tuple']['create_proposal(string,string,string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitadelDaoParamsFactory.createProposal(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `vote(string,bool,uint64)string` ABI method.
     *
     * Cast a vote on a proposal
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success message with vote count
     */
    vote: (params: CallParams<CitadelDaoArgs['obj']['vote(string,bool,uint64)string'] | CitadelDaoArgs['tuple']['vote(string,bool,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitadelDaoParamsFactory.vote(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `execute_proposal(string,string)uint64` ABI method.
     *
     * Execute a passed proposal and mint NFT for AI moderator
     *
     * @param params The params for the smart contract call
     * @returns The call params: NFT Asset ID
     */
    executeProposal: (params: CallParams<CitadelDaoArgs['obj']['execute_proposal(string,string)uint64'] | CitadelDaoArgs['tuple']['execute_proposal(string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitadelDaoParamsFactory.executeProposal(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `distribute_revenue(string,uint64,uint64)string` ABI method.
     *
     * Distribute revenue among DAO members
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success message
     */
    distributeRevenue: (params: CallParams<CitadelDaoArgs['obj']['distribute_revenue(string,uint64,uint64)string'] | CitadelDaoArgs['tuple']['distribute_revenue(string,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitadelDaoParamsFactory.distributeRevenue(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `get_dao_info(string)string` ABI method.
     *
     * Get DAO information
     *
     * @param params The params for the smart contract call
     * @returns The call params: DAO information as string
     */
    getDaoInfo: (params: CallParams<CitadelDaoArgs['obj']['get_dao_info(string)string'] | CitadelDaoArgs['tuple']['get_dao_info(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitadelDaoParamsFactory.getDaoInfo(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `get_proposal_status(string)string` ABI method.
     *
     * Get proposal voting status
     *
     * @param params The params for the smart contract call
     * @returns The call params: Proposal status
     */
    getProposalStatus: (params: CallParams<CitadelDaoArgs['obj']['get_proposal_status(string)string'] | CitadelDaoArgs['tuple']['get_proposal_status(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitadelDaoParamsFactory.getProposalStatus(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the CitadelDAO smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `create_dao(string,uint64,uint64,uint64,uint64)string` ABI method.
     *
     * Initialize a new DAO
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success message with DAO ID
     */
    createDao: (params: CallParams<CitadelDaoArgs['obj']['create_dao(string,uint64,uint64,uint64,uint64)string'] | CitadelDaoArgs['tuple']['create_dao(string,uint64,uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitadelDaoParamsFactory.createDao(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `join_dao(string,uint64)string` ABI method.
     *
     * Join an existing DAO with required stake
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success message
     */
    joinDao: (params: CallParams<CitadelDaoArgs['obj']['join_dao(string,uint64)string'] | CitadelDaoArgs['tuple']['join_dao(string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitadelDaoParamsFactory.joinDao(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `create_proposal(string,string,string,uint64)string` ABI method.
     *
     * Create a new proposal for voting
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Proposal ID
     */
    createProposal: (params: CallParams<CitadelDaoArgs['obj']['create_proposal(string,string,string,uint64)string'] | CitadelDaoArgs['tuple']['create_proposal(string,string,string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitadelDaoParamsFactory.createProposal(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `vote(string,bool,uint64)string` ABI method.
     *
     * Cast a vote on a proposal
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success message with vote count
     */
    vote: (params: CallParams<CitadelDaoArgs['obj']['vote(string,bool,uint64)string'] | CitadelDaoArgs['tuple']['vote(string,bool,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitadelDaoParamsFactory.vote(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `execute_proposal(string,string)uint64` ABI method.
     *
     * Execute a passed proposal and mint NFT for AI moderator
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: NFT Asset ID
     */
    executeProposal: (params: CallParams<CitadelDaoArgs['obj']['execute_proposal(string,string)uint64'] | CitadelDaoArgs['tuple']['execute_proposal(string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitadelDaoParamsFactory.executeProposal(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `distribute_revenue(string,uint64,uint64)string` ABI method.
     *
     * Distribute revenue among DAO members
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success message
     */
    distributeRevenue: (params: CallParams<CitadelDaoArgs['obj']['distribute_revenue(string,uint64,uint64)string'] | CitadelDaoArgs['tuple']['distribute_revenue(string,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitadelDaoParamsFactory.distributeRevenue(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `get_dao_info(string)string` ABI method.
     *
     * Get DAO information
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: DAO information as string
     */
    getDaoInfo: (params: CallParams<CitadelDaoArgs['obj']['get_dao_info(string)string'] | CitadelDaoArgs['tuple']['get_dao_info(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitadelDaoParamsFactory.getDaoInfo(params))
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `get_proposal_status(string)string` ABI method.
     *
     * Get proposal voting status
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Proposal status
     */
    getProposalStatus: (params: CallParams<CitadelDaoArgs['obj']['get_proposal_status(string)string'] | CitadelDaoArgs['tuple']['get_proposal_status(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitadelDaoParamsFactory.getProposalStatus(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the CitadelDAO smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `create_dao(string,uint64,uint64,uint64,uint64)string` ABI method.
     *
     * Initialize a new DAO
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success message with DAO ID
     */
    createDao: async (params: CallParams<CitadelDaoArgs['obj']['create_dao(string,uint64,uint64,uint64,uint64)string'] | CitadelDaoArgs['tuple']['create_dao(string,uint64,uint64,uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitadelDaoParamsFactory.createDao(params))
      return {...result, return: result.return as unknown as (undefined | CitadelDaoReturns['create_dao(string,uint64,uint64,uint64,uint64)string'])}
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `join_dao(string,uint64)string` ABI method.
     *
     * Join an existing DAO with required stake
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success message
     */
    joinDao: async (params: CallParams<CitadelDaoArgs['obj']['join_dao(string,uint64)string'] | CitadelDaoArgs['tuple']['join_dao(string,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitadelDaoParamsFactory.joinDao(params))
      return {...result, return: result.return as unknown as (undefined | CitadelDaoReturns['join_dao(string,uint64)string'])}
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `create_proposal(string,string,string,uint64)string` ABI method.
     *
     * Create a new proposal for voting
     *
     * @param params The params for the smart contract call
     * @returns The call result: Proposal ID
     */
    createProposal: async (params: CallParams<CitadelDaoArgs['obj']['create_proposal(string,string,string,uint64)string'] | CitadelDaoArgs['tuple']['create_proposal(string,string,string,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitadelDaoParamsFactory.createProposal(params))
      return {...result, return: result.return as unknown as (undefined | CitadelDaoReturns['create_proposal(string,string,string,uint64)string'])}
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `vote(string,bool,uint64)string` ABI method.
     *
     * Cast a vote on a proposal
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success message with vote count
     */
    vote: async (params: CallParams<CitadelDaoArgs['obj']['vote(string,bool,uint64)string'] | CitadelDaoArgs['tuple']['vote(string,bool,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitadelDaoParamsFactory.vote(params))
      return {...result, return: result.return as unknown as (undefined | CitadelDaoReturns['vote(string,bool,uint64)string'])}
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `execute_proposal(string,string)uint64` ABI method.
     *
     * Execute a passed proposal and mint NFT for AI moderator
     *
     * @param params The params for the smart contract call
     * @returns The call result: NFT Asset ID
     */
    executeProposal: async (params: CallParams<CitadelDaoArgs['obj']['execute_proposal(string,string)uint64'] | CitadelDaoArgs['tuple']['execute_proposal(string,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitadelDaoParamsFactory.executeProposal(params))
      return {...result, return: result.return as unknown as (undefined | CitadelDaoReturns['execute_proposal(string,string)uint64'])}
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `distribute_revenue(string,uint64,uint64)string` ABI method.
     *
     * Distribute revenue among DAO members
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success message
     */
    distributeRevenue: async (params: CallParams<CitadelDaoArgs['obj']['distribute_revenue(string,uint64,uint64)string'] | CitadelDaoArgs['tuple']['distribute_revenue(string,uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitadelDaoParamsFactory.distributeRevenue(params))
      return {...result, return: result.return as unknown as (undefined | CitadelDaoReturns['distribute_revenue(string,uint64,uint64)string'])}
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `get_dao_info(string)string` ABI method.
     *
     * Get DAO information
     *
     * @param params The params for the smart contract call
     * @returns The call result: DAO information as string
     */
    getDaoInfo: async (params: CallParams<CitadelDaoArgs['obj']['get_dao_info(string)string'] | CitadelDaoArgs['tuple']['get_dao_info(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitadelDaoParamsFactory.getDaoInfo(params))
      return {...result, return: result.return as unknown as (undefined | CitadelDaoReturns['get_dao_info(string)string'])}
    },

    /**
     * Makes a call to the CitadelDAO smart contract using the `get_proposal_status(string)string` ABI method.
     *
     * Get proposal voting status
     *
     * @param params The params for the smart contract call
     * @returns The call result: Proposal status
     */
    getProposalStatus: async (params: CallParams<CitadelDaoArgs['obj']['get_proposal_status(string)string'] | CitadelDaoArgs['tuple']['get_proposal_status(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitadelDaoParamsFactory.getProposalStatus(params))
      return {...result, return: result.return as unknown as (undefined | CitadelDaoReturns['get_proposal_status(string)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CitadelDaoClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current CitadelDAO app
   */
  state = {
  }

  public newGroup(): CitadelDaoComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create_dao(string,uint64,uint64,uint64,uint64)string method call against the CitadelDAO contract
       */
      createDao(params: CallParams<CitadelDaoArgs['obj']['create_dao(string,uint64,uint64,uint64,uint64)string'] | CitadelDaoArgs['tuple']['create_dao(string,uint64,uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createDao(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_dao(string,uint64,uint64,uint64,uint64)string', v))
        return this
      },
      /**
       * Add a join_dao(string,uint64)string method call against the CitadelDAO contract
       */
      joinDao(params: CallParams<CitadelDaoArgs['obj']['join_dao(string,uint64)string'] | CitadelDaoArgs['tuple']['join_dao(string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.joinDao(params)))
        resultMappers.push((v) => client.decodeReturnValue('join_dao(string,uint64)string', v))
        return this
      },
      /**
       * Add a create_proposal(string,string,string,uint64)string method call against the CitadelDAO contract
       */
      createProposal(params: CallParams<CitadelDaoArgs['obj']['create_proposal(string,string,string,uint64)string'] | CitadelDaoArgs['tuple']['create_proposal(string,string,string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createProposal(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_proposal(string,string,string,uint64)string', v))
        return this
      },
      /**
       * Add a vote(string,bool,uint64)string method call against the CitadelDAO contract
       */
      vote(params: CallParams<CitadelDaoArgs['obj']['vote(string,bool,uint64)string'] | CitadelDaoArgs['tuple']['vote(string,bool,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.vote(params)))
        resultMappers.push((v) => client.decodeReturnValue('vote(string,bool,uint64)string', v))
        return this
      },
      /**
       * Add a execute_proposal(string,string)uint64 method call against the CitadelDAO contract
       */
      executeProposal(params: CallParams<CitadelDaoArgs['obj']['execute_proposal(string,string)uint64'] | CitadelDaoArgs['tuple']['execute_proposal(string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.executeProposal(params)))
        resultMappers.push((v) => client.decodeReturnValue('execute_proposal(string,string)uint64', v))
        return this
      },
      /**
       * Add a distribute_revenue(string,uint64,uint64)string method call against the CitadelDAO contract
       */
      distributeRevenue(params: CallParams<CitadelDaoArgs['obj']['distribute_revenue(string,uint64,uint64)string'] | CitadelDaoArgs['tuple']['distribute_revenue(string,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.distributeRevenue(params)))
        resultMappers.push((v) => client.decodeReturnValue('distribute_revenue(string,uint64,uint64)string', v))
        return this
      },
      /**
       * Add a get_dao_info(string)string method call against the CitadelDAO contract
       */
      getDaoInfo(params: CallParams<CitadelDaoArgs['obj']['get_dao_info(string)string'] | CitadelDaoArgs['tuple']['get_dao_info(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getDaoInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_dao_info(string)string', v))
        return this
      },
      /**
       * Add a get_proposal_status(string)string method call against the CitadelDAO contract
       */
      getProposalStatus(params: CallParams<CitadelDaoArgs['obj']['get_proposal_status(string)string'] | CitadelDaoArgs['tuple']['get_proposal_status(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getProposalStatus(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_proposal_status(string)string', v))
        return this
      },
      /**
       * Add a clear state call to the CitadelDAO contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CitadelDaoComposer
  }
}
export type CitadelDaoComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_dao(string,uint64,uint64,uint64,uint64)string ABI method.
   *
   * Initialize a new DAO
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createDao(params?: CallParams<CitadelDaoArgs['obj']['create_dao(string,uint64,uint64,uint64,uint64)string'] | CitadelDaoArgs['tuple']['create_dao(string,uint64,uint64,uint64,uint64)string']>): CitadelDaoComposer<[...TReturns, CitadelDaoReturns['create_dao(string,uint64,uint64,uint64,uint64)string'] | undefined]>

  /**
   * Calls the join_dao(string,uint64)string ABI method.
   *
   * Join an existing DAO with required stake
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  joinDao(params?: CallParams<CitadelDaoArgs['obj']['join_dao(string,uint64)string'] | CitadelDaoArgs['tuple']['join_dao(string,uint64)string']>): CitadelDaoComposer<[...TReturns, CitadelDaoReturns['join_dao(string,uint64)string'] | undefined]>

  /**
   * Calls the create_proposal(string,string,string,uint64)string ABI method.
   *
   * Create a new proposal for voting
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createProposal(params?: CallParams<CitadelDaoArgs['obj']['create_proposal(string,string,string,uint64)string'] | CitadelDaoArgs['tuple']['create_proposal(string,string,string,uint64)string']>): CitadelDaoComposer<[...TReturns, CitadelDaoReturns['create_proposal(string,string,string,uint64)string'] | undefined]>

  /**
   * Calls the vote(string,bool,uint64)string ABI method.
   *
   * Cast a vote on a proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  vote(params?: CallParams<CitadelDaoArgs['obj']['vote(string,bool,uint64)string'] | CitadelDaoArgs['tuple']['vote(string,bool,uint64)string']>): CitadelDaoComposer<[...TReturns, CitadelDaoReturns['vote(string,bool,uint64)string'] | undefined]>

  /**
   * Calls the execute_proposal(string,string)uint64 ABI method.
   *
   * Execute a passed proposal and mint NFT for AI moderator
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  executeProposal(params?: CallParams<CitadelDaoArgs['obj']['execute_proposal(string,string)uint64'] | CitadelDaoArgs['tuple']['execute_proposal(string,string)uint64']>): CitadelDaoComposer<[...TReturns, CitadelDaoReturns['execute_proposal(string,string)uint64'] | undefined]>

  /**
   * Calls the distribute_revenue(string,uint64,uint64)string ABI method.
   *
   * Distribute revenue among DAO members
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  distributeRevenue(params?: CallParams<CitadelDaoArgs['obj']['distribute_revenue(string,uint64,uint64)string'] | CitadelDaoArgs['tuple']['distribute_revenue(string,uint64,uint64)string']>): CitadelDaoComposer<[...TReturns, CitadelDaoReturns['distribute_revenue(string,uint64,uint64)string'] | undefined]>

  /**
   * Calls the get_dao_info(string)string ABI method.
   *
   * Get DAO information
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDaoInfo(params?: CallParams<CitadelDaoArgs['obj']['get_dao_info(string)string'] | CitadelDaoArgs['tuple']['get_dao_info(string)string']>): CitadelDaoComposer<[...TReturns, CitadelDaoReturns['get_dao_info(string)string'] | undefined]>

  /**
   * Calls the get_proposal_status(string)string ABI method.
   *
   * Get proposal voting status
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProposalStatus(params?: CallParams<CitadelDaoArgs['obj']['get_proposal_status(string)string'] | CitadelDaoArgs['tuple']['get_proposal_status(string)string']>): CitadelDaoComposer<[...TReturns, CitadelDaoReturns['get_proposal_status(string)string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the CitadelDAO smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CitadelDaoComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CitadelDaoComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CitadelDaoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CitadelDaoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CitadelDaoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CitadelDaoComposerResults<TReturns>>
}
export type CitadelDaoComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

