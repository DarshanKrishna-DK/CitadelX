/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ModeratorNFT","structs":{},"methods":[{"name":"mint_moderator_nft","args":[{"type":"string","name":"moderator_name","desc":"Name of the AI moderator"},{"type":"string","name":"moderator_description","desc":"Description of the moderator"},{"type":"string","name":"dao_id","desc":"ID of the DAO that created it"},{"type":"string","name":"metadata_url","desc":"URL to IPFS metadata (JSON with full details)"},{"type":"uint64","name":"total_supply","desc":"Total supply (typically 1 for NFT)"}],"returns":{"type":"uint64","desc":"Asset ID of the minted NFT"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Mint a new AI Moderator NFT as an Algorand Standard Asset (ASA)","events":[],"recommendations":{}},{"name":"transfer_nft","args":[{"type":"uint64","name":"asset_id","desc":"The asset ID of the NFT"},{"type":"address","name":"from_address","desc":"Current owner"},{"type":"address","name":"to_address","desc":"New owner"},{"type":"uint64","name":"amount","desc":"Amount to transfer (typically 1 for NFT)"}],"returns":{"type":"string","desc":"Success message"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfer NFT ownership (for outright purchases)","events":[],"recommendations":{}},{"name":"update_metadata","args":[{"type":"uint64","name":"asset_id","desc":"The asset ID of the NFT"},{"type":"string","name":"new_metadata_url","desc":"New metadata URL pointing to updated IPFS file"}],"returns":{"type":"string","desc":"Success message"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update NFT metadata URL (for usage statistics updates)","events":[],"recommendations":{}},{"name":"burn_nft","args":[{"type":"uint64","name":"asset_id","desc":"The asset ID of the NFT to burn"}],"returns":{"type":"string","desc":"Success message"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Burn/destroy an NFT (if moderator is decommissioned)","events":[],"recommendations":{}},{"name":"get_nft_info","args":[{"type":"uint64","name":"asset_id","desc":"The asset ID of the NFT"}],"returns":{"type":"string","desc":"NFT information as string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get NFT information","events":[],"recommendations":{}},{"name":"opt_in_asset","args":[{"type":"uint64","name":"asset_id","desc":"The asset ID to opt into"}],"returns":{"type":"string","desc":"Success message"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Opt-in to receive an NFT (Algorand requires opt-in before receiving assets)","events":[],"recommendations":{}},{"name":"set_pricing","args":[{"type":"uint64","name":"asset_id","desc":"The asset ID of the moderator NFT"},{"type":"uint64","name":"monthly_price","desc":"Monthly subscription price in microAlgos"},{"type":"uint64","name":"pay_per_use_price","desc":"Pay-per-use price in microAlgos"},{"type":"uint64","name":"outright_price","desc":"One-time purchase price in microAlgos"}],"returns":{"type":"string","desc":"Success message"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Set pricing models for the moderator NFT","events":[],"recommendations":{}},{"name":"record_usage","args":[{"type":"uint64","name":"asset_id","desc":"The asset ID of the moderator NFT"},{"type":"uint64","name":"usage_count","desc":"Number of times used"}],"returns":{"type":"string","desc":"Success message with updated count"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Record usage statistics for pay-per-use model","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"\n    ModeratorNFT Smart Contract\n    \n    Manages NFT creation (ASA) for AI moderators with metadata\n    Each NFT represents a unique AI moderator with training context\n    ","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[78,123,175,223,272,313,373,419],"errorMessage":"OnCompletion is not NoOp"},{"pc":[482],"errorMessage":"Total supply must be greater than 0"},{"pc":[474],"errorMessage":"can only call when creating"},{"pc":[81,126,178,226,275,316,376,422],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvbW9kZXJhdG9yX25mdC9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBNb2RlcmF0b3JORlQoQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMwogICAgcHVzaGJ5dGVzcyAweDgxMzVmMDgzIDB4YTE3YzFjZjMgMHg0YzhmMjhhZSAweGU1Y2M3ZjdhIDB4MzFkNDE2MTcgMHg4NTg5ZjhkZSAweDJjMDVkODhhIDB4NTI1NTBlM2IgLy8gbWV0aG9kICJtaW50X21vZGVyYXRvcl9uZnQoc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nLHVpbnQ2NCl1aW50NjQiLCBtZXRob2QgInRyYW5zZmVyX25mdCh1aW50NjQsYWRkcmVzcyxhZGRyZXNzLHVpbnQ2NClzdHJpbmciLCBtZXRob2QgInVwZGF0ZV9tZXRhZGF0YSh1aW50NjQsc3RyaW5nKXN0cmluZyIsIG1ldGhvZCAiYnVybl9uZnQodWludDY0KXN0cmluZyIsIG1ldGhvZCAiZ2V0X25mdF9pbmZvKHVpbnQ2NClzdHJpbmciLCBtZXRob2QgIm9wdF9pbl9hc3NldCh1aW50NjQpc3RyaW5nIiwgbWV0aG9kICJzZXRfcHJpY2luZyh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpc3RyaW5nIiwgbWV0aG9kICJyZWNvcmRfdXNhZ2UodWludDY0LHVpbnQ2NClzdHJpbmciCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX21pbnRfbW9kZXJhdG9yX25mdF9yb3V0ZUAzIG1haW5fdHJhbnNmZXJfbmZ0X3JvdXRlQDQgbWFpbl91cGRhdGVfbWV0YWRhdGFfcm91dGVANSBtYWluX2J1cm5fbmZ0X3JvdXRlQDYgbWFpbl9nZXRfbmZ0X2luZm9fcm91dGVANyBtYWluX29wdF9pbl9hc3NldF9yb3V0ZUA4IG1haW5fc2V0X3ByaWNpbmdfcm91dGVAOSBtYWluX3JlY29yZF91c2FnZV9yb3V0ZUAxMAoKbWFpbl9hZnRlcl9pZl9lbHNlQDE3OgogICAgLy8gc21hcnRfY29udHJhY3RzL21vZGVyYXRvcl9uZnQvY29udHJhY3QucHk6NQogICAgLy8gY2xhc3MgTW9kZXJhdG9yTkZUKEFSQzRDb250cmFjdCk6CiAgICBwdXNoaW50IDAgLy8gMAogICAgcmV0dXJuCgptYWluX3JlY29yZF91c2FnZV9yb3V0ZUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9tb2RlcmF0b3JfbmZ0L2NvbnRyYWN0LnB5OjE5MAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1MDAxYjU1NzM2MTY3NjUyMDcyNjU2MzZmNzI2NDY1NjQyMDczNzU2MzYzNjU3MzczNjY3NTZjNmM3OQogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3NldF9wcmljaW5nX3JvdXRlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbW9kZXJhdG9yX25mdC9jb250cmFjdC5weToxNjIKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwMjI1MDcyNjk2MzY5NmU2NzIwNzM2NTc0MjA2NjZmNzIyMDYxNzM3MzY1NzQyMDczNzU2MzYzNjU3MzczNjY3NTZjNmM3OQogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX29wdF9pbl9hc3NldF9yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL21vZGVyYXRvcl9uZnQvY29udHJhY3QucHk6MTQyCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgcHVzaGJ5dGVzIDB4MTUxZjdjNzUwMDFlNGY3MDc0NjU2NDIwNjk2ZTIwNzQ2ZjIwNjE3MzczNjU3NDIwNzM3NTYzNjM2NTczNzM2Njc1NmM2Yzc5CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0X25mdF9pbmZvX3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbW9kZXJhdG9yX25mdC9jb250cmFjdC5weToxMjMKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwMWY0ZTQ2NTQyMDQ5NmU2NjZmMjA3MjY1NzQ3MjY5NjU3NjY1NjQyMDczNzU2MzYzNjU3MzczNjY3NTZjNmM3OQogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2J1cm5fbmZ0X3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbW9kZXJhdG9yX25mdC9jb250cmFjdC5weToxMDIKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwMTc0ZTQ2NTQyMDYyNzU3MjZlNjU2NDIwNzM3NTYzNjM2NTczNzM2Njc1NmM2Yzc5CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fdXBkYXRlX21ldGFkYXRhX3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbW9kZXJhdG9yX25mdC9jb250cmFjdC5weTo3OQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1MDAyYTRkNjU3NDYxNjQ2MTc0NjEyMDc1NzA2NDYxNzQ2NTY0MjA2NjZmNzIyMDYxNzM3MzY1NzQyMDQ5NDQyMDczNzU2MzYzNjU3MzczNjY3NTZjNmM3OQogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3RyYW5zZmVyX25mdF9yb3V0ZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL21vZGVyYXRvcl9uZnQvY29udHJhY3QucHk6NTIKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwMWM0ZTQ2NTQyMDc0NzI2MTZlNzM2NjY1NzI3MjY1NjQyMDczNzU2MzYzNjU3MzczNjY3NTZjNmM3OQogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX21pbnRfbW9kZXJhdG9yX25mdF9yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL21vZGVyYXRvcl9uZnQvY29udHJhY3QucHk6MTMKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvbW9kZXJhdG9yX25mdC9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBNb2RlcmF0b3JORlQoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA1CiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvbW9kZXJhdG9yX25mdC9jb250cmFjdC5weToxMwogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIG1pbnRfbW9kZXJhdG9yX25mdAogICAgaXRvYgogICAgcHVzaGJ5dGVzIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9tb2RlcmF0b3JfbmZ0L2NvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIE1vZGVyYXRvck5GVChBUkM0Q29udHJhY3QpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAxNwogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMubW9kZXJhdG9yX25mdC5jb250cmFjdC5Nb2RlcmF0b3JORlQubWludF9tb2RlcmF0b3JfbmZ0KG1vZGVyYXRvcl9uYW1lOiBieXRlcywgbW9kZXJhdG9yX2Rlc2NyaXB0aW9uOiBieXRlcywgZGFvX2lkOiBieXRlcywgbWV0YWRhdGFfdXJsOiBieXRlcywgdG90YWxfc3VwcGx5OiB1aW50NjQpIC0+IHVpbnQ2NDoKbWludF9tb2RlcmF0b3JfbmZ0OgogICAgLy8gc21hcnRfY29udHJhY3RzL21vZGVyYXRvcl9uZnQvY29udHJhY3QucHk6MTMtMjEKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIG1pbnRfbW9kZXJhdG9yX25mdCgKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIG1vZGVyYXRvcl9uYW1lOiBTdHJpbmcsCiAgICAvLyAgICAgbW9kZXJhdG9yX2Rlc2NyaXB0aW9uOiBTdHJpbmcsCiAgICAvLyAgICAgZGFvX2lkOiBTdHJpbmcsCiAgICAvLyAgICAgbWV0YWRhdGFfdXJsOiBTdHJpbmcsCiAgICAvLyAgICAgdG90YWxfc3VwcGx5OiBVSW50NjQsCiAgICAvLyApIC0+IFVJbnQ2NDoKICAgIHByb3RvIDUgMQogICAgLy8gc21hcnRfY29udHJhY3RzL21vZGVyYXRvcl9uZnQvY29udHJhY3QucHk6MzUtMzYKICAgIC8vICMgVmFsaWRhdGUgaW5wdXRzCiAgICAvLyBhc3NlcnQgdG90YWxfc3VwcGx5ID4gMCwgIlRvdGFsIHN1cHBseSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwIgogICAgZnJhbWVfZGlnIC0xCiAgICBhc3NlcnQgLy8gVG90YWwgc3VwcGx5IG11c3QgYmUgZ3JlYXRlciB0aGFuIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9tb2RlcmF0b3JfbmZ0L2NvbnRyYWN0LnB5OjQ3LTQ4CiAgICAvLyAjIEZvciBub3csIHJldHVybiBhIG1vY2sgYXNzZXQgSUQKICAgIC8vIGFzc2V0X2lkID0gVUludDY0KDEwMDAwMCkgKyBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgcHVzaGludCAxMDAwMDAgLy8gMTAwMDAwCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvbW9kZXJhdG9yX25mdC9jb250cmFjdC5weTo1MAogICAgLy8gcmV0dXJuIGFzc2V0X2lkCiAgICByZXRzdWIK","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiABATEbQQHJgggEgTXwgwShfBzzBEyPKK4E5cx/egQx1BYXBIWJ+N4ELAXYigRSVQ47NhoAjggBWAEqAO4AxQCUAGQAMAADgQBDMRkURDEYRIAhFR98dQAbVXNhZ2UgcmVjb3JkZWQgc3VjY2Vzc2Z1bGx5sCJDMRkURDEYRIAoFR98dQAiUHJpY2luZyBzZXQgZm9yIGFzc2V0IHN1Y2Nlc3NmdWxsebAiQzEZFEQxGESAJBUffHUAHk9wdGVkIGluIHRvIGFzc2V0IHN1Y2Nlc3NmdWxsebAiQzEZFEQxGESAJRUffHUAH05GVCBJbmZvIHJldHJpZXZlZCBzdWNjZXNzZnVsbHmwIkMxGRREMRhEgB0VH3x1ABdORlQgYnVybmVkIHN1Y2Nlc3NmdWxsebAiQzEZFEQxGESAMBUffHUAKk1ldGFkYXRhIHVwZGF0ZWQgZm9yIGFzc2V0IElEIHN1Y2Nlc3NmdWxsebAiQzEZFEQxGESAIhUffHUAHE5GVCB0cmFuc2ZlcnJlZCBzdWNjZXNzZnVsbHmwIkMxGRREMRhENhoBVwIANhoCVwIANhoDVwIANhoEVwIANhoFF4gAFxaABBUffHVMULAiQzEZQP5xMRgURCJDigUBi/9EgaCNBjIHCIk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the ModeratorNft contract
 */
export type ModeratorNftArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'mint_moderator_nft(string,string,string,string,uint64)uint64': {
      /**
       * Name of the AI moderator
       */
      moderatorName: string
      /**
       * Description of the moderator
       */
      moderatorDescription: string
      /**
       * ID of the DAO that created it
       */
      daoId: string
      /**
       * URL to IPFS metadata (JSON with full details)
       */
      metadataUrl: string
      /**
       * Total supply (typically 1 for NFT)
       */
      totalSupply: bigint | number
    }
    'transfer_nft(uint64,address,address,uint64)string': {
      /**
       * The asset ID of the NFT
       */
      assetId: bigint | number
      /**
       * Current owner
       */
      fromAddress: string
      /**
       * New owner
       */
      toAddress: string
      /**
       * Amount to transfer (typically 1 for NFT)
       */
      amount: bigint | number
    }
    'update_metadata(uint64,string)string': {
      /**
       * The asset ID of the NFT
       */
      assetId: bigint | number
      /**
       * New metadata URL pointing to updated IPFS file
       */
      newMetadataUrl: string
    }
    'burn_nft(uint64)string': {
      /**
       * The asset ID of the NFT to burn
       */
      assetId: bigint | number
    }
    'get_nft_info(uint64)string': {
      /**
       * The asset ID of the NFT
       */
      assetId: bigint | number
    }
    'opt_in_asset(uint64)string': {
      /**
       * The asset ID to opt into
       */
      assetId: bigint | number
    }
    'set_pricing(uint64,uint64,uint64,uint64)string': {
      /**
       * The asset ID of the moderator NFT
       */
      assetId: bigint | number
      /**
       * Monthly subscription price in microAlgos
       */
      monthlyPrice: bigint | number
      /**
       * Pay-per-use price in microAlgos
       */
      payPerUsePrice: bigint | number
      /**
       * One-time purchase price in microAlgos
       */
      outrightPrice: bigint | number
    }
    'record_usage(uint64,uint64)string': {
      /**
       * The asset ID of the moderator NFT
       */
      assetId: bigint | number
      /**
       * Number of times used
       */
      usageCount: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'mint_moderator_nft(string,string,string,string,uint64)uint64': [moderatorName: string, moderatorDescription: string, daoId: string, metadataUrl: string, totalSupply: bigint | number]
    'transfer_nft(uint64,address,address,uint64)string': [assetId: bigint | number, fromAddress: string, toAddress: string, amount: bigint | number]
    'update_metadata(uint64,string)string': [assetId: bigint | number, newMetadataUrl: string]
    'burn_nft(uint64)string': [assetId: bigint | number]
    'get_nft_info(uint64)string': [assetId: bigint | number]
    'opt_in_asset(uint64)string': [assetId: bigint | number]
    'set_pricing(uint64,uint64,uint64,uint64)string': [assetId: bigint | number, monthlyPrice: bigint | number, payPerUsePrice: bigint | number, outrightPrice: bigint | number]
    'record_usage(uint64,uint64)string': [assetId: bigint | number, usageCount: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type ModeratorNftReturns = {
  'mint_moderator_nft(string,string,string,string,uint64)uint64': bigint
  'transfer_nft(uint64,address,address,uint64)string': string
  'update_metadata(uint64,string)string': string
  'burn_nft(uint64)string': string
  'get_nft_info(uint64)string': string
  'opt_in_asset(uint64)string': string
  'set_pricing(uint64,uint64,uint64,uint64)string': string
  'record_usage(uint64,uint64)string': string
}

/**
 * Defines the types of available calls and state of the ModeratorNft smart contract.
 */
export type ModeratorNftTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'mint_moderator_nft(string,string,string,string,uint64)uint64' | 'mint_moderator_nft', {
      argsObj: ModeratorNftArgs['obj']['mint_moderator_nft(string,string,string,string,uint64)uint64']
      argsTuple: ModeratorNftArgs['tuple']['mint_moderator_nft(string,string,string,string,uint64)uint64']
      /**
       * Asset ID of the minted NFT
       */
      returns: ModeratorNftReturns['mint_moderator_nft(string,string,string,string,uint64)uint64']
    }>
    & Record<'transfer_nft(uint64,address,address,uint64)string' | 'transfer_nft', {
      argsObj: ModeratorNftArgs['obj']['transfer_nft(uint64,address,address,uint64)string']
      argsTuple: ModeratorNftArgs['tuple']['transfer_nft(uint64,address,address,uint64)string']
      /**
       * Success message
       */
      returns: ModeratorNftReturns['transfer_nft(uint64,address,address,uint64)string']
    }>
    & Record<'update_metadata(uint64,string)string' | 'update_metadata', {
      argsObj: ModeratorNftArgs['obj']['update_metadata(uint64,string)string']
      argsTuple: ModeratorNftArgs['tuple']['update_metadata(uint64,string)string']
      /**
       * Success message
       */
      returns: ModeratorNftReturns['update_metadata(uint64,string)string']
    }>
    & Record<'burn_nft(uint64)string' | 'burn_nft', {
      argsObj: ModeratorNftArgs['obj']['burn_nft(uint64)string']
      argsTuple: ModeratorNftArgs['tuple']['burn_nft(uint64)string']
      /**
       * Success message
       */
      returns: ModeratorNftReturns['burn_nft(uint64)string']
    }>
    & Record<'get_nft_info(uint64)string' | 'get_nft_info', {
      argsObj: ModeratorNftArgs['obj']['get_nft_info(uint64)string']
      argsTuple: ModeratorNftArgs['tuple']['get_nft_info(uint64)string']
      /**
       * NFT information as string
       */
      returns: ModeratorNftReturns['get_nft_info(uint64)string']
    }>
    & Record<'opt_in_asset(uint64)string' | 'opt_in_asset', {
      argsObj: ModeratorNftArgs['obj']['opt_in_asset(uint64)string']
      argsTuple: ModeratorNftArgs['tuple']['opt_in_asset(uint64)string']
      /**
       * Success message
       */
      returns: ModeratorNftReturns['opt_in_asset(uint64)string']
    }>
    & Record<'set_pricing(uint64,uint64,uint64,uint64)string' | 'set_pricing', {
      argsObj: ModeratorNftArgs['obj']['set_pricing(uint64,uint64,uint64,uint64)string']
      argsTuple: ModeratorNftArgs['tuple']['set_pricing(uint64,uint64,uint64,uint64)string']
      /**
       * Success message
       */
      returns: ModeratorNftReturns['set_pricing(uint64,uint64,uint64,uint64)string']
    }>
    & Record<'record_usage(uint64,uint64)string' | 'record_usage', {
      argsObj: ModeratorNftArgs['obj']['record_usage(uint64,uint64)string']
      argsTuple: ModeratorNftArgs['tuple']['record_usage(uint64,uint64)string']
      /**
       * Success message with updated count
       */
      returns: ModeratorNftReturns['record_usage(uint64,uint64)string']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type ModeratorNftSignatures = keyof ModeratorNftTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ModeratorNftNonVoidMethodSignatures = keyof ModeratorNftTypes['methods'] extends infer T ? T extends keyof ModeratorNftTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ModeratorNft smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ModeratorNftSignatures> = ModeratorNftTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ModeratorNft smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ModeratorNftSignatures> = ModeratorNftTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type ModeratorNftCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ModeratorNftDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ModeratorNftCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ModeratorNft smart contract
 */
export abstract class ModeratorNftParamsFactory {
  /**
   * Constructs a no op call for the mint_moderator_nft(string,string,string,string,uint64)uint64 ABI method
   *
   * Mint a new AI Moderator NFT as an Algorand Standard Asset (ASA)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mintModeratorNft(params: CallParams<ModeratorNftArgs['obj']['mint_moderator_nft(string,string,string,string,uint64)uint64'] | ModeratorNftArgs['tuple']['mint_moderator_nft(string,string,string,string,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mint_moderator_nft(string,string,string,string,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.moderatorName, params.args.moderatorDescription, params.args.daoId, params.args.metadataUrl, params.args.totalSupply],
    }
  }
  /**
   * Constructs a no op call for the transfer_nft(uint64,address,address,uint64)string ABI method
   *
   * Transfer NFT ownership (for outright purchases)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static transferNft(params: CallParams<ModeratorNftArgs['obj']['transfer_nft(uint64,address,address,uint64)string'] | ModeratorNftArgs['tuple']['transfer_nft(uint64,address,address,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'transfer_nft(uint64,address,address,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.fromAddress, params.args.toAddress, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the update_metadata(uint64,string)string ABI method
   *
   * Update NFT metadata URL (for usage statistics updates)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateMetadata(params: CallParams<ModeratorNftArgs['obj']['update_metadata(uint64,string)string'] | ModeratorNftArgs['tuple']['update_metadata(uint64,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_metadata(uint64,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.newMetadataUrl],
    }
  }
  /**
   * Constructs a no op call for the burn_nft(uint64)string ABI method
   *
   * Burn/destroy an NFT (if moderator is decommissioned)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnNft(params: CallParams<ModeratorNftArgs['obj']['burn_nft(uint64)string'] | ModeratorNftArgs['tuple']['burn_nft(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burn_nft(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId],
    }
  }
  /**
   * Constructs a no op call for the get_nft_info(uint64)string ABI method
   *
   * Get NFT information
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getNftInfo(params: CallParams<ModeratorNftArgs['obj']['get_nft_info(uint64)string'] | ModeratorNftArgs['tuple']['get_nft_info(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_nft_info(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId],
    }
  }
  /**
   * Constructs a no op call for the opt_in_asset(uint64)string ABI method
   *
   * Opt-in to receive an NFT (Algorand requires opt-in before receiving assets)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInAsset(params: CallParams<ModeratorNftArgs['obj']['opt_in_asset(uint64)string'] | ModeratorNftArgs['tuple']['opt_in_asset(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opt_in_asset(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId],
    }
  }
  /**
   * Constructs a no op call for the set_pricing(uint64,uint64,uint64,uint64)string ABI method
   *
   * Set pricing models for the moderator NFT
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setPricing(params: CallParams<ModeratorNftArgs['obj']['set_pricing(uint64,uint64,uint64,uint64)string'] | ModeratorNftArgs['tuple']['set_pricing(uint64,uint64,uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_pricing(uint64,uint64,uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.monthlyPrice, params.args.payPerUsePrice, params.args.outrightPrice],
    }
  }
  /**
   * Constructs a no op call for the record_usage(uint64,uint64)string ABI method
   *
   * Record usage statistics for pay-per-use model
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static recordUsage(params: CallParams<ModeratorNftArgs['obj']['record_usage(uint64,uint64)string'] | ModeratorNftArgs['tuple']['record_usage(uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'record_usage(uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.usageCount],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ModeratorNFT smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ModeratorNftFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ModeratorNftFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ModeratorNftClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ModeratorNftClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ModeratorNFT smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ModeratorNftDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new ModeratorNftClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ModeratorNFT smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ModeratorNFT smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ModeratorNFT smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new ModeratorNftClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ModeratorNFT smart contract
 */
export class ModeratorNftClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ModeratorNftClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ModeratorNft app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ModeratorNftClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ModeratorNftNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ModeratorNftClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ModeratorNftClient> {
    return new ModeratorNftClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ModeratorNftClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ModeratorNftClient> {
    return new ModeratorNftClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ModeratorNFT smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `mint_moderator_nft(string,string,string,string,uint64)uint64` ABI method.
     *
     * Mint a new AI Moderator NFT as an Algorand Standard Asset (ASA)
     *
     * @param params The params for the smart contract call
     * @returns The call params: Asset ID of the minted NFT
     */
    mintModeratorNft: (params: CallParams<ModeratorNftArgs['obj']['mint_moderator_nft(string,string,string,string,uint64)uint64'] | ModeratorNftArgs['tuple']['mint_moderator_nft(string,string,string,string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ModeratorNftParamsFactory.mintModeratorNft(params))
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `transfer_nft(uint64,address,address,uint64)string` ABI method.
     *
     * Transfer NFT ownership (for outright purchases)
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success message
     */
    transferNft: (params: CallParams<ModeratorNftArgs['obj']['transfer_nft(uint64,address,address,uint64)string'] | ModeratorNftArgs['tuple']['transfer_nft(uint64,address,address,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ModeratorNftParamsFactory.transferNft(params))
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `update_metadata(uint64,string)string` ABI method.
     *
     * Update NFT metadata URL (for usage statistics updates)
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success message
     */
    updateMetadata: (params: CallParams<ModeratorNftArgs['obj']['update_metadata(uint64,string)string'] | ModeratorNftArgs['tuple']['update_metadata(uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ModeratorNftParamsFactory.updateMetadata(params))
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `burn_nft(uint64)string` ABI method.
     *
     * Burn/destroy an NFT (if moderator is decommissioned)
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success message
     */
    burnNft: (params: CallParams<ModeratorNftArgs['obj']['burn_nft(uint64)string'] | ModeratorNftArgs['tuple']['burn_nft(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ModeratorNftParamsFactory.burnNft(params))
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `get_nft_info(uint64)string` ABI method.
     *
     * Get NFT information
     *
     * @param params The params for the smart contract call
     * @returns The call params: NFT information as string
     */
    getNftInfo: (params: CallParams<ModeratorNftArgs['obj']['get_nft_info(uint64)string'] | ModeratorNftArgs['tuple']['get_nft_info(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ModeratorNftParamsFactory.getNftInfo(params))
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `opt_in_asset(uint64)string` ABI method.
     *
     * Opt-in to receive an NFT (Algorand requires opt-in before receiving assets)
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success message
     */
    optInAsset: (params: CallParams<ModeratorNftArgs['obj']['opt_in_asset(uint64)string'] | ModeratorNftArgs['tuple']['opt_in_asset(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ModeratorNftParamsFactory.optInAsset(params))
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `set_pricing(uint64,uint64,uint64,uint64)string` ABI method.
     *
     * Set pricing models for the moderator NFT
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success message
     */
    setPricing: (params: CallParams<ModeratorNftArgs['obj']['set_pricing(uint64,uint64,uint64,uint64)string'] | ModeratorNftArgs['tuple']['set_pricing(uint64,uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ModeratorNftParamsFactory.setPricing(params))
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `record_usage(uint64,uint64)string` ABI method.
     *
     * Record usage statistics for pay-per-use model
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success message with updated count
     */
    recordUsage: (params: CallParams<ModeratorNftArgs['obj']['record_usage(uint64,uint64)string'] | ModeratorNftArgs['tuple']['record_usage(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ModeratorNftParamsFactory.recordUsage(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ModeratorNFT smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `mint_moderator_nft(string,string,string,string,uint64)uint64` ABI method.
     *
     * Mint a new AI Moderator NFT as an Algorand Standard Asset (ASA)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Asset ID of the minted NFT
     */
    mintModeratorNft: (params: CallParams<ModeratorNftArgs['obj']['mint_moderator_nft(string,string,string,string,uint64)uint64'] | ModeratorNftArgs['tuple']['mint_moderator_nft(string,string,string,string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ModeratorNftParamsFactory.mintModeratorNft(params))
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `transfer_nft(uint64,address,address,uint64)string` ABI method.
     *
     * Transfer NFT ownership (for outright purchases)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success message
     */
    transferNft: (params: CallParams<ModeratorNftArgs['obj']['transfer_nft(uint64,address,address,uint64)string'] | ModeratorNftArgs['tuple']['transfer_nft(uint64,address,address,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ModeratorNftParamsFactory.transferNft(params))
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `update_metadata(uint64,string)string` ABI method.
     *
     * Update NFT metadata URL (for usage statistics updates)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success message
     */
    updateMetadata: (params: CallParams<ModeratorNftArgs['obj']['update_metadata(uint64,string)string'] | ModeratorNftArgs['tuple']['update_metadata(uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ModeratorNftParamsFactory.updateMetadata(params))
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `burn_nft(uint64)string` ABI method.
     *
     * Burn/destroy an NFT (if moderator is decommissioned)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success message
     */
    burnNft: (params: CallParams<ModeratorNftArgs['obj']['burn_nft(uint64)string'] | ModeratorNftArgs['tuple']['burn_nft(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ModeratorNftParamsFactory.burnNft(params))
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `get_nft_info(uint64)string` ABI method.
     *
     * Get NFT information
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: NFT information as string
     */
    getNftInfo: (params: CallParams<ModeratorNftArgs['obj']['get_nft_info(uint64)string'] | ModeratorNftArgs['tuple']['get_nft_info(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ModeratorNftParamsFactory.getNftInfo(params))
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `opt_in_asset(uint64)string` ABI method.
     *
     * Opt-in to receive an NFT (Algorand requires opt-in before receiving assets)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success message
     */
    optInAsset: (params: CallParams<ModeratorNftArgs['obj']['opt_in_asset(uint64)string'] | ModeratorNftArgs['tuple']['opt_in_asset(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ModeratorNftParamsFactory.optInAsset(params))
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `set_pricing(uint64,uint64,uint64,uint64)string` ABI method.
     *
     * Set pricing models for the moderator NFT
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success message
     */
    setPricing: (params: CallParams<ModeratorNftArgs['obj']['set_pricing(uint64,uint64,uint64,uint64)string'] | ModeratorNftArgs['tuple']['set_pricing(uint64,uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ModeratorNftParamsFactory.setPricing(params))
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `record_usage(uint64,uint64)string` ABI method.
     *
     * Record usage statistics for pay-per-use model
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success message with updated count
     */
    recordUsage: (params: CallParams<ModeratorNftArgs['obj']['record_usage(uint64,uint64)string'] | ModeratorNftArgs['tuple']['record_usage(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ModeratorNftParamsFactory.recordUsage(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ModeratorNFT smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `mint_moderator_nft(string,string,string,string,uint64)uint64` ABI method.
     *
     * Mint a new AI Moderator NFT as an Algorand Standard Asset (ASA)
     *
     * @param params The params for the smart contract call
     * @returns The call result: Asset ID of the minted NFT
     */
    mintModeratorNft: async (params: CallParams<ModeratorNftArgs['obj']['mint_moderator_nft(string,string,string,string,uint64)uint64'] | ModeratorNftArgs['tuple']['mint_moderator_nft(string,string,string,string,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ModeratorNftParamsFactory.mintModeratorNft(params))
      return {...result, return: result.return as unknown as (undefined | ModeratorNftReturns['mint_moderator_nft(string,string,string,string,uint64)uint64'])}
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `transfer_nft(uint64,address,address,uint64)string` ABI method.
     *
     * Transfer NFT ownership (for outright purchases)
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success message
     */
    transferNft: async (params: CallParams<ModeratorNftArgs['obj']['transfer_nft(uint64,address,address,uint64)string'] | ModeratorNftArgs['tuple']['transfer_nft(uint64,address,address,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ModeratorNftParamsFactory.transferNft(params))
      return {...result, return: result.return as unknown as (undefined | ModeratorNftReturns['transfer_nft(uint64,address,address,uint64)string'])}
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `update_metadata(uint64,string)string` ABI method.
     *
     * Update NFT metadata URL (for usage statistics updates)
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success message
     */
    updateMetadata: async (params: CallParams<ModeratorNftArgs['obj']['update_metadata(uint64,string)string'] | ModeratorNftArgs['tuple']['update_metadata(uint64,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ModeratorNftParamsFactory.updateMetadata(params))
      return {...result, return: result.return as unknown as (undefined | ModeratorNftReturns['update_metadata(uint64,string)string'])}
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `burn_nft(uint64)string` ABI method.
     *
     * Burn/destroy an NFT (if moderator is decommissioned)
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success message
     */
    burnNft: async (params: CallParams<ModeratorNftArgs['obj']['burn_nft(uint64)string'] | ModeratorNftArgs['tuple']['burn_nft(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ModeratorNftParamsFactory.burnNft(params))
      return {...result, return: result.return as unknown as (undefined | ModeratorNftReturns['burn_nft(uint64)string'])}
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `get_nft_info(uint64)string` ABI method.
     *
     * Get NFT information
     *
     * @param params The params for the smart contract call
     * @returns The call result: NFT information as string
     */
    getNftInfo: async (params: CallParams<ModeratorNftArgs['obj']['get_nft_info(uint64)string'] | ModeratorNftArgs['tuple']['get_nft_info(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ModeratorNftParamsFactory.getNftInfo(params))
      return {...result, return: result.return as unknown as (undefined | ModeratorNftReturns['get_nft_info(uint64)string'])}
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `opt_in_asset(uint64)string` ABI method.
     *
     * Opt-in to receive an NFT (Algorand requires opt-in before receiving assets)
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success message
     */
    optInAsset: async (params: CallParams<ModeratorNftArgs['obj']['opt_in_asset(uint64)string'] | ModeratorNftArgs['tuple']['opt_in_asset(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ModeratorNftParamsFactory.optInAsset(params))
      return {...result, return: result.return as unknown as (undefined | ModeratorNftReturns['opt_in_asset(uint64)string'])}
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `set_pricing(uint64,uint64,uint64,uint64)string` ABI method.
     *
     * Set pricing models for the moderator NFT
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success message
     */
    setPricing: async (params: CallParams<ModeratorNftArgs['obj']['set_pricing(uint64,uint64,uint64,uint64)string'] | ModeratorNftArgs['tuple']['set_pricing(uint64,uint64,uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ModeratorNftParamsFactory.setPricing(params))
      return {...result, return: result.return as unknown as (undefined | ModeratorNftReturns['set_pricing(uint64,uint64,uint64,uint64)string'])}
    },

    /**
     * Makes a call to the ModeratorNFT smart contract using the `record_usage(uint64,uint64)string` ABI method.
     *
     * Record usage statistics for pay-per-use model
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success message with updated count
     */
    recordUsage: async (params: CallParams<ModeratorNftArgs['obj']['record_usage(uint64,uint64)string'] | ModeratorNftArgs['tuple']['record_usage(uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ModeratorNftParamsFactory.recordUsage(params))
      return {...result, return: result.return as unknown as (undefined | ModeratorNftReturns['record_usage(uint64,uint64)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ModeratorNftClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ModeratorNFT app
   */
  state = {
  }

  public newGroup(): ModeratorNftComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a mint_moderator_nft(string,string,string,string,uint64)uint64 method call against the ModeratorNFT contract
       */
      mintModeratorNft(params: CallParams<ModeratorNftArgs['obj']['mint_moderator_nft(string,string,string,string,uint64)uint64'] | ModeratorNftArgs['tuple']['mint_moderator_nft(string,string,string,string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mintModeratorNft(params)))
        resultMappers.push((v) => client.decodeReturnValue('mint_moderator_nft(string,string,string,string,uint64)uint64', v))
        return this
      },
      /**
       * Add a transfer_nft(uint64,address,address,uint64)string method call against the ModeratorNFT contract
       */
      transferNft(params: CallParams<ModeratorNftArgs['obj']['transfer_nft(uint64,address,address,uint64)string'] | ModeratorNftArgs['tuple']['transfer_nft(uint64,address,address,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.transferNft(params)))
        resultMappers.push((v) => client.decodeReturnValue('transfer_nft(uint64,address,address,uint64)string', v))
        return this
      },
      /**
       * Add a update_metadata(uint64,string)string method call against the ModeratorNFT contract
       */
      updateMetadata(params: CallParams<ModeratorNftArgs['obj']['update_metadata(uint64,string)string'] | ModeratorNftArgs['tuple']['update_metadata(uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateMetadata(params)))
        resultMappers.push((v) => client.decodeReturnValue('update_metadata(uint64,string)string', v))
        return this
      },
      /**
       * Add a burn_nft(uint64)string method call against the ModeratorNFT contract
       */
      burnNft(params: CallParams<ModeratorNftArgs['obj']['burn_nft(uint64)string'] | ModeratorNftArgs['tuple']['burn_nft(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnNft(params)))
        resultMappers.push((v) => client.decodeReturnValue('burn_nft(uint64)string', v))
        return this
      },
      /**
       * Add a get_nft_info(uint64)string method call against the ModeratorNFT contract
       */
      getNftInfo(params: CallParams<ModeratorNftArgs['obj']['get_nft_info(uint64)string'] | ModeratorNftArgs['tuple']['get_nft_info(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getNftInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_nft_info(uint64)string', v))
        return this
      },
      /**
       * Add a opt_in_asset(uint64)string method call against the ModeratorNFT contract
       */
      optInAsset(params: CallParams<ModeratorNftArgs['obj']['opt_in_asset(uint64)string'] | ModeratorNftArgs['tuple']['opt_in_asset(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInAsset(params)))
        resultMappers.push((v) => client.decodeReturnValue('opt_in_asset(uint64)string', v))
        return this
      },
      /**
       * Add a set_pricing(uint64,uint64,uint64,uint64)string method call against the ModeratorNFT contract
       */
      setPricing(params: CallParams<ModeratorNftArgs['obj']['set_pricing(uint64,uint64,uint64,uint64)string'] | ModeratorNftArgs['tuple']['set_pricing(uint64,uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setPricing(params)))
        resultMappers.push((v) => client.decodeReturnValue('set_pricing(uint64,uint64,uint64,uint64)string', v))
        return this
      },
      /**
       * Add a record_usage(uint64,uint64)string method call against the ModeratorNFT contract
       */
      recordUsage(params: CallParams<ModeratorNftArgs['obj']['record_usage(uint64,uint64)string'] | ModeratorNftArgs['tuple']['record_usage(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.recordUsage(params)))
        resultMappers.push((v) => client.decodeReturnValue('record_usage(uint64,uint64)string', v))
        return this
      },
      /**
       * Add a clear state call to the ModeratorNFT contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ModeratorNftComposer
  }
}
export type ModeratorNftComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the mint_moderator_nft(string,string,string,string,uint64)uint64 ABI method.
   *
   * Mint a new AI Moderator NFT as an Algorand Standard Asset (ASA)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintModeratorNft(params?: CallParams<ModeratorNftArgs['obj']['mint_moderator_nft(string,string,string,string,uint64)uint64'] | ModeratorNftArgs['tuple']['mint_moderator_nft(string,string,string,string,uint64)uint64']>): ModeratorNftComposer<[...TReturns, ModeratorNftReturns['mint_moderator_nft(string,string,string,string,uint64)uint64'] | undefined]>

  /**
   * Calls the transfer_nft(uint64,address,address,uint64)string ABI method.
   *
   * Transfer NFT ownership (for outright purchases)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferNft(params?: CallParams<ModeratorNftArgs['obj']['transfer_nft(uint64,address,address,uint64)string'] | ModeratorNftArgs['tuple']['transfer_nft(uint64,address,address,uint64)string']>): ModeratorNftComposer<[...TReturns, ModeratorNftReturns['transfer_nft(uint64,address,address,uint64)string'] | undefined]>

  /**
   * Calls the update_metadata(uint64,string)string ABI method.
   *
   * Update NFT metadata URL (for usage statistics updates)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateMetadata(params?: CallParams<ModeratorNftArgs['obj']['update_metadata(uint64,string)string'] | ModeratorNftArgs['tuple']['update_metadata(uint64,string)string']>): ModeratorNftComposer<[...TReturns, ModeratorNftReturns['update_metadata(uint64,string)string'] | undefined]>

  /**
   * Calls the burn_nft(uint64)string ABI method.
   *
   * Burn/destroy an NFT (if moderator is decommissioned)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnNft(params?: CallParams<ModeratorNftArgs['obj']['burn_nft(uint64)string'] | ModeratorNftArgs['tuple']['burn_nft(uint64)string']>): ModeratorNftComposer<[...TReturns, ModeratorNftReturns['burn_nft(uint64)string'] | undefined]>

  /**
   * Calls the get_nft_info(uint64)string ABI method.
   *
   * Get NFT information
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getNftInfo(params?: CallParams<ModeratorNftArgs['obj']['get_nft_info(uint64)string'] | ModeratorNftArgs['tuple']['get_nft_info(uint64)string']>): ModeratorNftComposer<[...TReturns, ModeratorNftReturns['get_nft_info(uint64)string'] | undefined]>

  /**
   * Calls the opt_in_asset(uint64)string ABI method.
   *
   * Opt-in to receive an NFT (Algorand requires opt-in before receiving assets)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInAsset(params?: CallParams<ModeratorNftArgs['obj']['opt_in_asset(uint64)string'] | ModeratorNftArgs['tuple']['opt_in_asset(uint64)string']>): ModeratorNftComposer<[...TReturns, ModeratorNftReturns['opt_in_asset(uint64)string'] | undefined]>

  /**
   * Calls the set_pricing(uint64,uint64,uint64,uint64)string ABI method.
   *
   * Set pricing models for the moderator NFT
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPricing(params?: CallParams<ModeratorNftArgs['obj']['set_pricing(uint64,uint64,uint64,uint64)string'] | ModeratorNftArgs['tuple']['set_pricing(uint64,uint64,uint64,uint64)string']>): ModeratorNftComposer<[...TReturns, ModeratorNftReturns['set_pricing(uint64,uint64,uint64,uint64)string'] | undefined]>

  /**
   * Calls the record_usage(uint64,uint64)string ABI method.
   *
   * Record usage statistics for pay-per-use model
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  recordUsage(params?: CallParams<ModeratorNftArgs['obj']['record_usage(uint64,uint64)string'] | ModeratorNftArgs['tuple']['record_usage(uint64,uint64)string']>): ModeratorNftComposer<[...TReturns, ModeratorNftReturns['record_usage(uint64,uint64)string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ModeratorNFT smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ModeratorNftComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ModeratorNftComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ModeratorNftComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ModeratorNftComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ModeratorNftComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ModeratorNftComposerResults<TReturns>>
}
export type ModeratorNftComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

