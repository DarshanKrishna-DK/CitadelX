# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": [], "create": ["NoOp"]}, "args": [{"type": "account", "name": "creator"}, {"type": "uint64", "name": "hourly_price_algo"}, {"type": "uint64", "name": "monthly_price_algo"}, {"type": "uint64", "name": "buyout_price_algo"}], "name": "create_moderator", "returns": {"type": "void"}, "desc": "Initialize moderator with pricing in ALGO", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "payment"}, {"type": "uint64", "name": "hours"}], "name": "purchase_hourly_access", "returns": {"type": "string"}, "desc": "Purchase hourly access to moderator", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "payment"}, {"type": "uint64", "name": "months"}], "name": "purchase_monthly_license", "returns": {"type": "string"}, "desc": "Purchase monthly license for moderator", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "payment"}], "name": "buyout_moderator", "returns": {"type": "string"}, "desc": "Transfer permanent ownership with 90/10 revenue split", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "new_hourly_price"}, {"type": "uint64", "name": "new_monthly_price"}, {"type": "uint64", "name": "new_buyout_price"}], "name": "update_pricing", "returns": {"type": "string"}, "desc": "Update pricing - only current owner can call", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "hours_used"}], "name": "use_hourly_access", "returns": {"type": "string"}, "desc": "Deduct hours from user's hourly access", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_moderator_info", "returns": {"type": "(uint64,uint64,uint64,address,address)"}, "desc": "Get pricing and ownership info (read-only, no cost)", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "user"}], "name": "get_user_access", "returns": {"type": "(uint64,uint64,uint64,uint64)"}, "desc": "Get user's access details (read-only, no cost)", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_contract_stats", "returns": {"type": "(uint64,uint64,uint64)"}, "desc": "Get contract statistics (read-only, no cost)", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "user"}], "name": "has_valid_access", "returns": {"type": "bool"}, "desc": "Check if user has valid access (read-only, no cost)", "events": [], "readonly": true, "recommendations": {}}], "name": "ModeratorPurchaseContract", "state": {"keys": {"box": {}, "global": {"contract_owner": {"key": "Y29udHJhY3Rfb3duZXI=", "keyType": "AVMString", "valueType": "address"}, "moderator_owner": {"key": "bW9kZXJhdG9yX293bmVy", "keyType": "AVMString", "valueType": "address"}, "moderator_creator": {"key": "bW9kZXJhdG9yX2NyZWF0b3I=", "keyType": "AVMString", "valueType": "address"}, "moderator_exists": {"key": "bW9kZXJhdG9yX2V4aXN0cw==", "keyType": "AVMString", "valueType": "AVMUint64"}, "hourly_price": {"key": "aG91cmx5X3ByaWNl", "keyType": "AVMString", "valueType": "AVMUint64"}, "monthly_price": {"key": "bW9udGhseV9wcmljZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "buyout_price": {"key": "YnV5b3V0X3ByaWNl", "keyType": "AVMString", "valueType": "AVMUint64"}, "total_transactions": {"key": "dG90YWxfdHJhbnNhY3Rpb25z", "keyType": "AVMString", "valueType": "AVMUint64"}, "total_revenue": {"key": "dG90YWxfcmV2ZW51ZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "total_users": {"key": "dG90YWxfdXNlcnM=", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {"user_access_type": {"key": "dXNlcl9hY2Nlc3NfdHlwZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "access_expiry": {"key": "YWNjZXNzX2V4cGlyeQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "hours_remaining": {"key": "aG91cnNfcmVtYWluaW5n", "keyType": "AVMString", "valueType": "AVMUint64"}, "total_spent": {"key": "dG90YWxfc3BlbnQ=", "keyType": "AVMString", "valueType": "AVMUint64"}}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 3, "ints": 7}, "local": {"bytes": 0, "ints": 4}}}, "structs": {}, "byteCode": {"approval": "CiAEAAHAhD1aJg8EFR98dRJ0b3RhbF90cmFuc2FjdGlvbnMNdG90YWxfcmV2ZW51ZQt0b3RhbF91c2Vycw9tb2RlcmF0b3Jfb3duZXIPaG91cnNfcmVtYWluaW5nC3RvdGFsX3NwZW50EHVzZXJfYWNjZXNzX3R5cGUNYWNjZXNzX2V4cGlyeRBtb2RlcmF0b3JfZXhpc3RzDGhvdXJseV9wcmljZQ1tb250aGx5X3ByaWNlDGJ1eW91dF9wcmljZQEAEW1vZGVyYXRvcl9jcmVhdG9yMRtBAE2CCgQR0tovBJwJ48EEp+Z8IAR7LvXCBLyAzEAEgQQroARrH/6eBLhAVZQEy0W11QRJ0nrrNhoAjgoAzgCxAJQAegBhAE4APgAoABgAAiJDMRkURDEYRDYaARfAHIgE1ChMULAjQzEZFEQxGESIBK8oTFCwI0MxGRREMRhENhoBF8AciARrKExQsCNDMRkURDEYRIgEKyhMULAjQzEZFEQxGEQ2GgGIA9ooTFCwI0MxGRREMRhENhoBNhoCNhoDiAN5KExQsCNDMRkURDEYRDEWIwlJOBAjEkSIAoIoTFCwI0MxGRREMRhEMRYjCUk4ECMSRDYaAYgBXyhMULAjQzEZFEQxGEQxFiMJSTgQIxJENhoBiABrKExQsCNDMRkURDEYFEQ2GgEXwBw2GgI2GgM2GgSIAAIjQ4oEAIAOY29udHJhY3Rfb3duZXIxAGcnDov8ZycEi/xnJwkjZ4v9FyQLJwpMZ4v+FyQLJwtMZ4v/FyQLJwxMZykiZyoiZysiZ4mKAgEiJwllRCMSRCInCmVEi/8XTEsBC4v+OAcyChJEi/44CElPAg9Ei/44ADEAEkRJJQuBZApKCbEiJwRlRIAVSG91cmx5IGFjY2VzcyBwYXltZW50sgVPArIIsgcjshAisgGzMQAiJwVjRE8DCDEAJwVPAmYxACcHI2YxACInBmNESU8DCDEAJwZPAmYiKWVEIwgpTGciKmVETwIIKkxnQAAJIitlRCMIK0xngCgAJlN1Y2Nlc3NmdWxseSBwdXJjaGFzZWQgaG91cnMgb2YgYWNjZXNziYoCASInCWVEIxJEIicLZUSL/xdMSwELi/44BzIKEkSL/jgISU4DSU8CD0SL/jgAMQASREklC4FkCkxLAQlOArEiJwRlRIAXTW9udGhseSBsaWNlbnNlIHBheW1lbnSyBbIHsggjshAisgGzMgdJTgKBgJqeAU8CC0wxACInCGNMSU4CTgREDEEAb4sDCDEAJwhPAmYxACcHgQJmMQAiJwZjREmLAAgxACcGTwJmIillRCMIKUxnIiplRIsBCCpMZ0AACSIrZUQjCCtMZ4AoACZTdWNjZXNzZnVsbHkgcHVyY2hhc2VkIG1vbnRobHkgbGljZW5zZYwAiYsCCDEAJwhPAmZC/46KAQEiJwllRCMSRCInBGVESTEAE0SL/zgHMgoSRIv/OAgiJwxlREsBDkSL/zgAMQASREklC4FkCkoJsYAYTW9kZXJhdG9yIGJ1eW91dCBwYXltZW50sgVMsghPArIHI7IQIrIBsycEMQBnMQAnB4EDZjEAJwgiZjEAJwUiZjEAIicGY0RJTwMIMQAnBk8CZiIpZUQjCClMZyIqZURPAggqTGdAAAkiK2VEIwgrTGeALAAqU3VjY2Vzc2Z1bGx5IHB1cmNoYXNlZCBtb2RlcmF0b3Igb3duZXJzaGlwiYoDATEAIicEZUQSRIv9FyQLJwpMZ4v+FyQLJwtMZ4v/FyQLJwxMZ4AeABxQcmljaW5nIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5iYoBATEAIicHY0QjEkQxACInBWNEi/8XSg9ECTEAJwVPAmaAGQAXVXNlZCBob3VycyBzdWNjZXNzZnVsbHmJIicKZUQkChYiJwtlRCQKFiInDGVEJAoWIicEZUQiJw5lRE8ETwRQTwNQTwJQTFCJigEBi/8iJwdjRBaL/yInBWNEFov/IicIY0QWi/8iJwZjRBZPA08DUE8CUExQiSIpZUQWIiplRBYiK2VEFk4CUExQiYoBAYv/IicHY0xJTwJEMgdMIxJBABCL/yInBWNEJw0iTwJUjACJiwCBAhJBABOL/yInCGNEiwENJw0iTwJUjACJiwCBAxJBAAaAAYCMAIknDYwAiQ==", "clear": "CoEBQw=="}, "desc": "\n    Smart contract for moderator purchases with 3 access types:\n    1. Hourly access (pay per hour)\n    2. Monthly license (subscription)\n    3. Buyout (permanent ownership)\n    \n    Based on citadel-algo library patterns with 90/10 revenue split.\n    ", "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [1397], "errorMessage": "Insufficient hours remaining"}, {"pc": [612, 827, 1089], "errorMessage": "Moderator does not exist"}, {"pc": [1384], "errorMessage": "No hourly access found"}, {"pc": [300, 322, 338, 360, 376, 395, 420, 446, 475, 504], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [1311], "errorMessage": "Only owner can update pricing"}, {"pc": [1099], "errorMessage": "You already own this moderator"}, {"pc": [508], "errorMessage": "can only call when creating"}, {"pc": [303, 325, 341, 363, 379, 398, 423, 449, 478], "errorMessage": "can only call when not creating"}, {"pc": [950, 1507, 1601], "errorMessage": "check self.access_expiry exists for account"}, {"pc": [1116, 1454], "errorMessage": "check self.buyout_price exists"}, {"pc": [617, 1438], "errorMessage": "check self.hourly_price exists"}, {"pc": [708, 1391, 1499, 1577], "errorMessage": "check self.hours_remaining exists for account"}, {"pc": [1467], "errorMessage": "check self.moderator_creator exists"}, {"pc": [609, 824, 1086], "errorMessage": "check self.moderator_exists exists"}, {"pc": [663, 885, 1094, 1309, 1462], "errorMessage": "check self.moderator_owner exists"}, {"pc": [832, 1446], "errorMessage": "check self.monthly_price exists"}, {"pc": [755, 1002, 1234, 1536], "errorMessage": "check self.total_revenue exists"}, {"pc": [731, 978, 1210, 1515], "errorMessage": "check self.total_spent exists for account"}, {"pc": [746, 993, 1225, 1531], "errorMessage": "check self.total_transactions exists"}, {"pc": [768, 1015, 1247, 1541], "errorMessage": "check self.total_users exists"}, {"pc": [1381, 1491, 1562], "errorMessage": "check self.user_access_type exists for account"}, {"pc": [433, 459, 488], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class PurchaseHourlyAccessArgs:
    """Dataclass for purchase_hourly_access arguments"""
    payment: algokit_utils.AppMethodCallTransactionArgument
    hours: int

    @property
    def abi_method_signature(self) -> str:
        return "purchase_hourly_access(pay,uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class PurchaseMonthlyLicenseArgs:
    """Dataclass for purchase_monthly_license arguments"""
    payment: algokit_utils.AppMethodCallTransactionArgument
    months: int

    @property
    def abi_method_signature(self) -> str:
        return "purchase_monthly_license(pay,uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BuyoutModeratorArgs:
    """Dataclass for buyout_moderator arguments"""
    payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "buyout_moderator(pay)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UpdatePricingArgs:
    """Dataclass for update_pricing arguments"""
    new_hourly_price: int
    new_monthly_price: int
    new_buyout_price: int

    @property
    def abi_method_signature(self) -> str:
        return "update_pricing(uint64,uint64,uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UseHourlyAccessArgs:
    """Dataclass for use_hourly_access arguments"""
    hours_used: int

    @property
    def abi_method_signature(self) -> str:
        return "use_hourly_access(uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetUserAccessArgs:
    """Dataclass for get_user_access arguments"""
    user: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "get_user_access(account)(uint64,uint64,uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class HasValidAccessArgs:
    """Dataclass for has_valid_access arguments"""
    user: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "has_valid_access(account)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateModeratorArgs:
    """Dataclass for create_moderator arguments"""
    creator: str | bytes
    hourly_price_algo: int
    monthly_price_algo: int
    buyout_price_algo: int

    @property
    def abi_method_signature(self) -> str:
        return "create_moderator(account,uint64,uint64,uint64)void"


class ModeratorPurchaseContractParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def purchase_hourly_access(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | PurchaseHourlyAccessArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "purchase_hourly_access(pay,uint64)string",
            "args": method_args,
        }))

    def purchase_monthly_license(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | PurchaseMonthlyLicenseArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "purchase_monthly_license(pay,uint64)string",
            "args": method_args,
        }))

    def buyout_moderator(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BuyoutModeratorArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buyout_moderator(pay)string",
            "args": method_args,
        }))

    def update_pricing(
        self,
        args: tuple[int, int, int] | UpdatePricingArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_pricing(uint64,uint64,uint64)string",
            "args": method_args,
        }))

    def use_hourly_access(
        self,
        args: tuple[int] | UseHourlyAccessArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "use_hourly_access(uint64)string",
            "args": method_args,
        }))

    def get_moderator_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_moderator_info()(uint64,uint64,uint64,address,address)",
        }))

    def get_user_access(
        self,
        args: tuple[str | bytes] | GetUserAccessArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_user_access(account)(uint64,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def get_contract_stats(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_contract_stats()(uint64,uint64,uint64)",
        }))

    def has_valid_access(
        self,
        args: tuple[str | bytes] | HasValidAccessArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "has_valid_access(account)bool",
            "args": method_args,
        }))

    def create_moderator(
        self,
        args: tuple[str | bytes, int, int, int] | CreateModeratorArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_moderator(account,uint64,uint64,uint64)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class ModeratorPurchaseContractCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def purchase_hourly_access(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | PurchaseHourlyAccessArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "purchase_hourly_access(pay,uint64)string",
            "args": method_args,
        }))

    def purchase_monthly_license(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | PurchaseMonthlyLicenseArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "purchase_monthly_license(pay,uint64)string",
            "args": method_args,
        }))

    def buyout_moderator(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BuyoutModeratorArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buyout_moderator(pay)string",
            "args": method_args,
        }))

    def update_pricing(
        self,
        args: tuple[int, int, int] | UpdatePricingArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_pricing(uint64,uint64,uint64)string",
            "args": method_args,
        }))

    def use_hourly_access(
        self,
        args: tuple[int] | UseHourlyAccessArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "use_hourly_access(uint64)string",
            "args": method_args,
        }))

    def get_moderator_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_moderator_info()(uint64,uint64,uint64,address,address)",
        }))

    def get_user_access(
        self,
        args: tuple[str | bytes] | GetUserAccessArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_user_access(account)(uint64,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def get_contract_stats(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_contract_stats()(uint64,uint64,uint64)",
        }))

    def has_valid_access(
        self,
        args: tuple[str | bytes] | HasValidAccessArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "has_valid_access(account)bool",
            "args": method_args,
        }))

    def create_moderator(
        self,
        args: tuple[str | bytes, int, int, int] | CreateModeratorArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_moderator(account,uint64,uint64,uint64)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class ModeratorPurchaseContractSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def purchase_hourly_access(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | PurchaseHourlyAccessArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "purchase_hourly_access(pay,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def purchase_monthly_license(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | PurchaseMonthlyLicenseArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "purchase_monthly_license(pay,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def buyout_moderator(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BuyoutModeratorArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buyout_moderator(pay)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def update_pricing(
        self,
        args: tuple[int, int, int] | UpdatePricingArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_pricing(uint64,uint64,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def use_hourly_access(
        self,
        args: tuple[int] | UseHourlyAccessArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "use_hourly_access(uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_moderator_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int, int, str, str]]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_moderator_info()(uint64,uint64,uint64,address,address)",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int, int, str, str]], parsed_response)

    def get_user_access(
        self,
        args: tuple[str | bytes] | GetUserAccessArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int, int, int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_user_access(account)(uint64,uint64,uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int, int, int]], parsed_response)

    def get_contract_stats(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int, int]]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_contract_stats()(uint64,uint64,uint64)",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int, int]], parsed_response)

    def has_valid_access(
        self,
        args: tuple[str | bytes] | HasValidAccessArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "has_valid_access(account)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def create_moderator(
        self,
        args: tuple[str | bytes, int, int, int] | CreateModeratorArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_moderator(account,uint64,uint64,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    contract_owner: str
    moderator_owner: str
    moderator_creator: str
    moderator_exists: int
    hourly_price: int
    monthly_price: int
    buyout_price: int
    total_transactions: int
    total_revenue: int
    total_users: int

class LocalStateValue(typing.TypedDict):
    """Shape of local_state state key values"""
    user_access_type: int
    access_expiry: int
    hours_remaining: int
    total_spent: int

class ModeratorPurchaseContractState:
    """Methods to access state for the current ModeratorPurchaseContract app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    def local_state(
        self, address: str
    ) -> "_LocalState":
            """Methods to access local_state for the current app"""
            return _LocalState(self.app_client, address)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def contract_owner(self) -> str:
        """Get the current value of the contract_owner key in global_state state"""
        value = self.app_client.state.global_state.get_value("contract_owner")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def moderator_owner(self) -> str:
        """Get the current value of the moderator_owner key in global_state state"""
        value = self.app_client.state.global_state.get_value("moderator_owner")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def moderator_creator(self) -> str:
        """Get the current value of the moderator_creator key in global_state state"""
        value = self.app_client.state.global_state.get_value("moderator_creator")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def moderator_exists(self) -> int:
        """Get the current value of the moderator_exists key in global_state state"""
        value = self.app_client.state.global_state.get_value("moderator_exists")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def hourly_price(self) -> int:
        """Get the current value of the hourly_price key in global_state state"""
        value = self.app_client.state.global_state.get_value("hourly_price")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def monthly_price(self) -> int:
        """Get the current value of the monthly_price key in global_state state"""
        value = self.app_client.state.global_state.get_value("monthly_price")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def buyout_price(self) -> int:
        """Get the current value of the buyout_price key in global_state state"""
        value = self.app_client.state.global_state.get_value("buyout_price")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_transactions(self) -> int:
        """Get the current value of the total_transactions key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_transactions")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_revenue(self) -> int:
        """Get the current value of the total_revenue key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_revenue")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_users(self) -> int:
        """Get the current value of the total_users key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_users")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _LocalState:
    def __init__(self, app_client: algokit_utils.AppClient, address: str):
        self.app_client = app_client
        self.address = address
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> LocalStateValue:
        """Get all current keyed values from local_state state"""
        result = self.app_client.state.local_state(self.address).get_all()
        if not result:
            return typing.cast(LocalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.local_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(LocalStateValue, converted)

    @property
    def user_access_type(self) -> int:
        """Get the current value of the user_access_type key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("user_access_type")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def access_expiry(self) -> int:
        """Get the current value of the access_expiry key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("access_expiry")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def hours_remaining(self) -> int:
        """Get the current value of the hours_remaining key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("hours_remaining")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_spent(self) -> int:
        """Get the current value of the total_spent key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("total_spent")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class ModeratorPurchaseContractClient:
    """Client for interacting with ModeratorPurchaseContract smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = ModeratorPurchaseContractParams(self.app_client)
        self.create_transaction = ModeratorPurchaseContractCreateTransactionParams(self.app_client)
        self.send = ModeratorPurchaseContractSend(self.app_client)
        self.state = ModeratorPurchaseContractState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "ModeratorPurchaseContractClient":
        return ModeratorPurchaseContractClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "ModeratorPurchaseContractClient":
        return ModeratorPurchaseContractClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "ModeratorPurchaseContractClient":
        return ModeratorPurchaseContractClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "ModeratorPurchaseContractComposer":
        return ModeratorPurchaseContractComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["purchase_hourly_access(pay,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["purchase_monthly_license(pay,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["buyout_moderator(pay)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["update_pricing(uint64,uint64,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["use_hourly_access(uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_moderator_info()(uint64,uint64,uint64,address,address)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int, int, str, str] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_user_access(account)(uint64,uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int, int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_contract_stats()(uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["has_valid_access(account)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_moderator(account,uint64,uint64,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | bool | str | tuple[int, int, int, int] | tuple[int, int, int, str, str] | tuple[int, int, int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class ModeratorPurchaseContractMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        CreateModeratorArgs,
        str | None,
    ]
):
    """Parameters for creating ModeratorPurchaseContract contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class ModeratorPurchaseContractFactory(algokit_utils.TypedAppFactoryProtocol[ModeratorPurchaseContractMethodCallCreateParams, None, None]):
    """Factory for deploying and managing ModeratorPurchaseContractClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = ModeratorPurchaseContractFactoryParams(self.app_factory)
        self.create_transaction = ModeratorPurchaseContractFactoryCreateTransaction(self.app_factory)
        self.send = ModeratorPurchaseContractFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: ModeratorPurchaseContractMethodCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[ModeratorPurchaseContractClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return ModeratorPurchaseContractClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> ModeratorPurchaseContractClient:
        """Get an app client by creator address and name"""
        return ModeratorPurchaseContractClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> ModeratorPurchaseContractClient:
        """Get an app client by app ID"""
        return ModeratorPurchaseContractClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class ModeratorPurchaseContractFactoryParams:
    """Parameters for creating transactions for ModeratorPurchaseContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = ModeratorPurchaseContractFactoryCreateParams(app_factory)
        self.update = ModeratorPurchaseContractFactoryUpdateParams(app_factory)
        self.delete = ModeratorPurchaseContractFactoryDeleteParams(app_factory)

class ModeratorPurchaseContractFactoryCreateParams:
    """Parameters for 'create' operations of ModeratorPurchaseContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def purchase_hourly_access(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | PurchaseHourlyAccessArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the purchase_hourly_access(pay,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "purchase_hourly_access(pay,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def purchase_monthly_license(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | PurchaseMonthlyLicenseArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the purchase_monthly_license(pay,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "purchase_monthly_license(pay,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def buyout_moderator(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BuyoutModeratorArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the buyout_moderator(pay)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "buyout_moderator(pay)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def update_pricing(
        self,
        args: tuple[int, int, int] | UpdatePricingArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the update_pricing(uint64,uint64,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "update_pricing(uint64,uint64,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def use_hourly_access(
        self,
        args: tuple[int] | UseHourlyAccessArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the use_hourly_access(uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "use_hourly_access(uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_moderator_info(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_moderator_info()(uint64,uint64,uint64,address,address) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_moderator_info()(uint64,uint64,uint64,address,address)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_user_access(
        self,
        args: tuple[str | bytes] | GetUserAccessArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_user_access(account)(uint64,uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_user_access(account)(uint64,uint64,uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_contract_stats(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_contract_stats()(uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_contract_stats()(uint64,uint64,uint64)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def has_valid_access(
        self,
        args: tuple[str | bytes] | HasValidAccessArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the has_valid_access(account)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "has_valid_access(account)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def create_moderator(
        self,
        args: tuple[str | bytes, int, int, int] | CreateModeratorArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_moderator(account,uint64,uint64,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_moderator(account,uint64,uint64,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class ModeratorPurchaseContractFactoryUpdateParams:
    """Parameters for 'update' operations of ModeratorPurchaseContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class ModeratorPurchaseContractFactoryDeleteParams:
    """Parameters for 'delete' operations of ModeratorPurchaseContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class ModeratorPurchaseContractFactoryCreateTransaction:
    """Create transactions for ModeratorPurchaseContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = ModeratorPurchaseContractFactoryCreateTransactionCreate(app_factory)


class ModeratorPurchaseContractFactoryCreateTransactionCreate:
    """Create new instances of ModeratorPurchaseContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class ModeratorPurchaseContractFactorySend:
    """Send calls to ModeratorPurchaseContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = ModeratorPurchaseContractFactorySendCreate(app_factory)


class ModeratorPurchaseContractFactorySendCreate:
    """Send create calls to ModeratorPurchaseContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[ModeratorPurchaseContractClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return ModeratorPurchaseContractClient(result[0]), result[1]

    def create_moderator(
        self,
        args: tuple[str | bytes, int, int, int] | CreateModeratorArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[ModeratorPurchaseContractClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the create_moderator(account,uint64,uint64,uint64)void ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "create_moderator(account,uint64,uint64,uint64)void",
                    "args": _parse_abi_args(args),
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return ModeratorPurchaseContractClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class ModeratorPurchaseContractComposer:
    """Composer for creating transaction groups for ModeratorPurchaseContract contract calls"""

    def __init__(self, client: "ModeratorPurchaseContractClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def purchase_hourly_access(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | PurchaseHourlyAccessArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ModeratorPurchaseContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.purchase_hourly_access(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "purchase_hourly_access(pay,uint64)string", v
            )
        )
        return self

    def purchase_monthly_license(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | PurchaseMonthlyLicenseArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ModeratorPurchaseContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.purchase_monthly_license(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "purchase_monthly_license(pay,uint64)string", v
            )
        )
        return self

    def buyout_moderator(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BuyoutModeratorArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ModeratorPurchaseContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.buyout_moderator(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "buyout_moderator(pay)string", v
            )
        )
        return self

    def update_pricing(
        self,
        args: tuple[int, int, int] | UpdatePricingArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ModeratorPurchaseContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.update_pricing(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "update_pricing(uint64,uint64,uint64)string", v
            )
        )
        return self

    def use_hourly_access(
        self,
        args: tuple[int] | UseHourlyAccessArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ModeratorPurchaseContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.use_hourly_access(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "use_hourly_access(uint64)string", v
            )
        )
        return self

    def get_moderator_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ModeratorPurchaseContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_moderator_info(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_moderator_info()(uint64,uint64,uint64,address,address)", v
            )
        )
        return self

    def get_user_access(
        self,
        args: tuple[str | bytes] | GetUserAccessArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ModeratorPurchaseContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_user_access(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_user_access(account)(uint64,uint64,uint64,uint64)", v
            )
        )
        return self

    def get_contract_stats(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ModeratorPurchaseContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_contract_stats(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_contract_stats()(uint64,uint64,uint64)", v
            )
        )
        return self

    def has_valid_access(
        self,
        args: tuple[str | bytes] | HasValidAccessArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ModeratorPurchaseContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.has_valid_access(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "has_valid_access(account)bool", v
            )
        )
        return self

    def create_moderator(
        self,
        args: tuple[str | bytes, int, int, int] | CreateModeratorArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ModeratorPurchaseContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_moderator(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_moderator(account,uint64,uint64,uint64)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "ModeratorPurchaseContractComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "ModeratorPurchaseContractComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
