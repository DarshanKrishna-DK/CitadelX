{
    "name": "ModeratorPurchaseContract",
    "structs": {},
    "methods": [
        {
            "name": "create_moderator",
            "args": [
                {
                    "type": "account",
                    "name": "creator"
                },
                {
                    "type": "uint64",
                    "name": "hourly_price_algo"
                },
                {
                    "type": "uint64",
                    "name": "monthly_price_algo"
                },
                {
                    "type": "uint64",
                    "name": "buyout_price_algo"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize moderator with pricing in ALGO",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "purchase_hourly_access",
            "args": [
                {
                    "type": "pay",
                    "name": "payment"
                },
                {
                    "type": "uint64",
                    "name": "hours"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Purchase hourly access to moderator",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "purchase_monthly_license",
            "args": [
                {
                    "type": "pay",
                    "name": "payment"
                },
                {
                    "type": "uint64",
                    "name": "months"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Purchase monthly license for moderator",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buyout_moderator",
            "args": [
                {
                    "type": "pay",
                    "name": "payment"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Transfer permanent ownership with 90/10 revenue split",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update_pricing",
            "args": [
                {
                    "type": "uint64",
                    "name": "new_hourly_price"
                },
                {
                    "type": "uint64",
                    "name": "new_monthly_price"
                },
                {
                    "type": "uint64",
                    "name": "new_buyout_price"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update pricing - only current owner can call",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "use_hourly_access",
            "args": [
                {
                    "type": "uint64",
                    "name": "hours_used"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deduct hours from user's hourly access",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_moderator_info",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,address,address)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get pricing and ownership info (read-only, no cost)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_user_access",
            "args": [
                {
                    "type": "account",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get user's access details (read-only, no cost)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_contract_stats",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get contract statistics (read-only, no cost)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "has_valid_access",
            "args": [
                {
                    "type": "account",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Check if user has valid access (read-only, no cost)",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    Smart contract for moderator purchases with 3 access types:\n    1. Hourly access (pay per hour)\n    2. Monthly license (subscription)\n    3. Buyout (permanent ownership)\n    \n    Based on citadel-algo library patterns with 90/10 revenue split.\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 7,
                "bytes": 3
            },
            "local": {
                "ints": 4,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "contract_owner": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "Y29udHJhY3Rfb3duZXI="
                },
                "moderator_owner": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "bW9kZXJhdG9yX293bmVy"
                },
                "moderator_creator": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "bW9kZXJhdG9yX2NyZWF0b3I="
                },
                "moderator_exists": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bW9kZXJhdG9yX2V4aXN0cw=="
                },
                "hourly_price": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "aG91cmx5X3ByaWNl"
                },
                "monthly_price": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bW9udGhseV9wcmljZQ=="
                },
                "buyout_price": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YnV5b3V0X3ByaWNl"
                },
                "total_transactions": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfdHJhbnNhY3Rpb25z"
                },
                "total_revenue": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfcmV2ZW51ZQ=="
                },
                "total_users": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfdXNlcnM="
                }
            },
            "local": {
                "user_access_type": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dXNlcl9hY2Nlc3NfdHlwZQ=="
                },
                "access_expiry": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YWNjZXNzX2V4cGlyeQ=="
                },
                "hours_remaining": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "aG91cnNfcmVtYWluaW5n"
                },
                "total_spent": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfc3BlbnQ="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1397
                    ],
                    "errorMessage": "Insufficient hours remaining"
                },
                {
                    "pc": [
                        612,
                        827,
                        1089
                    ],
                    "errorMessage": "Moderator does not exist"
                },
                {
                    "pc": [
                        1384
                    ],
                    "errorMessage": "No hourly access found"
                },
                {
                    "pc": [
                        300,
                        322,
                        338,
                        360,
                        376,
                        395,
                        420,
                        446,
                        475,
                        504
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1311
                    ],
                    "errorMessage": "Only owner can update pricing"
                },
                {
                    "pc": [
                        1099
                    ],
                    "errorMessage": "You already own this moderator"
                },
                {
                    "pc": [
                        508
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        303,
                        325,
                        341,
                        363,
                        379,
                        398,
                        423,
                        449,
                        478
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        950,
                        1507,
                        1601
                    ],
                    "errorMessage": "check self.access_expiry exists for account"
                },
                {
                    "pc": [
                        1116,
                        1454
                    ],
                    "errorMessage": "check self.buyout_price exists"
                },
                {
                    "pc": [
                        617,
                        1438
                    ],
                    "errorMessage": "check self.hourly_price exists"
                },
                {
                    "pc": [
                        708,
                        1391,
                        1499,
                        1577
                    ],
                    "errorMessage": "check self.hours_remaining exists for account"
                },
                {
                    "pc": [
                        1467
                    ],
                    "errorMessage": "check self.moderator_creator exists"
                },
                {
                    "pc": [
                        609,
                        824,
                        1086
                    ],
                    "errorMessage": "check self.moderator_exists exists"
                },
                {
                    "pc": [
                        663,
                        885,
                        1094,
                        1309,
                        1462
                    ],
                    "errorMessage": "check self.moderator_owner exists"
                },
                {
                    "pc": [
                        832,
                        1446
                    ],
                    "errorMessage": "check self.monthly_price exists"
                },
                {
                    "pc": [
                        755,
                        1002,
                        1234,
                        1536
                    ],
                    "errorMessage": "check self.total_revenue exists"
                },
                {
                    "pc": [
                        731,
                        978,
                        1210,
                        1515
                    ],
                    "errorMessage": "check self.total_spent exists for account"
                },
                {
                    "pc": [
                        746,
                        993,
                        1225,
                        1531
                    ],
                    "errorMessage": "check self.total_transactions exists"
                },
                {
                    "pc": [
                        768,
                        1015,
                        1247,
                        1541
                    ],
                    "errorMessage": "check self.total_users exists"
                },
                {
                    "pc": [
                        1381,
                        1491,
                        1562
                    ],
                    "errorMessage": "check self.user_access_type exists for account"
                },
                {
                    "pc": [
                        433,
                        459,
                        488
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}