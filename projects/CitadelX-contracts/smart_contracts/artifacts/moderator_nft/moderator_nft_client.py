# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "desc": "Name of the AI moderator", "name": "moderator_name"}, {"type": "string", "desc": "Description of the moderator", "name": "moderator_description"}, {"type": "string", "desc": "ID of the DAO that created it", "name": "dao_id"}, {"type": "string", "desc": "URL to IPFS metadata (JSON with full details)", "name": "metadata_url"}, {"type": "uint64", "desc": "Total supply (typically 1 for NFT)", "name": "total_supply"}], "name": "mint_moderator_nft", "returns": {"type": "uint64", "desc": "Asset ID of the minted NFT"}, "desc": "Mint a new AI Moderator NFT as an Algorand Standard Asset (ASA)", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The asset ID of the NFT", "name": "asset_id"}, {"type": "address", "desc": "Current owner", "name": "from_address"}, {"type": "address", "desc": "New owner", "name": "to_address"}, {"type": "uint64", "desc": "Amount to transfer (typically 1 for NFT)", "name": "amount"}], "name": "transfer_nft", "returns": {"type": "string", "desc": "Success message"}, "desc": "Transfer NFT ownership (for outright purchases)", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The asset ID of the NFT", "name": "asset_id"}, {"type": "string", "desc": "New metadata URL pointing to updated IPFS file", "name": "new_metadata_url"}], "name": "update_metadata", "returns": {"type": "string", "desc": "Success message"}, "desc": "Update NFT metadata URL (for usage statistics updates)", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The asset ID of the NFT to burn", "name": "asset_id"}], "name": "burn_nft", "returns": {"type": "string", "desc": "Success message"}, "desc": "Burn/destroy an NFT (if moderator is decommissioned)", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The asset ID of the NFT", "name": "asset_id"}], "name": "get_nft_info", "returns": {"type": "string", "desc": "NFT information as string"}, "desc": "Get NFT information", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The asset ID to opt into", "name": "asset_id"}], "name": "opt_in_asset", "returns": {"type": "string", "desc": "Success message"}, "desc": "Opt-in to receive an NFT (Algorand requires opt-in before receiving assets)", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The asset ID of the moderator NFT", "name": "asset_id"}, {"type": "uint64", "desc": "Monthly subscription price in microAlgos", "name": "monthly_price"}, {"type": "uint64", "desc": "Pay-per-use price in microAlgos", "name": "pay_per_use_price"}, {"type": "uint64", "desc": "One-time purchase price in microAlgos", "name": "outright_price"}], "name": "set_pricing", "returns": {"type": "string", "desc": "Success message"}, "desc": "Set pricing models for the moderator NFT", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The asset ID of the moderator NFT", "name": "asset_id"}, {"type": "uint64", "desc": "Number of times used", "name": "usage_count"}], "name": "record_usage", "returns": {"type": "string", "desc": "Success message with updated count"}, "desc": "Record usage statistics for pay-per-use model", "events": [], "readonly": false, "recommendations": {}}], "name": "ModeratorNFT", "state": {"keys": {"box": {}, "global": {}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 0}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CiABATEbQQHJgggEgTXwgwShfBzzBEyPKK4E5cx/egQx1BYXBIWJ+N4ELAXYigRSVQ47NhoAjggBWAEqAO4AxQCUAGQAMAADgQBDMRkURDEYRIAhFR98dQAbVXNhZ2UgcmVjb3JkZWQgc3VjY2Vzc2Z1bGx5sCJDMRkURDEYRIAoFR98dQAiUHJpY2luZyBzZXQgZm9yIGFzc2V0IHN1Y2Nlc3NmdWxsebAiQzEZFEQxGESAJBUffHUAHk9wdGVkIGluIHRvIGFzc2V0IHN1Y2Nlc3NmdWxsebAiQzEZFEQxGESAJRUffHUAH05GVCBJbmZvIHJldHJpZXZlZCBzdWNjZXNzZnVsbHmwIkMxGRREMRhEgB0VH3x1ABdORlQgYnVybmVkIHN1Y2Nlc3NmdWxsebAiQzEZFEQxGESAMBUffHUAKk1ldGFkYXRhIHVwZGF0ZWQgZm9yIGFzc2V0IElEIHN1Y2Nlc3NmdWxsebAiQzEZFEQxGESAIhUffHUAHE5GVCB0cmFuc2ZlcnJlZCBzdWNjZXNzZnVsbHmwIkMxGRREMRhENhoBVwIANhoCVwIANhoDVwIANhoEVwIANhoFF4gAFxaABBUffHVMULAiQzEZQP5xMRgURCJDigUBi/9EgaCNBjIHCIk=", "clear": "CoEBQw=="}, "desc": "\n    ModeratorNFT Smart Contract\n    \n    Manages NFT creation (ASA) for AI moderators with metadata\n    Each NFT represents a unique AI moderator with training context\n    ", "events": [], "networks": {}, "source": {"approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvbW9kZXJhdG9yX25mdC9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBNb2RlcmF0b3JORlQoQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMwogICAgcHVzaGJ5dGVzcyAweDgxMzVmMDgzIDB4YTE3YzFjZjMgMHg0YzhmMjhhZSAweGU1Y2M3ZjdhIDB4MzFkNDE2MTcgMHg4NTg5ZjhkZSAweDJjMDVkODhhIDB4NTI1NTBlM2IgLy8gbWV0aG9kICJtaW50X21vZGVyYXRvcl9uZnQoc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nLHVpbnQ2NCl1aW50NjQiLCBtZXRob2QgInRyYW5zZmVyX25mdCh1aW50NjQsYWRkcmVzcyxhZGRyZXNzLHVpbnQ2NClzdHJpbmciLCBtZXRob2QgInVwZGF0ZV9tZXRhZGF0YSh1aW50NjQsc3RyaW5nKXN0cmluZyIsIG1ldGhvZCAiYnVybl9uZnQodWludDY0KXN0cmluZyIsIG1ldGhvZCAiZ2V0X25mdF9pbmZvKHVpbnQ2NClzdHJpbmciLCBtZXRob2QgIm9wdF9pbl9hc3NldCh1aW50NjQpc3RyaW5nIiwgbWV0aG9kICJzZXRfcHJpY2luZyh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpc3RyaW5nIiwgbWV0aG9kICJyZWNvcmRfdXNhZ2UodWludDY0LHVpbnQ2NClzdHJpbmciCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX21pbnRfbW9kZXJhdG9yX25mdF9yb3V0ZUAzIG1haW5fdHJhbnNmZXJfbmZ0X3JvdXRlQDQgbWFpbl91cGRhdGVfbWV0YWRhdGFfcm91dGVANSBtYWluX2J1cm5fbmZ0X3JvdXRlQDYgbWFpbl9nZXRfbmZ0X2luZm9fcm91dGVANyBtYWluX29wdF9pbl9hc3NldF9yb3V0ZUA4IG1haW5fc2V0X3ByaWNpbmdfcm91dGVAOSBtYWluX3JlY29yZF91c2FnZV9yb3V0ZUAxMAoKbWFpbl9hZnRlcl9pZl9lbHNlQDE3OgogICAgLy8gc21hcnRfY29udHJhY3RzL21vZGVyYXRvcl9uZnQvY29udHJhY3QucHk6NQogICAgLy8gY2xhc3MgTW9kZXJhdG9yTkZUKEFSQzRDb250cmFjdCk6CiAgICBwdXNoaW50IDAgLy8gMAogICAgcmV0dXJuCgptYWluX3JlY29yZF91c2FnZV9yb3V0ZUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9tb2RlcmF0b3JfbmZ0L2NvbnRyYWN0LnB5OjE5MAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1MDAxYjU1NzM2MTY3NjUyMDcyNjU2MzZmNzI2NDY1NjQyMDczNzU2MzYzNjU3MzczNjY3NTZjNmM3OQogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3NldF9wcmljaW5nX3JvdXRlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbW9kZXJhdG9yX25mdC9jb250cmFjdC5weToxNjIKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwMjI1MDcyNjk2MzY5NmU2NzIwNzM2NTc0MjA2NjZmNzIyMDYxNzM3MzY1NzQyMDczNzU2MzYzNjU3MzczNjY3NTZjNmM3OQogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX29wdF9pbl9hc3NldF9yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL21vZGVyYXRvcl9uZnQvY29udHJhY3QucHk6MTQyCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgcHVzaGJ5dGVzIDB4MTUxZjdjNzUwMDFlNGY3MDc0NjU2NDIwNjk2ZTIwNzQ2ZjIwNjE3MzczNjU3NDIwNzM3NTYzNjM2NTczNzM2Njc1NmM2Yzc5CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0X25mdF9pbmZvX3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbW9kZXJhdG9yX25mdC9jb250cmFjdC5weToxMjMKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwMWY0ZTQ2NTQyMDQ5NmU2NjZmMjA3MjY1NzQ3MjY5NjU3NjY1NjQyMDczNzU2MzYzNjU3MzczNjY3NTZjNmM3OQogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2J1cm5fbmZ0X3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbW9kZXJhdG9yX25mdC9jb250cmFjdC5weToxMDIKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwMTc0ZTQ2NTQyMDYyNzU3MjZlNjU2NDIwNzM3NTYzNjM2NTczNzM2Njc1NmM2Yzc5CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fdXBkYXRlX21ldGFkYXRhX3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbW9kZXJhdG9yX25mdC9jb250cmFjdC5weTo3OQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1MDAyYTRkNjU3NDYxNjQ2MTc0NjEyMDc1NzA2NDYxNzQ2NTY0MjA2NjZmNzIyMDYxNzM3MzY1NzQyMDQ5NDQyMDczNzU2MzYzNjU3MzczNjY3NTZjNmM3OQogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3RyYW5zZmVyX25mdF9yb3V0ZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL21vZGVyYXRvcl9uZnQvY29udHJhY3QucHk6NTIKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwMWM0ZTQ2NTQyMDc0NzI2MTZlNzM2NjY1NzI3MjY1NjQyMDczNzU2MzYzNjU3MzczNjY3NTZjNmM3OQogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX21pbnRfbW9kZXJhdG9yX25mdF9yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL21vZGVyYXRvcl9uZnQvY29udHJhY3QucHk6MTMKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvbW9kZXJhdG9yX25mdC9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBNb2RlcmF0b3JORlQoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA1CiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvbW9kZXJhdG9yX25mdC9jb250cmFjdC5weToxMwogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIG1pbnRfbW9kZXJhdG9yX25mdAogICAgaXRvYgogICAgcHVzaGJ5dGVzIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9tb2RlcmF0b3JfbmZ0L2NvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIE1vZGVyYXRvck5GVChBUkM0Q29udHJhY3QpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAxNwogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMubW9kZXJhdG9yX25mdC5jb250cmFjdC5Nb2RlcmF0b3JORlQubWludF9tb2RlcmF0b3JfbmZ0KG1vZGVyYXRvcl9uYW1lOiBieXRlcywgbW9kZXJhdG9yX2Rlc2NyaXB0aW9uOiBieXRlcywgZGFvX2lkOiBieXRlcywgbWV0YWRhdGFfdXJsOiBieXRlcywgdG90YWxfc3VwcGx5OiB1aW50NjQpIC0+IHVpbnQ2NDoKbWludF9tb2RlcmF0b3JfbmZ0OgogICAgLy8gc21hcnRfY29udHJhY3RzL21vZGVyYXRvcl9uZnQvY29udHJhY3QucHk6MTMtMjEKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIG1pbnRfbW9kZXJhdG9yX25mdCgKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIG1vZGVyYXRvcl9uYW1lOiBTdHJpbmcsCiAgICAvLyAgICAgbW9kZXJhdG9yX2Rlc2NyaXB0aW9uOiBTdHJpbmcsCiAgICAvLyAgICAgZGFvX2lkOiBTdHJpbmcsCiAgICAvLyAgICAgbWV0YWRhdGFfdXJsOiBTdHJpbmcsCiAgICAvLyAgICAgdG90YWxfc3VwcGx5OiBVSW50NjQsCiAgICAvLyApIC0+IFVJbnQ2NDoKICAgIHByb3RvIDUgMQogICAgLy8gc21hcnRfY29udHJhY3RzL21vZGVyYXRvcl9uZnQvY29udHJhY3QucHk6MzUtMzYKICAgIC8vICMgVmFsaWRhdGUgaW5wdXRzCiAgICAvLyBhc3NlcnQgdG90YWxfc3VwcGx5ID4gMCwgIlRvdGFsIHN1cHBseSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwIgogICAgZnJhbWVfZGlnIC0xCiAgICBhc3NlcnQgLy8gVG90YWwgc3VwcGx5IG11c3QgYmUgZ3JlYXRlciB0aGFuIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9tb2RlcmF0b3JfbmZ0L2NvbnRyYWN0LnB5OjQ3LTQ4CiAgICAvLyAjIEZvciBub3csIHJldHVybiBhIG1vY2sgYXNzZXQgSUQKICAgIC8vIGFzc2V0X2lkID0gVUludDY0KDEwMDAwMCkgKyBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgcHVzaGludCAxMDAwMDAgLy8gMTAwMDAwCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvbW9kZXJhdG9yX25mdC9jb250cmFjdC5weTo1MAogICAgLy8gcmV0dXJuIGFzc2V0X2lkCiAgICByZXRzdWIK", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [78, 123, 175, 223, 272, 313, 373, 419], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [482], "errorMessage": "Total supply must be greater than 0"}, {"pc": [474], "errorMessage": "can only call when creating"}, {"pc": [81, 126, 178, 226, 275, 316, 376, 422], "errorMessage": "can only call when not creating"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class MintModeratorNftArgs:
    """Dataclass for mint_moderator_nft arguments"""
    moderator_name: str
    moderator_description: str
    dao_id: str
    metadata_url: str
    total_supply: int

    @property
    def abi_method_signature(self) -> str:
        return "mint_moderator_nft(string,string,string,string,uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class TransferNftArgs:
    """Dataclass for transfer_nft arguments"""
    asset_id: int
    from_address: str
    to_address: str
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "transfer_nft(uint64,address,address,uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UpdateMetadataArgs:
    """Dataclass for update_metadata arguments"""
    asset_id: int
    new_metadata_url: str

    @property
    def abi_method_signature(self) -> str:
        return "update_metadata(uint64,string)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BurnNftArgs:
    """Dataclass for burn_nft arguments"""
    asset_id: int

    @property
    def abi_method_signature(self) -> str:
        return "burn_nft(uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetNftInfoArgs:
    """Dataclass for get_nft_info arguments"""
    asset_id: int

    @property
    def abi_method_signature(self) -> str:
        return "get_nft_info(uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class OptInAssetArgs:
    """Dataclass for opt_in_asset arguments"""
    asset_id: int

    @property
    def abi_method_signature(self) -> str:
        return "opt_in_asset(uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetPricingArgs:
    """Dataclass for set_pricing arguments"""
    asset_id: int
    monthly_price: int
    pay_per_use_price: int
    outright_price: int

    @property
    def abi_method_signature(self) -> str:
        return "set_pricing(uint64,uint64,uint64,uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RecordUsageArgs:
    """Dataclass for record_usage arguments"""
    asset_id: int
    usage_count: int

    @property
    def abi_method_signature(self) -> str:
        return "record_usage(uint64,uint64)string"


class ModeratorNftParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def mint_moderator_nft(
        self,
        args: tuple[str, str, str, str, int] | MintModeratorNftArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_moderator_nft(string,string,string,string,uint64)uint64",
            "args": method_args,
        }))

    def transfer_nft(
        self,
        args: tuple[int, str, str, int] | TransferNftArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer_nft(uint64,address,address,uint64)string",
            "args": method_args,
        }))

    def update_metadata(
        self,
        args: tuple[int, str] | UpdateMetadataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_metadata(uint64,string)string",
            "args": method_args,
        }))

    def burn_nft(
        self,
        args: tuple[int] | BurnNftArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "burn_nft(uint64)string",
            "args": method_args,
        }))

    def get_nft_info(
        self,
        args: tuple[int] | GetNftInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_nft_info(uint64)string",
            "args": method_args,
        }))

    def opt_in_asset(
        self,
        args: tuple[int] | OptInAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "opt_in_asset(uint64)string",
            "args": method_args,
        }))

    def set_pricing(
        self,
        args: tuple[int, int, int, int] | SetPricingArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_pricing(uint64,uint64,uint64,uint64)string",
            "args": method_args,
        }))

    def record_usage(
        self,
        args: tuple[int, int] | RecordUsageArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "record_usage(uint64,uint64)string",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class ModeratorNftCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def mint_moderator_nft(
        self,
        args: tuple[str, str, str, str, int] | MintModeratorNftArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_moderator_nft(string,string,string,string,uint64)uint64",
            "args": method_args,
        }))

    def transfer_nft(
        self,
        args: tuple[int, str, str, int] | TransferNftArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer_nft(uint64,address,address,uint64)string",
            "args": method_args,
        }))

    def update_metadata(
        self,
        args: tuple[int, str] | UpdateMetadataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_metadata(uint64,string)string",
            "args": method_args,
        }))

    def burn_nft(
        self,
        args: tuple[int] | BurnNftArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "burn_nft(uint64)string",
            "args": method_args,
        }))

    def get_nft_info(
        self,
        args: tuple[int] | GetNftInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_nft_info(uint64)string",
            "args": method_args,
        }))

    def opt_in_asset(
        self,
        args: tuple[int] | OptInAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "opt_in_asset(uint64)string",
            "args": method_args,
        }))

    def set_pricing(
        self,
        args: tuple[int, int, int, int] | SetPricingArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_pricing(uint64,uint64,uint64,uint64)string",
            "args": method_args,
        }))

    def record_usage(
        self,
        args: tuple[int, int] | RecordUsageArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "record_usage(uint64,uint64)string",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class ModeratorNftSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def mint_moderator_nft(
        self,
        args: tuple[str, str, str, str, int] | MintModeratorNftArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_moderator_nft(string,string,string,string,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def transfer_nft(
        self,
        args: tuple[int, str, str, int] | TransferNftArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer_nft(uint64,address,address,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def update_metadata(
        self,
        args: tuple[int, str] | UpdateMetadataArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_metadata(uint64,string)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def burn_nft(
        self,
        args: tuple[int] | BurnNftArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "burn_nft(uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_nft_info(
        self,
        args: tuple[int] | GetNftInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_nft_info(uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def opt_in_asset(
        self,
        args: tuple[int] | OptInAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "opt_in_asset(uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def set_pricing(
        self,
        args: tuple[int, int, int, int] | SetPricingArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_pricing(uint64,uint64,uint64,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def record_usage(
        self,
        args: tuple[int, int] | RecordUsageArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "record_usage(uint64,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class ModeratorNftState:
    """Methods to access state for the current ModeratorNFT app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

class ModeratorNftClient:
    """Client for interacting with ModeratorNFT smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = ModeratorNftParams(self.app_client)
        self.create_transaction = ModeratorNftCreateTransactionParams(self.app_client)
        self.send = ModeratorNftSend(self.app_client)
        self.state = ModeratorNftState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "ModeratorNftClient":
        return ModeratorNftClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "ModeratorNftClient":
        return ModeratorNftClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "ModeratorNftClient":
        return ModeratorNftClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "ModeratorNftComposer":
        return ModeratorNftComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["mint_moderator_nft(string,string,string,string,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["transfer_nft(uint64,address,address,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["update_metadata(uint64,string)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["burn_nft(uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_nft_info(uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["opt_in_asset(uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_pricing(uint64,uint64,uint64,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["record_usage(uint64,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int | str:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class ModeratorNftBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating ModeratorNft contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class ModeratorNftFactory(algokit_utils.TypedAppFactoryProtocol[ModeratorNftBareCallCreateParams, None, None]):
    """Factory for deploying and managing ModeratorNftClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = ModeratorNftFactoryParams(self.app_factory)
        self.create_transaction = ModeratorNftFactoryCreateTransaction(self.app_factory)
        self.send = ModeratorNftFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: ModeratorNftBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[ModeratorNftClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return ModeratorNftClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> ModeratorNftClient:
        """Get an app client by creator address and name"""
        return ModeratorNftClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> ModeratorNftClient:
        """Get an app client by app ID"""
        return ModeratorNftClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class ModeratorNftFactoryParams:
    """Parameters for creating transactions for ModeratorNft contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = ModeratorNftFactoryCreateParams(app_factory)
        self.update = ModeratorNftFactoryUpdateParams(app_factory)
        self.delete = ModeratorNftFactoryDeleteParams(app_factory)

class ModeratorNftFactoryCreateParams:
    """Parameters for 'create' operations of ModeratorNft contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def mint_moderator_nft(
        self,
        args: tuple[str, str, str, str, int] | MintModeratorNftArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the mint_moderator_nft(string,string,string,string,uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "mint_moderator_nft(string,string,string,string,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def transfer_nft(
        self,
        args: tuple[int, str, str, int] | TransferNftArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the transfer_nft(uint64,address,address,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "transfer_nft(uint64,address,address,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def update_metadata(
        self,
        args: tuple[int, str] | UpdateMetadataArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the update_metadata(uint64,string)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "update_metadata(uint64,string)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def burn_nft(
        self,
        args: tuple[int] | BurnNftArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the burn_nft(uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "burn_nft(uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_nft_info(
        self,
        args: tuple[int] | GetNftInfoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_nft_info(uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_nft_info(uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def opt_in_asset(
        self,
        args: tuple[int] | OptInAssetArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the opt_in_asset(uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "opt_in_asset(uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_pricing(
        self,
        args: tuple[int, int, int, int] | SetPricingArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_pricing(uint64,uint64,uint64,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_pricing(uint64,uint64,uint64,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def record_usage(
        self,
        args: tuple[int, int] | RecordUsageArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the record_usage(uint64,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "record_usage(uint64,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class ModeratorNftFactoryUpdateParams:
    """Parameters for 'update' operations of ModeratorNft contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class ModeratorNftFactoryDeleteParams:
    """Parameters for 'delete' operations of ModeratorNft contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class ModeratorNftFactoryCreateTransaction:
    """Create transactions for ModeratorNft contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = ModeratorNftFactoryCreateTransactionCreate(app_factory)


class ModeratorNftFactoryCreateTransactionCreate:
    """Create new instances of ModeratorNft contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class ModeratorNftFactorySend:
    """Send calls to ModeratorNft contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = ModeratorNftFactorySendCreate(app_factory)


class ModeratorNftFactorySendCreate:
    """Send create calls to ModeratorNft contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[ModeratorNftClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return ModeratorNftClient(result[0]), result[1]


class ModeratorNftComposer:
    """Composer for creating transaction groups for ModeratorNft contract calls"""

    def __init__(self, client: "ModeratorNftClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def mint_moderator_nft(
        self,
        args: tuple[str, str, str, str, int] | MintModeratorNftArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ModeratorNftComposer":
        self._composer.add_app_call_method_call(
            self.client.params.mint_moderator_nft(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "mint_moderator_nft(string,string,string,string,uint64)uint64", v
            )
        )
        return self

    def transfer_nft(
        self,
        args: tuple[int, str, str, int] | TransferNftArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ModeratorNftComposer":
        self._composer.add_app_call_method_call(
            self.client.params.transfer_nft(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "transfer_nft(uint64,address,address,uint64)string", v
            )
        )
        return self

    def update_metadata(
        self,
        args: tuple[int, str] | UpdateMetadataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ModeratorNftComposer":
        self._composer.add_app_call_method_call(
            self.client.params.update_metadata(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "update_metadata(uint64,string)string", v
            )
        )
        return self

    def burn_nft(
        self,
        args: tuple[int] | BurnNftArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ModeratorNftComposer":
        self._composer.add_app_call_method_call(
            self.client.params.burn_nft(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "burn_nft(uint64)string", v
            )
        )
        return self

    def get_nft_info(
        self,
        args: tuple[int] | GetNftInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ModeratorNftComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_nft_info(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_nft_info(uint64)string", v
            )
        )
        return self

    def opt_in_asset(
        self,
        args: tuple[int] | OptInAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ModeratorNftComposer":
        self._composer.add_app_call_method_call(
            self.client.params.opt_in_asset(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "opt_in_asset(uint64)string", v
            )
        )
        return self

    def set_pricing(
        self,
        args: tuple[int, int, int, int] | SetPricingArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ModeratorNftComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_pricing(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_pricing(uint64,uint64,uint64,uint64)string", v
            )
        )
        return self

    def record_usage(
        self,
        args: tuple[int, int] | RecordUsageArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ModeratorNftComposer":
        self._composer.add_app_call_method_call(
            self.client.params.record_usage(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "record_usage(uint64,uint64)string", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "ModeratorNftComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "ModeratorNftComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
