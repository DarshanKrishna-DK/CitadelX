{
  "version": 3,
  "sources": [
    "../../citadel_dao/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;AAmBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;;AAwLK;;AAAA;AAAA;AAAA;;AAAA;AAxLL;;;AAAA;;;AAwLK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AA1KL;;;AAAA;;;AA0KK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA7BA;;AAAA;AAAA;AAAA;;AAAA;AA7IL;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AA6IK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1BA;;AAAA;AAAA;AAAA;;AAAA;AAnHL;;;AAAA;;;AAAA;;;AAAA;;;AAmHK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AA1FL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AA0FK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA3BA;;AAAA;AAAA;AAAA;;AAAA;AA/DL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AA+DK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAzCL;;;AAAA;;;AAAA;;;AAAA;AAyCK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlCA;;AAAA;AAAA;AAAA;;AAAA;AAPL;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAOK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPL;;AAAA;;;;;;;;;AAOA;;;AAuBQ;;AAAA;AACA;;AAAA;AACO;;AAAwB;;AAAxB;AAAA;;;AAA+B;;AAAwB;;AAAxB;AAA/B;;;;AAAP;AAOO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAP;;;;;AAER;;;AAeQ;;AAAA;AAKO;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAP;AAER;;;AAuBsB;;;;;;;;;;;AAAA;;AAAA;AAA+B;;;AAA/B;AAAd;;AAAc;AAEP;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAP;AAER;;;AAsBqC;;AAAA;;;AAAA;AAAjB;;;AAAA;;;;;AACL;;;;;;;;;;;;;AAAA;AAAA;AAAoC;;;;;;AAApC;AAAA;;AAAA;AAAP;AAD2C;;;;;;;AAGnD;;;AAsBuB;;;AAAe;;AAAf;AAEf;AAER;;;AAoBQ;;AAAA;AAOO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAP;AAER;;;AAYe;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAP;AAER;;;AAYe;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock 0x151f7c75"
    },
    "12": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "14": {
      "op": "bz main_bare_routing@13",
      "stack_out": []
    },
    "17": {
      "op": "pushbytess 0xaa27cc9d 0xb41e1db6 0x987b9bfb 0x2d6a8b62 0x5987381c 0xac4a2736 0x5dfaab05 0xb28a12d8 // method \"create_dao(string,uint64,uint64,uint64,uint64)string\", method \"join_dao(string,uint64)string\", method \"create_proposal(string,string,string,uint64)string\", method \"vote(string,bool,uint64)string\", method \"execute_proposal(string,string)uint64\", method \"distribute_revenue(string,uint64,uint64)string\", method \"get_dao_info(string)string\", method \"get_proposal_status(string)string\"",
      "defined_out": [
        "Method(create_dao(string,uint64,uint64,uint64,uint64)string)",
        "Method(create_proposal(string,string,string,uint64)string)",
        "Method(distribute_revenue(string,uint64,uint64)string)",
        "Method(execute_proposal(string,string)uint64)",
        "Method(get_dao_info(string)string)",
        "Method(get_proposal_status(string)string)",
        "Method(join_dao(string,uint64)string)",
        "Method(vote(string,bool,uint64)string)"
      ],
      "stack_out": [
        "Method(create_dao(string,uint64,uint64,uint64,uint64)string)",
        "Method(join_dao(string,uint64)string)",
        "Method(create_proposal(string,string,string,uint64)string)",
        "Method(vote(string,bool,uint64)string)",
        "Method(execute_proposal(string,string)uint64)",
        "Method(distribute_revenue(string,uint64,uint64)string)",
        "Method(get_dao_info(string)string)",
        "Method(get_proposal_status(string)string)"
      ]
    },
    "59": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create_dao(string,uint64,uint64,uint64,uint64)string)",
        "Method(create_proposal(string,string,string,uint64)string)",
        "Method(distribute_revenue(string,uint64,uint64)string)",
        "Method(execute_proposal(string,string)uint64)",
        "Method(get_dao_info(string)string)",
        "Method(get_proposal_status(string)string)",
        "Method(join_dao(string,uint64)string)",
        "Method(vote(string,bool,uint64)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_dao(string,uint64,uint64,uint64,uint64)string)",
        "Method(join_dao(string,uint64)string)",
        "Method(create_proposal(string,string,string,uint64)string)",
        "Method(vote(string,bool,uint64)string)",
        "Method(execute_proposal(string,string)uint64)",
        "Method(distribute_revenue(string,uint64,uint64)string)",
        "Method(get_dao_info(string)string)",
        "Method(get_proposal_status(string)string)",
        "tmp%2#0"
      ]
    },
    "62": {
      "op": "match main_create_dao_route@3 main_join_dao_route@4 main_create_proposal_route@5 main_vote_route@6 main_execute_proposal_route@7 main_distribute_revenue_route@8 main_get_dao_info_route@9 main_get_proposal_status_route@10",
      "stack_out": []
    },
    "80": {
      "block": "main_after_if_else@17",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "81": {
      "op": "return",
      "stack_out": []
    },
    "82": {
      "block": "main_get_proposal_status_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "84": {
      "op": "!",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "85": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "86": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "88": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "89": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "92": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "95": {
      "callsub": "smart_contracts.citadel_dao.contract.CitadelDAO.get_proposal_status",
      "op": "callsub get_proposal_status",
      "defined_out": [
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0"
      ]
    },
    "98": {
      "op": "dup",
      "defined_out": [
        "to_encode%7#0",
        "to_encode%7#0 (copy)"
      ],
      "stack_out": [
        "to_encode%7#0",
        "to_encode%7#0 (copy)"
      ]
    },
    "99": {
      "op": "len",
      "defined_out": [
        "length%6#0",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "length%6#0"
      ]
    },
    "100": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "as_bytes%6#0"
      ]
    },
    "101": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%6#0",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "length_uint16%6#0"
      ]
    },
    "104": {
      "op": "swap",
      "stack_out": [
        "length_uint16%6#0",
        "to_encode%7#0"
      ]
    },
    "105": {
      "op": "concat",
      "defined_out": [
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_value%6#0"
      ]
    },
    "106": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "0x151f7c75"
      ]
    },
    "107": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%6#0"
      ]
    },
    "108": {
      "op": "concat",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "109": {
      "op": "log",
      "stack_out": []
    },
    "110": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "111": {
      "op": "return",
      "stack_out": []
    },
    "112": {
      "block": "main_get_dao_info_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "114": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "115": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "116": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "118": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "119": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "122": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "125": {
      "callsub": "smart_contracts.citadel_dao.contract.CitadelDAO.get_dao_info",
      "op": "callsub get_dao_info",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "128": {
      "op": "dup",
      "defined_out": [
        "to_encode%6#0",
        "to_encode%6#0 (copy)"
      ],
      "stack_out": [
        "to_encode%6#0",
        "to_encode%6#0 (copy)"
      ]
    },
    "129": {
      "op": "len",
      "defined_out": [
        "length%5#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "length%5#0"
      ]
    },
    "130": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "as_bytes%5#0"
      ]
    },
    "131": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%5#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "length_uint16%5#0"
      ]
    },
    "134": {
      "op": "swap",
      "stack_out": [
        "length_uint16%5#0",
        "to_encode%6#0"
      ]
    },
    "135": {
      "op": "concat",
      "defined_out": [
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "136": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "0x151f7c75"
      ]
    },
    "137": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%5#0"
      ]
    },
    "138": {
      "op": "concat",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "139": {
      "op": "log",
      "stack_out": []
    },
    "140": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "141": {
      "op": "return",
      "stack_out": []
    },
    "142": {
      "block": "main_distribute_revenue_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "144": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "145": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "146": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "148": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "149": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "152": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "155": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "158": {
      "op": "btoi",
      "defined_out": [
        "tmp%56#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "tmp%57#0"
      ]
    },
    "159": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%8#0",
        "tmp%56#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "tmp%57#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "162": {
      "op": "btoi",
      "defined_out": [
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0"
      ]
    },
    "163": {
      "callsub": "smart_contracts.citadel_dao.contract.CitadelDAO.distribute_revenue",
      "op": "callsub distribute_revenue",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "166": {
      "op": "dup",
      "defined_out": [
        "to_encode%5#0",
        "to_encode%5#0 (copy)"
      ],
      "stack_out": [
        "to_encode%5#0",
        "to_encode%5#0 (copy)"
      ]
    },
    "167": {
      "op": "len",
      "defined_out": [
        "length%4#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "length%4#0"
      ]
    },
    "168": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "as_bytes%4#0"
      ]
    },
    "169": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%4#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "length_uint16%4#0"
      ]
    },
    "172": {
      "op": "swap",
      "stack_out": [
        "length_uint16%4#0",
        "to_encode%5#0"
      ]
    },
    "173": {
      "op": "concat",
      "defined_out": [
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0"
      ]
    },
    "174": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "0x151f7c75"
      ]
    },
    "175": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%4#0"
      ]
    },
    "176": {
      "op": "concat",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "177": {
      "op": "log",
      "stack_out": []
    },
    "178": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "179": {
      "op": "return",
      "stack_out": []
    },
    "180": {
      "block": "main_execute_proposal_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "182": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "183": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "184": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "186": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "187": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "190": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "193": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%47#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "tmp%48#0"
      ]
    },
    "196": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%47#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "tmp%49#0"
      ]
    },
    "199": {
      "callsub": "smart_contracts.citadel_dao.contract.CitadelDAO.execute_proposal",
      "op": "callsub execute_proposal",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "202": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "203": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "204": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "205": {
      "op": "concat",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "206": {
      "op": "log",
      "stack_out": []
    },
    "207": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "208": {
      "op": "return",
      "stack_out": []
    },
    "209": {
      "block": "main_vote_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "211": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "212": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "213": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "215": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "216": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "219": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "222": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "225": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[8]%6#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "228": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "reinterpret_bytes[1]%0#0",
        "tmp%40#0"
      ]
    },
    "229": {
      "callsub": "smart_contracts.citadel_dao.contract.CitadelDAO.vote",
      "op": "callsub vote",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "232": {
      "op": "dup",
      "defined_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ],
      "stack_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ]
    },
    "233": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length%3#0"
      ]
    },
    "234": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "as_bytes%3#0"
      ]
    },
    "235": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length_uint16%3#0"
      ]
    },
    "238": {
      "op": "swap",
      "stack_out": [
        "length_uint16%3#0",
        "to_encode%3#0"
      ]
    },
    "239": {
      "op": "concat",
      "defined_out": [
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0"
      ]
    },
    "240": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "0x151f7c75"
      ]
    },
    "241": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ]
    },
    "242": {
      "op": "concat",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "243": {
      "op": "log",
      "stack_out": []
    },
    "244": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "245": {
      "op": "return",
      "stack_out": []
    },
    "246": {
      "block": "main_create_proposal_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "248": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "249": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "250": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "252": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "253": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "256": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "259": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "262": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%27#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0"
      ]
    },
    "265": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "268": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%31#0"
      ]
    },
    "271": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%31#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "274": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "275": {
      "callsub": "smart_contracts.citadel_dao.contract.CitadelDAO.create_proposal",
      "op": "callsub create_proposal",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "278": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "279": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%2#0"
      ]
    },
    "280": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%2#0"
      ]
    },
    "281": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%2#0"
      ]
    },
    "284": {
      "op": "swap",
      "stack_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ]
    },
    "285": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "286": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "287": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ]
    },
    "288": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "289": {
      "op": "log",
      "stack_out": []
    },
    "290": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "291": {
      "op": "return",
      "stack_out": []
    },
    "292": {
      "block": "main_join_dao_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "294": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "295": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "296": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "298": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "299": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "302": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "305": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "308": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "309": {
      "callsub": "smart_contracts.citadel_dao.contract.CitadelDAO.join_dao",
      "op": "callsub join_dao",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "312": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "313": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%1#0"
      ]
    },
    "314": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%1#0"
      ]
    },
    "315": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%1#0"
      ]
    },
    "318": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ]
    },
    "319": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "320": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "321": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "322": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "323": {
      "op": "log",
      "stack_out": []
    },
    "324": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "325": {
      "op": "return",
      "stack_out": []
    },
    "326": {
      "block": "main_create_dao_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "328": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "329": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "330": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "332": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "333": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "336": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "339": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "342": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "343": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "346": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "347": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "350": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "351": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "354": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "355": {
      "callsub": "smart_contracts.citadel_dao.contract.CitadelDAO.create_dao",
      "op": "callsub create_dao",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "358": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "359": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "360": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "361": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "364": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "365": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "366": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "367": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "368": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "369": {
      "op": "log",
      "stack_out": []
    },
    "370": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "371": {
      "op": "return",
      "stack_out": []
    },
    "372": {
      "block": "main_bare_routing@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "374": {
      "op": "bnz main_after_if_else@17",
      "stack_out": []
    },
    "377": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "379": {
      "op": "!",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "380": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "381": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "382": {
      "op": "return",
      "stack_out": []
    },
    "383": {
      "subroutine": "smart_contracts.citadel_dao.contract.CitadelDAO.create_dao",
      "params": {
        "dao_name#0": "bytes",
        "min_members#0": "uint64",
        "min_stake#0": "uint64",
        "voting_period#0": "uint64",
        "activation_threshold#0": "uint64"
      },
      "block": "create_dao",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "386": {
      "op": "frame_dig -4",
      "defined_out": [
        "min_members#0 (copy)"
      ],
      "stack_out": [
        "min_members#0 (copy)"
      ]
    },
    "388": {
      "error": "Minimum members must be greater than 0",
      "op": "assert // Minimum members must be greater than 0",
      "stack_out": []
    },
    "389": {
      "op": "frame_dig -3",
      "defined_out": [
        "min_stake#0 (copy)"
      ],
      "stack_out": [
        "min_stake#0 (copy)"
      ]
    },
    "391": {
      "error": "Minimum stake must be greater than 0",
      "op": "assert // Minimum stake must be greater than 0",
      "stack_out": []
    },
    "392": {
      "op": "frame_dig -1",
      "defined_out": [
        "activation_threshold#0 (copy)"
      ],
      "stack_out": [
        "activation_threshold#0 (copy)"
      ]
    },
    "394": {
      "op": "pushint 51 // 51",
      "defined_out": [
        "51",
        "activation_threshold#0 (copy)"
      ],
      "stack_out": [
        "activation_threshold#0 (copy)",
        "51"
      ]
    },
    "396": {
      "op": ">=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "397": {
      "op": "bz create_dao_bool_false@3",
      "stack_out": []
    },
    "400": {
      "op": "frame_dig -1",
      "stack_out": [
        "activation_threshold#0 (copy)"
      ]
    },
    "402": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "activation_threshold#0 (copy)"
      ],
      "stack_out": [
        "activation_threshold#0 (copy)",
        "100"
      ]
    },
    "404": {
      "op": "<=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "405": {
      "op": "bz create_dao_bool_false@3",
      "stack_out": []
    },
    "408": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "409": {
      "block": "create_dao_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "Threshold must be between 51-100",
      "op": "assert // Threshold must be between 51-100",
      "defined_out": [],
      "stack_out": []
    },
    "410": {
      "op": "pushbytes \"DAO created successfully with name: \"",
      "defined_out": [
        "\"DAO created successfully with name: \""
      ],
      "stack_out": [
        "\"DAO created successfully with name: \""
      ]
    },
    "448": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"DAO created successfully with name: \"",
        "dao_name#0 (copy)"
      ],
      "stack_out": [
        "\"DAO created successfully with name: \"",
        "dao_name#0 (copy)"
      ]
    },
    "450": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "451": {
      "retsub": true,
      "op": "retsub"
    },
    "452": {
      "block": "create_dao_bool_false@3",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "453": {
      "op": "b create_dao_bool_merge@4"
    },
    "456": {
      "subroutine": "smart_contracts.citadel_dao.contract.CitadelDAO.join_dao",
      "params": {
        "dao_id#0": "bytes",
        "stake_amount#0": "uint64"
      },
      "block": "join_dao",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "459": {
      "op": "frame_dig -1",
      "defined_out": [
        "stake_amount#0 (copy)"
      ],
      "stack_out": [
        "stake_amount#0 (copy)"
      ]
    },
    "461": {
      "error": "Stake amount must be greater than 0",
      "op": "assert // Stake amount must be greater than 0",
      "stack_out": []
    },
    "462": {
      "op": "pushbytes \"Successfully joined DAO: \"",
      "defined_out": [
        "\"Successfully joined DAO: \""
      ],
      "stack_out": [
        "\"Successfully joined DAO: \""
      ]
    },
    "489": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"Successfully joined DAO: \"",
        "dao_id#0 (copy)"
      ],
      "stack_out": [
        "\"Successfully joined DAO: \"",
        "dao_id#0 (copy)"
      ]
    },
    "491": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "492": {
      "retsub": true,
      "op": "retsub"
    },
    "493": {
      "subroutine": "smart_contracts.citadel_dao.contract.CitadelDAO.create_proposal",
      "params": {
        "dao_id#0": "bytes",
        "proposal_title#0": "bytes",
        "proposal_description#0": "bytes",
        "required_votes#0": "uint64"
      },
      "block": "create_proposal",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "496": {
      "op": "pushbytes \"proposal_\"",
      "defined_out": [
        "\"proposal_\""
      ],
      "stack_out": [
        "\"proposal_\""
      ]
    },
    "507": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"proposal_\"",
        "dao_id#0 (copy)"
      ],
      "stack_out": [
        "\"proposal_\"",
        "dao_id#0 (copy)"
      ]
    },
    "509": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "510": {
      "op": "pushbytes \"_\"",
      "defined_out": [
        "\"_\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"_\""
      ]
    },
    "513": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "514": {
      "op": "frame_dig -3",
      "defined_out": [
        "proposal_title#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "proposal_title#0 (copy)"
      ]
    },
    "516": {
      "op": "concat",
      "defined_out": [
        "proposal_id#0"
      ],
      "stack_out": [
        "proposal_id#0"
      ]
    },
    "517": {
      "op": "pushbytes \"Proposal created: \"",
      "defined_out": [
        "\"Proposal created: \"",
        "proposal_id#0"
      ],
      "stack_out": [
        "proposal_id#0",
        "\"Proposal created: \""
      ]
    },
    "537": {
      "op": "swap",
      "stack_out": [
        "\"Proposal created: \"",
        "proposal_id#0"
      ]
    },
    "538": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "539": {
      "retsub": true,
      "op": "retsub"
    },
    "540": {
      "subroutine": "smart_contracts.citadel_dao.contract.CitadelDAO.vote",
      "params": {
        "proposal_id#0": "bytes",
        "vote_yes#0": "bytes",
        "voting_power#0": "uint64"
      },
      "block": "vote",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "543": {
      "op": "frame_dig -2",
      "defined_out": [
        "vote_yes#0 (copy)"
      ],
      "stack_out": [
        "vote_yes#0 (copy)"
      ]
    },
    "545": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "vote_yes#0 (copy)"
      ],
      "stack_out": [
        "vote_yes#0 (copy)",
        "0x00"
      ]
    },
    "548": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "549": {
      "op": "bz vote_ternary_false@2",
      "stack_out": []
    },
    "552": {
      "op": "pushbytes \"yes\"",
      "defined_out": [
        "vote_type#0"
      ],
      "stack_out": [
        "vote_type#0"
      ]
    },
    "557": {
      "block": "vote_ternary_merge@3",
      "stack_in": [
        "vote_type#0"
      ],
      "op": "pushbytes \"Vote cast: \"",
      "defined_out": [
        "\"Vote cast: \""
      ],
      "stack_out": [
        "vote_type#0",
        "\"Vote cast: \""
      ]
    },
    "570": {
      "op": "swap",
      "defined_out": [
        "\"Vote cast: \"",
        "vote_type#0"
      ],
      "stack_out": [
        "\"Vote cast: \"",
        "vote_type#0"
      ]
    },
    "571": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "572": {
      "op": "pushbytes \" on \"",
      "defined_out": [
        "\" on \"",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\" on \""
      ]
    },
    "578": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "579": {
      "op": "frame_dig -3",
      "defined_out": [
        "proposal_id#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "proposal_id#0 (copy)"
      ]
    },
    "581": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "582": {
      "retsub": true,
      "op": "retsub"
    },
    "583": {
      "block": "vote_ternary_false@2",
      "stack_in": [],
      "op": "pushbytes \"no\"",
      "defined_out": [
        "vote_type#0"
      ],
      "stack_out": [
        "vote_type#0"
      ]
    },
    "587": {
      "op": "b vote_ternary_merge@3"
    },
    "590": {
      "subroutine": "smart_contracts.citadel_dao.contract.CitadelDAO.execute_proposal",
      "params": {
        "proposal_id#0": "bytes",
        "moderator_name#0": "bytes"
      },
      "block": "execute_proposal",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "593": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "596": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "1000",
        "tmp%0#0"
      ],
      "stack_out": [
        "1000",
        "tmp%0#0"
      ]
    },
    "598": {
      "op": "+",
      "defined_out": [
        "nft_asset_id#0"
      ],
      "stack_out": [
        "nft_asset_id#0"
      ]
    },
    "599": {
      "retsub": true,
      "op": "retsub"
    },
    "600": {
      "subroutine": "smart_contracts.citadel_dao.contract.CitadelDAO.distribute_revenue",
      "params": {
        "dao_id#0": "bytes",
        "total_revenue#0": "uint64",
        "member_count#0": "uint64"
      },
      "block": "distribute_revenue",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "603": {
      "op": "frame_dig -1",
      "defined_out": [
        "member_count#0 (copy)"
      ],
      "stack_out": [
        "member_count#0 (copy)"
      ]
    },
    "605": {
      "error": "No members to distribute to",
      "op": "assert // No members to distribute to",
      "stack_out": []
    },
    "606": {
      "op": "pushbytes \"Revenue distributed to DAO: \"",
      "defined_out": [
        "\"Revenue distributed to DAO: \""
      ],
      "stack_out": [
        "\"Revenue distributed to DAO: \""
      ]
    },
    "636": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"Revenue distributed to DAO: \"",
        "dao_id#0 (copy)"
      ],
      "stack_out": [
        "\"Revenue distributed to DAO: \"",
        "dao_id#0 (copy)"
      ]
    },
    "638": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "639": {
      "retsub": true,
      "op": "retsub"
    },
    "640": {
      "subroutine": "smart_contracts.citadel_dao.contract.CitadelDAO.get_dao_info",
      "params": {
        "dao_id#0": "bytes"
      },
      "block": "get_dao_info",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "643": {
      "op": "pushbytes \"DAO Info for: \"",
      "defined_out": [
        "\"DAO Info for: \""
      ],
      "stack_out": [
        "\"DAO Info for: \""
      ]
    },
    "659": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"DAO Info for: \"",
        "dao_id#0 (copy)"
      ],
      "stack_out": [
        "\"DAO Info for: \"",
        "dao_id#0 (copy)"
      ]
    },
    "661": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "662": {
      "retsub": true,
      "op": "retsub"
    },
    "663": {
      "subroutine": "smart_contracts.citadel_dao.contract.CitadelDAO.get_proposal_status",
      "params": {
        "proposal_id#0": "bytes"
      },
      "block": "get_proposal_status",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "666": {
      "op": "pushbytes \"Proposal status: \"",
      "defined_out": [
        "\"Proposal status: \""
      ],
      "stack_out": [
        "\"Proposal status: \""
      ]
    },
    "685": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"Proposal status: \"",
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "\"Proposal status: \"",
        "proposal_id#0 (copy)"
      ]
    },
    "687": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "688": {
      "retsub": true,
      "op": "retsub"
    }
  }
}