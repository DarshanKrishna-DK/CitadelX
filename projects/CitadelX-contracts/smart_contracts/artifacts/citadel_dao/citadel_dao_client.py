# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "desc": "Name of the DAO", "name": "dao_name"}, {"type": "uint64", "desc": "Minimum members required", "name": "min_members"}, {"type": "uint64", "desc": "Minimum stake per member in microAlgos", "name": "min_stake"}, {"type": "uint64", "desc": "Voting period in seconds", "name": "voting_period"}, {"type": "uint64", "desc": "Percentage needed to pass (0-100)", "name": "activation_threshold"}], "name": "create_dao", "returns": {"type": "string", "desc": "Success message with DAO ID"}, "desc": "Initialize a new DAO", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "desc": "ID of the DAO to join", "name": "dao_id"}, {"type": "uint64", "desc": "Amount to stake in microAlgos", "name": "stake_amount"}], "name": "join_dao", "returns": {"type": "string", "desc": "Success message"}, "desc": "Join an existing DAO with required stake", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "desc": "ID of the DAO", "name": "dao_id"}, {"type": "string", "desc": "Title of the proposal", "name": "proposal_title"}, {"type": "string", "desc": "Description", "name": "proposal_description"}, {"type": "uint64", "desc": "Number of votes required to pass", "name": "required_votes"}], "name": "create_proposal", "returns": {"type": "string", "desc": "Proposal ID"}, "desc": "Create a new proposal for voting", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "desc": "ID of the proposal", "name": "proposal_id"}, {"type": "bool", "desc": "True for yes, False for no", "name": "vote_yes"}, {"type": "uint64", "desc": "Voter's voting power", "name": "voting_power"}], "name": "vote", "returns": {"type": "string", "desc": "Success message with vote count"}, "desc": "Cast a vote on a proposal", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "desc": "ID of the passed proposal", "name": "proposal_id"}, {"type": "string", "desc": "Name for the AI moderator", "name": "moderator_name"}], "name": "execute_proposal", "returns": {"type": "uint64", "desc": "NFT Asset ID"}, "desc": "Execute a passed proposal and mint NFT for AI moderator", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "desc": "ID of the DAO", "name": "dao_id"}, {"type": "uint64", "desc": "Total revenue to distribute in microAlgos", "name": "total_revenue"}, {"type": "uint64", "desc": "Number of members", "name": "member_count"}], "name": "distribute_revenue", "returns": {"type": "string", "desc": "Success message"}, "desc": "Distribute revenue among DAO members", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "desc": "ID of the DAO", "name": "dao_id"}], "name": "get_dao_info", "returns": {"type": "string", "desc": "DAO information as string"}, "desc": "Get DAO information", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "desc": "ID of the proposal", "name": "proposal_id"}], "name": "get_proposal_status", "returns": {"type": "string", "desc": "Proposal status"}, "desc": "Get proposal voting status", "events": [], "readonly": false, "recommendations": {}}], "name": "CitadelDAO", "state": {"keys": {"box": {}, "global": {}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 0}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CiACAQAmAQQVH3x1MRtBAWOCCASqJ8ydBLQeHbYEmHub+wQtaotiBFmHOBwErEonNgRd+qsFBLKKEtg2GgCOCAD2ANQApgCBAGQAPgAgAAIjQzEZFEQxGEQ2GgFXAgCIAjVJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgCIAgBJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgIXNhoDF4gBskkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCAIgBhBYoTFCwIkMxGRREMRhENhoBVwIANhoCNhoDF4gBNEkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBBeIANdJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgIXiACQSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIANhoCFzYaAxc2GgQXNhoFF4gAGUkVFlcGAkxQKExQsCJDMRlA/tcxGBREIkOKBQGL/ESL/USL/4EzD0EANIv/gWQOQQAsIkSAJERBTyBjcmVhdGVkIHN1Y2Nlc3NmdWxseSB3aXRoIG5hbWU6IIv7UIkjQv/RigIBi/9EgBlTdWNjZXNzZnVsbHkgam9pbmVkIERBTzogi/5QiYoEAYAJcHJvcG9zYWxfi/xQgAFfUIv9UIASUHJvcG9zYWwgY3JlYXRlZDogTFCJigMBi/6AAQATQQAfgAN5ZXOAC1ZvdGUgY2FzdDogTFCABCBvbiBQi/1QiYACbm9C/9+KAgGB6AcyBwiJigMBi/9EgBxSZXZlbnVlIGRpc3RyaWJ1dGVkIHRvIERBTzogi/1QiYoBAYAOREFPIEluZm8gZm9yOiCL/1CJigEBgBFQcm9wb3NhbCBzdGF0dXM6IIv/UIk=", "clear": "CoEBQw=="}, "desc": "\n    CitadelDAO Smart Contract\n    \n    Manages DAO creation, membership, proposals, voting, and revenue distribution\n    ", "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [388], "errorMessage": "Minimum members must be greater than 0"}, {"pc": [391], "errorMessage": "Minimum stake must be greater than 0"}, {"pc": [605], "errorMessage": "No members to distribute to"}, {"pc": [85, 115, 145, 183, 212, 249, 295, 329], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [461], "errorMessage": "Stake amount must be greater than 0"}, {"pc": [409], "errorMessage": "Threshold must be between 51-100"}, {"pc": [380], "errorMessage": "can only call when creating"}, {"pc": [88, 118, 148, 186, 215, 252, 298, 332], "errorMessage": "can only call when not creating"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateDaoArgs:
    """Dataclass for create_dao arguments"""
    dao_name: str
    min_members: int
    min_stake: int
    voting_period: int
    activation_threshold: int

    @property
    def abi_method_signature(self) -> str:
        return "create_dao(string,uint64,uint64,uint64,uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class JoinDaoArgs:
    """Dataclass for join_dao arguments"""
    dao_id: str
    stake_amount: int

    @property
    def abi_method_signature(self) -> str:
        return "join_dao(string,uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateProposalArgs:
    """Dataclass for create_proposal arguments"""
    dao_id: str
    proposal_title: str
    proposal_description: str
    required_votes: int

    @property
    def abi_method_signature(self) -> str:
        return "create_proposal(string,string,string,uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class VoteArgs:
    """Dataclass for vote arguments"""
    proposal_id: str
    vote_yes: bool
    voting_power: int

    @property
    def abi_method_signature(self) -> str:
        return "vote(string,bool,uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ExecuteProposalArgs:
    """Dataclass for execute_proposal arguments"""
    proposal_id: str
    moderator_name: str

    @property
    def abi_method_signature(self) -> str:
        return "execute_proposal(string,string)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DistributeRevenueArgs:
    """Dataclass for distribute_revenue arguments"""
    dao_id: str
    total_revenue: int
    member_count: int

    @property
    def abi_method_signature(self) -> str:
        return "distribute_revenue(string,uint64,uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetDaoInfoArgs:
    """Dataclass for get_dao_info arguments"""
    dao_id: str

    @property
    def abi_method_signature(self) -> str:
        return "get_dao_info(string)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetProposalStatusArgs:
    """Dataclass for get_proposal_status arguments"""
    proposal_id: str

    @property
    def abi_method_signature(self) -> str:
        return "get_proposal_status(string)string"


class CitadelDaoParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create_dao(
        self,
        args: tuple[str, int, int, int, int] | CreateDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_dao(string,uint64,uint64,uint64,uint64)string",
            "args": method_args,
        }))

    def join_dao(
        self,
        args: tuple[str, int] | JoinDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "join_dao(string,uint64)string",
            "args": method_args,
        }))

    def create_proposal(
        self,
        args: tuple[str, str, str, int] | CreateProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_proposal(string,string,string,uint64)string",
            "args": method_args,
        }))

    def vote(
        self,
        args: tuple[str, bool, int] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote(string,bool,uint64)string",
            "args": method_args,
        }))

    def execute_proposal(
        self,
        args: tuple[str, str] | ExecuteProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "execute_proposal(string,string)uint64",
            "args": method_args,
        }))

    def distribute_revenue(
        self,
        args: tuple[str, int, int] | DistributeRevenueArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "distribute_revenue(string,uint64,uint64)string",
            "args": method_args,
        }))

    def get_dao_info(
        self,
        args: tuple[str] | GetDaoInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_dao_info(string)string",
            "args": method_args,
        }))

    def get_proposal_status(
        self,
        args: tuple[str] | GetProposalStatusArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_proposal_status(string)string",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class CitadelDaoCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create_dao(
        self,
        args: tuple[str, int, int, int, int] | CreateDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_dao(string,uint64,uint64,uint64,uint64)string",
            "args": method_args,
        }))

    def join_dao(
        self,
        args: tuple[str, int] | JoinDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "join_dao(string,uint64)string",
            "args": method_args,
        }))

    def create_proposal(
        self,
        args: tuple[str, str, str, int] | CreateProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_proposal(string,string,string,uint64)string",
            "args": method_args,
        }))

    def vote(
        self,
        args: tuple[str, bool, int] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote(string,bool,uint64)string",
            "args": method_args,
        }))

    def execute_proposal(
        self,
        args: tuple[str, str] | ExecuteProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "execute_proposal(string,string)uint64",
            "args": method_args,
        }))

    def distribute_revenue(
        self,
        args: tuple[str, int, int] | DistributeRevenueArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "distribute_revenue(string,uint64,uint64)string",
            "args": method_args,
        }))

    def get_dao_info(
        self,
        args: tuple[str] | GetDaoInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_dao_info(string)string",
            "args": method_args,
        }))

    def get_proposal_status(
        self,
        args: tuple[str] | GetProposalStatusArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_proposal_status(string)string",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class CitadelDaoSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create_dao(
        self,
        args: tuple[str, int, int, int, int] | CreateDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_dao(string,uint64,uint64,uint64,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def join_dao(
        self,
        args: tuple[str, int] | JoinDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "join_dao(string,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def create_proposal(
        self,
        args: tuple[str, str, str, int] | CreateProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_proposal(string,string,string,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def vote(
        self,
        args: tuple[str, bool, int] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote(string,bool,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def execute_proposal(
        self,
        args: tuple[str, str] | ExecuteProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "execute_proposal(string,string)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def distribute_revenue(
        self,
        args: tuple[str, int, int] | DistributeRevenueArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "distribute_revenue(string,uint64,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_dao_info(
        self,
        args: tuple[str] | GetDaoInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_dao_info(string)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_proposal_status(
        self,
        args: tuple[str] | GetProposalStatusArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_proposal_status(string)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class CitadelDaoState:
    """Methods to access state for the current CitadelDAO app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

class CitadelDaoClient:
    """Client for interacting with CitadelDAO smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = CitadelDaoParams(self.app_client)
        self.create_transaction = CitadelDaoCreateTransactionParams(self.app_client)
        self.send = CitadelDaoSend(self.app_client)
        self.state = CitadelDaoState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "CitadelDaoClient":
        return CitadelDaoClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "CitadelDaoClient":
        return CitadelDaoClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "CitadelDaoClient":
        return CitadelDaoClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "CitadelDaoComposer":
        return CitadelDaoComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_dao(string,uint64,uint64,uint64,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["join_dao(string,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_proposal(string,string,string,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["vote(string,bool,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["execute_proposal(string,string)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["distribute_revenue(string,uint64,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_dao_info(string)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_proposal_status(string)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int | str:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class CitadelDaoBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating CitadelDao contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class CitadelDaoFactory(algokit_utils.TypedAppFactoryProtocol[CitadelDaoBareCallCreateParams, None, None]):
    """Factory for deploying and managing CitadelDaoClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = CitadelDaoFactoryParams(self.app_factory)
        self.create_transaction = CitadelDaoFactoryCreateTransaction(self.app_factory)
        self.send = CitadelDaoFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: CitadelDaoBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[CitadelDaoClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return CitadelDaoClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> CitadelDaoClient:
        """Get an app client by creator address and name"""
        return CitadelDaoClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> CitadelDaoClient:
        """Get an app client by app ID"""
        return CitadelDaoClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class CitadelDaoFactoryParams:
    """Parameters for creating transactions for CitadelDao contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = CitadelDaoFactoryCreateParams(app_factory)
        self.update = CitadelDaoFactoryUpdateParams(app_factory)
        self.delete = CitadelDaoFactoryDeleteParams(app_factory)

class CitadelDaoFactoryCreateParams:
    """Parameters for 'create' operations of CitadelDao contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def create_dao(
        self,
        args: tuple[str, int, int, int, int] | CreateDaoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_dao(string,uint64,uint64,uint64,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_dao(string,uint64,uint64,uint64,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def join_dao(
        self,
        args: tuple[str, int] | JoinDaoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the join_dao(string,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "join_dao(string,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def create_proposal(
        self,
        args: tuple[str, str, str, int] | CreateProposalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_proposal(string,string,string,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_proposal(string,string,string,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def vote(
        self,
        args: tuple[str, bool, int] | VoteArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the vote(string,bool,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "vote(string,bool,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def execute_proposal(
        self,
        args: tuple[str, str] | ExecuteProposalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the execute_proposal(string,string)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "execute_proposal(string,string)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def distribute_revenue(
        self,
        args: tuple[str, int, int] | DistributeRevenueArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the distribute_revenue(string,uint64,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "distribute_revenue(string,uint64,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_dao_info(
        self,
        args: tuple[str] | GetDaoInfoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_dao_info(string)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_dao_info(string)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_proposal_status(
        self,
        args: tuple[str] | GetProposalStatusArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_proposal_status(string)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_proposal_status(string)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class CitadelDaoFactoryUpdateParams:
    """Parameters for 'update' operations of CitadelDao contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class CitadelDaoFactoryDeleteParams:
    """Parameters for 'delete' operations of CitadelDao contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class CitadelDaoFactoryCreateTransaction:
    """Create transactions for CitadelDao contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = CitadelDaoFactoryCreateTransactionCreate(app_factory)


class CitadelDaoFactoryCreateTransactionCreate:
    """Create new instances of CitadelDao contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class CitadelDaoFactorySend:
    """Send calls to CitadelDao contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = CitadelDaoFactorySendCreate(app_factory)


class CitadelDaoFactorySendCreate:
    """Send create calls to CitadelDao contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[CitadelDaoClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return CitadelDaoClient(result[0]), result[1]


class CitadelDaoComposer:
    """Composer for creating transaction groups for CitadelDao contract calls"""

    def __init__(self, client: "CitadelDaoClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def create_dao(
        self,
        args: tuple[str, int, int, int, int] | CreateDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CitadelDaoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_dao(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_dao(string,uint64,uint64,uint64,uint64)string", v
            )
        )
        return self

    def join_dao(
        self,
        args: tuple[str, int] | JoinDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CitadelDaoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.join_dao(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "join_dao(string,uint64)string", v
            )
        )
        return self

    def create_proposal(
        self,
        args: tuple[str, str, str, int] | CreateProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CitadelDaoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_proposal(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_proposal(string,string,string,uint64)string", v
            )
        )
        return self

    def vote(
        self,
        args: tuple[str, bool, int] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CitadelDaoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.vote(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "vote(string,bool,uint64)string", v
            )
        )
        return self

    def execute_proposal(
        self,
        args: tuple[str, str] | ExecuteProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CitadelDaoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.execute_proposal(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "execute_proposal(string,string)uint64", v
            )
        )
        return self

    def distribute_revenue(
        self,
        args: tuple[str, int, int] | DistributeRevenueArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CitadelDaoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.distribute_revenue(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "distribute_revenue(string,uint64,uint64)string", v
            )
        )
        return self

    def get_dao_info(
        self,
        args: tuple[str] | GetDaoInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CitadelDaoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_dao_info(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_dao_info(string)string", v
            )
        )
        return self

    def get_proposal_status(
        self,
        args: tuple[str] | GetProposalStatusArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "CitadelDaoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_proposal_status(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_proposal_status(string)string", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "CitadelDaoComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "CitadelDaoComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
