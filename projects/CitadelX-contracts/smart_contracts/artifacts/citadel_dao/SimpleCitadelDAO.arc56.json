{
    "name": "SimpleCitadelDAO",
    "structs": {},
    "methods": [
        {
            "name": "create_dao",
            "args": [
                {
                    "type": "string",
                    "name": "name",
                    "desc": "DAO name"
                },
                {
                    "type": "string",
                    "name": "description",
                    "desc": "DAO description"
                },
                {
                    "type": "uint64",
                    "name": "min_stake",
                    "desc": "Minimum stake required (microAlgos)"
                },
                {
                    "type": "uint64",
                    "name": "voting_period",
                    "desc": "Voting period in seconds"
                },
                {
                    "type": "uint64",
                    "name": "quorum_threshold",
                    "desc": "Quorum percentage (1-100)"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "Success message"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Create and initialize a new DAO",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "join_dao",
            "args": [
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "Payment transaction with minimum stake"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "Success message"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Join the DAO by paying the minimum stake",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "leave_dao",
            "args": [
                {
                    "type": "uint64",
                    "name": "refund_amount",
                    "desc": "Amount to refund (microAlgos)"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "Success message"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Leave the DAO and get refund",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "emergency_pause",
            "args": [],
            "returns": {
                "type": "string",
                "desc": "Success message"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Emergency pause - only creator can call",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "emergency_unpause",
            "args": [],
            "returns": {
                "type": "string",
                "desc": "Success message"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Emergency unpause - only creator can call",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_dao_info",
            "args": [],
            "returns": {
                "type": "(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)",
                "desc": "Tuple with DAO information"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get DAO information (read-only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw_treasury",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount",
                    "desc": "Amount to withdraw (microAlgos)"
                },
                {
                    "type": "account",
                    "name": "recipient",
                    "desc": "Recipient address"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "Success message"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraw from treasury - only creator can call",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_treasury_balance",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "Treasury balance in microAlgos"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get current treasury balance",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "is_dao_active",
            "args": [],
            "returns": {
                "type": "bool",
                "desc": "True if DAO is active, False otherwise"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Check if DAO is active",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    Simplified CitadelX DAO Contract for testing and deployment\n    \n    This contract provides basic DAO functionality:\n    - DAO creation and initialization\n    - Member management (join/leave)\n    - Basic treasury management\n    - Emergency controls\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 8,
                "bytes": 3
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "dao_name": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "ZGFvX25hbWU="
                },
                "dao_description": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "ZGFvX2Rlc2NyaXB0aW9u"
                },
                "creator": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Y3JlYXRvcg=="
                },
                "min_stake": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWluX3N0YWtl"
                },
                "voting_period": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dm90aW5nX3BlcmlvZA=="
                },
                "quorum_threshold": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cXVvcnVtX3RocmVzaG9sZA=="
                },
                "member_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWVtYmVyX2NvdW50"
                },
                "total_stake": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfc3Rha2U="
                },
                "treasury_balance": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dHJlYXN1cnlfYmFsYW5jZQ=="
                },
                "is_initialized": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "aXNfaW5pdGlhbGl6ZWQ="
                },
                "is_active": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "aXNfYWN0aXZl"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        600
                    ],
                    "errorMessage": "DAO not active"
                },
                {
                    "pc": [
                        592,
                        693
                    ],
                    "errorMessage": "DAO not initialized"
                },
                {
                    "pc": [
                        707,
                        976
                    ],
                    "errorMessage": "Insufficient treasury balance"
                },
                {
                    "pc": [
                        481
                    ],
                    "errorMessage": "Minimum stake must be at least 0.1 ALGO"
                },
                {
                    "pc": [
                        699
                    ],
                    "errorMessage": "No members to remove"
                },
                {
                    "pc": [
                        233,
                        249,
                        265,
                        299,
                        315,
                        339,
                        363,
                        391,
                        425
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        802
                    ],
                    "errorMessage": "Only creator can pause DAO"
                },
                {
                    "pc": [
                        828
                    ],
                    "errorMessage": "Only creator can unpause DAO"
                },
                {
                    "pc": [
                        966
                    ],
                    "errorMessage": "Only creator can withdraw"
                },
                {
                    "pc": [
                        608
                    ],
                    "errorMessage": "Payment must be to DAO contract"
                },
                {
                    "pc": [
                        629
                    ],
                    "errorMessage": "Payment must meet minimum stake"
                },
                {
                    "pc": [
                        616
                    ],
                    "errorMessage": "Payment sender must match caller"
                },
                {
                    "pc": [
                        503
                    ],
                    "errorMessage": "Quorum threshold must be between 1-100%"
                },
                {
                    "pc": [
                        488
                    ],
                    "errorMessage": "Voting period must be at least 1 hour"
                },
                {
                    "pc": [
                        429
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        236,
                        252,
                        268,
                        302,
                        318,
                        342,
                        366,
                        394
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        800,
                        826,
                        862,
                        964
                    ],
                    "errorMessage": "check self.creator exists"
                },
                {
                    "pc": [
                        857
                    ],
                    "errorMessage": "check self.dao_description exists"
                },
                {
                    "pc": [
                        852
                    ],
                    "errorMessage": "check self.dao_name exists"
                },
                {
                    "pc": [
                        597,
                        900,
                        1075
                    ],
                    "errorMessage": "check self.is_active exists"
                },
                {
                    "pc": [
                        589,
                        690,
                        1065
                    ],
                    "errorMessage": "check self.is_initialized exists"
                },
                {
                    "pc": [
                        633,
                        697,
                        884
                    ],
                    "errorMessage": "check self.member_count exists"
                },
                {
                    "pc": [
                        625,
                        867
                    ],
                    "errorMessage": "check self.min_stake exists"
                },
                {
                    "pc": [
                        879
                    ],
                    "errorMessage": "check self.quorum_threshold exists"
                },
                {
                    "pc": [
                        642,
                        753,
                        889
                    ],
                    "errorMessage": "check self.total_stake exists"
                },
                {
                    "pc": [
                        652,
                        703,
                        763,
                        894,
                        970,
                        1058
                    ],
                    "errorMessage": "check self.treasury_balance exists"
                },
                {
                    "pc": [
                        873
                    ],
                    "errorMessage": "check self.voting_period exists"
                },
                {
                    "pc": [
                        404
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAAEmDBB0cmVhc3VyeV9iYWxhbmNlBBUffHUMbWVtYmVyX2NvdW50C3RvdGFsX3N0YWtlCWlzX2FjdGl2ZQdjcmVhdG9yDmlzX2luaXRpYWxpemVkCW1pbl9zdGFrZQhkYW9fbmFtZQ9kYW9fZGVzY3JpcHRpb24Ndm90aW5nX3BlcmlvZBBxdW9ydW1fdGhyZXNob2xkMRtBAEaCCQS6hrFUBGWEYYwECRfXTQS0YxsDBA/p63EERfkp8gTdrJPPBOEjFGkE8js2fTYaAI4JAMIAoACEAGwAVABEACIAEgACIkMxGRREMRhEiAM1KUxQsCNDMRkURDEYRIgDHylMULAjQzEZFEQxGEQ2GgEXNhoCF8AciAKhSRUWVwYCTFApTFCwI0MxGRREMRhEiAIeKUxQsCNDMRkURDEYRIgB8kkVFlcGAkxQKUxQsCNDMRkURDEYRIgBwEkVFlcGAkxQKUxQsCNDMRkURDEYRDYaAReIATVJFRZXBgJMUClMULAjQzEZFEQxGEQxFiMJSTgQIxJEiACuSRUWVwYCTFApTFCwI0MxGRREMRgURDYaAVcCADYaAlcCADYaAxc2GgQXNhoFF4gADkkVFlcGAkxQKUxQsCNDigUBi/2BoI0GD0SL/oGQHA9Ei/9BAFSL/4FkDkEATCNEJwiL+2cnCYv8ZycFMQBnJweL/WcnCov+ZycLi/9nKiJnKyJnKCJnJwYjZycEI2eAGERBTyBjcmVhdGVkIHN1Y2Nlc3NmdWxseYkiQv+xigEBIicGZUQjEkQiJwRlRCMSRIv/OAcyChJEi/84ADEAEkSL/zgIIicHZURLAQ5EIiplRCMIKkxnIitlREsBCCtMZyIoZUQIKExngBdTdWNjZXNzZnVsbHkgam9pbmVkIERBT4mKAQEiJwZlRCMSRCIqZURJRCIoZUSL/w9EsTEAgBFEQU8gbWVtYmVyIHJlZnVuZLIFi/+yCLIHI7IQIrIBsyMJKkxnIitlRIv/CStMZyIoZUSL/wkoTGeAFVN1Y2Nlc3NmdWxseSBsZWZ0IERBT4kxACInBWVEEkQnBCJngApEQU8gcGF1c2VkiTEAIicFZUQSRCcEI2eADERBTyB1bnBhdXNlZIkiJwhlRCInCWVEIicFZUQiJwdlRBYiJwplRBYiJwtlRBYiKmVEFiIrZUQWIihlRBYiJwRlRCMSgAEAIk8CVEsJFYFVCBZXBgKAAgBVTFBPCFBPB1BPBlBPBVBPBFBPA1BPAlBMUE8CUExQiYoCATEAIicFZUQSRCIoZUSL/ksBDkSxgBNUcmVhc3VyeSB3aXRoZHJhd2FssgWL/rIIi/+yByOyECKyAbOL/gkoTGeAHlRyZWFzdXJ5IHdpdGhkcmF3YWwgc3VjY2Vzc2Z1bIkiKGVEFokiJwZlRCMSQQATIicEZUQjEkEACSOAAQAiTwJUiSJC//Q=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}