# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": [], "create": ["NoOp"]}, "args": [{"type": "string", "desc": "DAO name", "name": "name"}, {"type": "string", "desc": "DAO description", "name": "description"}, {"type": "uint64", "desc": "Minimum stake required (microAlgos)", "name": "min_stake"}, {"type": "uint64", "desc": "Voting period in seconds", "name": "voting_period"}, {"type": "uint64", "desc": "Quorum percentage (1-100)", "name": "quorum_threshold"}], "name": "create_dao", "returns": {"type": "string", "desc": "Success message"}, "desc": "Create and initialize a new DAO", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "desc": "Payment transaction with minimum stake", "name": "payment"}], "name": "join_dao", "returns": {"type": "string", "desc": "Success message"}, "desc": "Join the DAO by paying the minimum stake", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "Amount to refund (microAlgos)", "name": "refund_amount"}], "name": "leave_dao", "returns": {"type": "string", "desc": "Success message"}, "desc": "Leave the DAO and get refund", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "emergency_pause", "returns": {"type": "string", "desc": "Success message"}, "desc": "Emergency pause - only creator can call", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "emergency_unpause", "returns": {"type": "string", "desc": "Success message"}, "desc": "Emergency unpause - only creator can call", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_dao_info", "returns": {"type": "(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)", "desc": "Tuple with DAO information"}, "desc": "Get DAO information (read-only)", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "Amount to withdraw (microAlgos)", "name": "amount"}, {"type": "account", "desc": "Recipient address", "name": "recipient"}], "name": "withdraw_treasury", "returns": {"type": "string", "desc": "Success message"}, "desc": "Withdraw from treasury - only creator can call", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_treasury_balance", "returns": {"type": "uint64", "desc": "Treasury balance in microAlgos"}, "desc": "Get current treasury balance", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "is_dao_active", "returns": {"type": "bool", "desc": "True if DAO is active, False otherwise"}, "desc": "Check if DAO is active", "events": [], "readonly": true, "recommendations": {}}], "name": "SimpleCitadelDAO", "state": {"keys": {"box": {}, "global": {"dao_name": {"key": "ZGFvX25hbWU=", "keyType": "AVMString", "valueType": "AVMBytes"}, "dao_description": {"key": "ZGFvX2Rlc2NyaXB0aW9u", "keyType": "AVMString", "valueType": "AVMBytes"}, "creator": {"key": "Y3JlYXRvcg==", "keyType": "AVMString", "valueType": "AVMBytes"}, "min_stake": {"key": "bWluX3N0YWtl", "keyType": "AVMString", "valueType": "AVMUint64"}, "voting_period": {"key": "dm90aW5nX3BlcmlvZA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "quorum_threshold": {"key": "cXVvcnVtX3RocmVzaG9sZA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "member_count": {"key": "bWVtYmVyX2NvdW50", "keyType": "AVMString", "valueType": "AVMUint64"}, "total_stake": {"key": "dG90YWxfc3Rha2U=", "keyType": "AVMString", "valueType": "AVMUint64"}, "treasury_balance": {"key": "dHJlYXN1cnlfYmFsYW5jZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "is_initialized": {"key": "aXNfaW5pdGlhbGl6ZWQ=", "keyType": "AVMString", "valueType": "AVMUint64"}, "is_active": {"key": "aXNfYWN0aXZl", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 3, "ints": 8}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CiACAAEmDBB0cmVhc3VyeV9iYWxhbmNlBBUffHUMbWVtYmVyX2NvdW50C3RvdGFsX3N0YWtlCWlzX2FjdGl2ZQdjcmVhdG9yDmlzX2luaXRpYWxpemVkCW1pbl9zdGFrZQhkYW9fbmFtZQ9kYW9fZGVzY3JpcHRpb24Ndm90aW5nX3BlcmlvZBBxdW9ydW1fdGhyZXNob2xkMRtBAEaCCQS6hrFUBGWEYYwECRfXTQS0YxsDBA/p63EERfkp8gTdrJPPBOEjFGkE8js2fTYaAI4JAMIAoACEAGwAVABEACIAEgACIkMxGRREMRhEiAM1KUxQsCNDMRkURDEYRIgDHylMULAjQzEZFEQxGEQ2GgEXNhoCF8AciAKhSRUWVwYCTFApTFCwI0MxGRREMRhEiAIeKUxQsCNDMRkURDEYRIgB8kkVFlcGAkxQKUxQsCNDMRkURDEYRIgBwEkVFlcGAkxQKUxQsCNDMRkURDEYRDYaAReIATVJFRZXBgJMUClMULAjQzEZFEQxGEQxFiMJSTgQIxJEiACuSRUWVwYCTFApTFCwI0MxGRREMRgURDYaAVcCADYaAlcCADYaAxc2GgQXNhoFF4gADkkVFlcGAkxQKUxQsCNDigUBi/2BoI0GD0SL/oGQHA9Ei/9BAFSL/4FkDkEATCNEJwiL+2cnCYv8ZycFMQBnJweL/WcnCov+ZycLi/9nKiJnKyJnKCJnJwYjZycEI2eAGERBTyBjcmVhdGVkIHN1Y2Nlc3NmdWxseYkiQv+xigEBIicGZUQjEkQiJwRlRCMSRIv/OAcyChJEi/84ADEAEkSL/zgIIicHZURLAQ5EIiplRCMIKkxnIitlREsBCCtMZyIoZUQIKExngBdTdWNjZXNzZnVsbHkgam9pbmVkIERBT4mKAQEiJwZlRCMSRCIqZURJRCIoZUSL/w9EsTEAgBFEQU8gbWVtYmVyIHJlZnVuZLIFi/+yCLIHI7IQIrIBsyMJKkxnIitlRIv/CStMZyIoZUSL/wkoTGeAFVN1Y2Nlc3NmdWxseSBsZWZ0IERBT4kxACInBWVEEkQnBCJngApEQU8gcGF1c2VkiTEAIicFZUQSRCcEI2eADERBTyB1bnBhdXNlZIkiJwhlRCInCWVEIicFZUQiJwdlRBYiJwplRBYiJwtlRBYiKmVEFiIrZUQWIihlRBYiJwRlRCMSgAEAIk8CVEsJFYFVCBZXBgKAAgBVTFBPCFBPB1BPBlBPBVBPBFBPA1BPAlBMUE8CUExQiYoCATEAIicFZUQSRCIoZUSL/ksBDkSxgBNUcmVhc3VyeSB3aXRoZHJhd2FssgWL/rIIi/+yByOyECKyAbOL/gkoTGeAHlRyZWFzdXJ5IHdpdGhkcmF3YWwgc3VjY2Vzc2Z1bIkiKGVEFokiJwZlRCMSQQATIicEZUQjEkEACSOAAQAiTwJUiSJC//Q=", "clear": "CoEBQw=="}, "desc": "\n    Simplified CitadelX DAO Contract for testing and deployment\n    \n    This contract provides basic DAO functionality:\n    - DAO creation and initialization\n    - Member management (join/leave)\n    - Basic treasury management\n    - Emergency controls\n    ", "events": [], "networks": {}, "source": {"approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMuY2l0YWRlbF9kYW8uY29udHJhY3QuU2ltcGxlQ2l0YWRlbERBTy5fX2FsZ29weV9lbnRyeXBvaW50X3dpdGhfaW5pdCgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEKICAgIGJ5dGVjYmxvY2sgInRyZWFzdXJ5X2JhbGFuY2UiIDB4MTUxZjdjNzUgIm1lbWJlcl9jb3VudCIgInRvdGFsX3N0YWtlIiAiaXNfYWN0aXZlIiAiY3JlYXRvciIgImlzX2luaXRpYWxpemVkIiAibWluX3N0YWtlIiAiZGFvX25hbWUiICJkYW9fZGVzY3JpcHRpb24iICJ2b3RpbmdfcGVyaW9kIiAicXVvcnVtX3RocmVzaG9sZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToxOQogICAgLy8gY2xhc3MgU2ltcGxlQ2l0YWRlbERBTyhBUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYWZ0ZXJfaWZfZWxzZUAxNAogICAgcHVzaGJ5dGVzcyAweGJhODZiMTU0IDB4NjU4NDYxOGMgMHgwOTE3ZDc0ZCAweGI0NjMxYjAzIDB4MGZlOWViNzEgMHg0NWY5MjlmMiAweGRkYWM5M2NmIDB4ZTEyMzE0NjkgMHhmMjNiMzY3ZCAvLyBtZXRob2QgImNyZWF0ZV9kYW8oc3RyaW5nLHN0cmluZyx1aW50NjQsdWludDY0LHVpbnQ2NClzdHJpbmciLCBtZXRob2QgImpvaW5fZGFvKHBheSlzdHJpbmciLCBtZXRob2QgImxlYXZlX2Rhbyh1aW50NjQpc3RyaW5nIiwgbWV0aG9kICJlbWVyZ2VuY3lfcGF1c2UoKXN0cmluZyIsIG1ldGhvZCAiZW1lcmdlbmN5X3VucGF1c2UoKXN0cmluZyIsIG1ldGhvZCAiZ2V0X2Rhb19pbmZvKCkoc3RyaW5nLHN0cmluZyxhZGRyZXNzLHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LGJvb2wpIiwgbWV0aG9kICJ3aXRoZHJhd190cmVhc3VyeSh1aW50NjQsYWNjb3VudClzdHJpbmciLCBtZXRob2QgImdldF90cmVhc3VyeV9iYWxhbmNlKCl1aW50NjQiLCBtZXRob2QgImlzX2Rhb19hY3RpdmUoKWJvb2wiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2NyZWF0ZV9kYW9fcm91dGVANSBtYWluX2pvaW5fZGFvX3JvdXRlQDYgbWFpbl9sZWF2ZV9kYW9fcm91dGVANyBtYWluX2VtZXJnZW5jeV9wYXVzZV9yb3V0ZUA4IG1haW5fZW1lcmdlbmN5X3VucGF1c2Vfcm91dGVAOSBtYWluX2dldF9kYW9faW5mb19yb3V0ZUAxMCBtYWluX3dpdGhkcmF3X3RyZWFzdXJ5X3JvdXRlQDExIG1haW5fZ2V0X3RyZWFzdXJ5X2JhbGFuY2Vfcm91dGVAMTIgbWFpbl9pc19kYW9fYWN0aXZlX3JvdXRlQDEzCgptYWluX2FmdGVyX2lmX2Vsc2VAMTQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MTkKICAgIC8vIGNsYXNzIFNpbXBsZUNpdGFkZWxEQU8oQVJDNENvbnRyYWN0KToKICAgIGludGNfMCAvLyAwCiAgICByZXR1cm4KCm1haW5faXNfZGFvX2FjdGl2ZV9yb3V0ZUAxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToyNDYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGlzX2Rhb19hY3RpdmUKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0X3RyZWFzdXJ5X2JhbGFuY2Vfcm91dGVAMTI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MjM2CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBnZXRfdHJlYXN1cnlfYmFsYW5jZQogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl93aXRoZHJhd190cmVhc3VyeV9yb3V0ZUAxMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToyMDkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MTkKICAgIC8vIGNsYXNzIFNpbXBsZUNpdGFkZWxEQU8oQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIHR4bmFzIEFjY291bnRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MjA5CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgd2l0aGRyYXdfdHJlYXN1cnkKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2dldF9kYW9faW5mb19yb3V0ZUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToxNzcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGdldF9kYW9faW5mbwogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9lbWVyZ2VuY3lfdW5wYXVzZV9yb3V0ZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjE2MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZW1lcmdlbmN5X3VucGF1c2UKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2VtZXJnZW5jeV9wYXVzZV9yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjE0OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZW1lcmdlbmN5X3BhdXNlCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9sZWF2ZV9kYW9fcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToxMTkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MTkKICAgIC8vIGNsYXNzIFNpbXBsZUNpdGFkZWxEQU8oQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToxMTkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBsZWF2ZV9kYW8KICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2pvaW5fZGFvX3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6OTIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MTkKICAgIC8vIGNsYXNzIFNpbXBsZUNpdGFkZWxEQU8oQVJDNENvbnRyYWN0KToKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18xIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjkyCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgam9pbl9kYW8KICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2NyZWF0ZV9kYW9fcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weTo0OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjE5CiAgICAvLyBjbGFzcyBTaW1wbGVDaXRhZGVsREFPKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDUKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weTo0OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICBjYWxsc3ViIGNyZWF0ZV9kYW8KICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzLmNpdGFkZWxfZGFvLmNvbnRyYWN0LlNpbXBsZUNpdGFkZWxEQU8uY3JlYXRlX2RhbyhuYW1lOiBieXRlcywgZGVzY3JpcHRpb246IGJ5dGVzLCBtaW5fc3Rha2U6IHVpbnQ2NCwgdm90aW5nX3BlcmlvZDogdWludDY0LCBxdW9ydW1fdGhyZXNob2xkOiB1aW50NjQpIC0+IGJ5dGVzOgpjcmVhdGVfZGFvOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjQ4LTU2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIC8vIGRlZiBjcmVhdGVfZGFvKAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgbmFtZTogU3RyaW5nLAogICAgLy8gICAgIGRlc2NyaXB0aW9uOiBTdHJpbmcsCiAgICAvLyAgICAgbWluX3N0YWtlOiBVSW50NjQsCiAgICAvLyAgICAgdm90aW5nX3BlcmlvZDogVUludDY0LAogICAgLy8gICAgIHF1b3J1bV90aHJlc2hvbGQ6IFVJbnQ2NCwKICAgIC8vICkgLT4gU3RyaW5nOgogICAgcHJvdG8gNSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6NzAtNzEKICAgIC8vICMgVmFsaWRhdGUgcGFyYW1ldGVycwogICAgLy8gYXNzZXJ0IG1pbl9zdGFrZSA+PSAxMDBfMDAwLCAiTWluaW11bSBzdGFrZSBtdXN0IGJlIGF0IGxlYXN0IDAuMSBBTEdPIgogICAgZnJhbWVfZGlnIC0zCiAgICBwdXNoaW50IDEwMDAwMCAvLyAxMDAwMDAKICAgID49CiAgICBhc3NlcnQgLy8gTWluaW11bSBzdGFrZSBtdXN0IGJlIGF0IGxlYXN0IDAuMSBBTEdPCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6NzIKICAgIC8vIGFzc2VydCB2b3RpbmdfcGVyaW9kID49IDM2MDAsICJWb3RpbmcgcGVyaW9kIG11c3QgYmUgYXQgbGVhc3QgMSBob3VyIgogICAgZnJhbWVfZGlnIC0yCiAgICBwdXNoaW50IDM2MDAgLy8gMzYwMAogICAgPj0KICAgIGFzc2VydCAvLyBWb3RpbmcgcGVyaW9kIG11c3QgYmUgYXQgbGVhc3QgMSBob3VyCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6NzMKICAgIC8vIGFzc2VydCAxIDw9IHF1b3J1bV90aHJlc2hvbGQgPD0gMTAwLCAiUXVvcnVtIHRocmVzaG9sZCBtdXN0IGJlIGJldHdlZW4gMS0xMDAlIgogICAgZnJhbWVfZGlnIC0xCiAgICBieiBjcmVhdGVfZGFvX2Jvb2xfZmFsc2VAMwogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDEwMCAvLyAxMDAKICAgIDw9CiAgICBieiBjcmVhdGVfZGFvX2Jvb2xfZmFsc2VAMwogICAgaW50Y18xIC8vIDEKCmNyZWF0ZV9kYW9fYm9vbF9tZXJnZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjczCiAgICAvLyBhc3NlcnQgMSA8PSBxdW9ydW1fdGhyZXNob2xkIDw9IDEwMCwgIlF1b3J1bSB0aHJlc2hvbGQgbXVzdCBiZSBiZXR3ZWVuIDEtMTAwJSIKICAgIGFzc2VydCAvLyBRdW9ydW0gdGhyZXNob2xkIG11c3QgYmUgYmV0d2VlbiAxLTEwMCUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weTo3NS03NgogICAgLy8gIyBJbml0aWFsaXplIERBTwogICAgLy8gc2VsZi5kYW9fbmFtZS52YWx1ZSA9IG5hbWUuYnl0ZXMKICAgIGJ5dGVjIDggLy8gImRhb19uYW1lIgogICAgZnJhbWVfZGlnIC01CiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5Ojc3CiAgICAvLyBzZWxmLmRhb19kZXNjcmlwdGlvbi52YWx1ZSA9IGRlc2NyaXB0aW9uLmJ5dGVzCiAgICBieXRlYyA5IC8vICJkYW9fZGVzY3JpcHRpb24iCiAgICBmcmFtZV9kaWcgLTQKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6NzgKICAgIC8vIHNlbGYuY3JlYXRvci52YWx1ZSA9IFR4bi5zZW5kZXIuYnl0ZXMKICAgIGJ5dGVjIDUgLy8gImNyZWF0b3IiCiAgICB0eG4gU2VuZGVyCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5Ojc5CiAgICAvLyBzZWxmLm1pbl9zdGFrZS52YWx1ZSA9IG1pbl9zdGFrZQogICAgYnl0ZWMgNyAvLyAibWluX3N0YWtlIgogICAgZnJhbWVfZGlnIC0zCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjgwCiAgICAvLyBzZWxmLnZvdGluZ19wZXJpb2QudmFsdWUgPSB2b3RpbmdfcGVyaW9kCiAgICBieXRlYyAxMCAvLyAidm90aW5nX3BlcmlvZCIKICAgIGZyYW1lX2RpZyAtMgogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weTo4MQogICAgLy8gc2VsZi5xdW9ydW1fdGhyZXNob2xkLnZhbHVlID0gcXVvcnVtX3RocmVzaG9sZAogICAgYnl0ZWMgMTEgLy8gInF1b3J1bV90aHJlc2hvbGQiCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6ODMtODQKICAgIC8vICMgSW5pdGlhbGl6ZSBjb3VudGVycwogICAgLy8gc2VsZi5tZW1iZXJfY291bnQudmFsdWUgPSBVSW50NjQoMCkKICAgIGJ5dGVjXzIgLy8gIm1lbWJlcl9jb3VudCIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5Ojg1CiAgICAvLyBzZWxmLnRvdGFsX3N0YWtlLnZhbHVlID0gVUludDY0KDApCiAgICBieXRlY18zIC8vICJ0b3RhbF9zdGFrZSIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5Ojg2CiAgICAvLyBzZWxmLnRyZWFzdXJ5X2JhbGFuY2UudmFsdWUgPSBVSW50NjQoMCkKICAgIGJ5dGVjXzAgLy8gInRyZWFzdXJ5X2JhbGFuY2UiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weTo4NwogICAgLy8gc2VsZi5pc19pbml0aWFsaXplZC52YWx1ZSA9IFVJbnQ2NCgxKQogICAgYnl0ZWMgNiAvLyAiaXNfaW5pdGlhbGl6ZWQiCiAgICBpbnRjXzEgLy8gMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weTo4OAogICAgLy8gc2VsZi5pc19hY3RpdmUudmFsdWUgPSBVSW50NjQoMSkKICAgIGJ5dGVjIDQgLy8gImlzX2FjdGl2ZSIKICAgIGludGNfMSAvLyAxCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjkwCiAgICAvLyByZXR1cm4gU3RyaW5nKCJEQU8gY3JlYXRlZCBzdWNjZXNzZnVsbHkiKQogICAgcHVzaGJ5dGVzICJEQU8gY3JlYXRlZCBzdWNjZXNzZnVsbHkiCiAgICByZXRzdWIKCmNyZWF0ZV9kYW9fYm9vbF9mYWxzZUAzOgogICAgaW50Y18wIC8vIDAKICAgIGIgY3JlYXRlX2Rhb19ib29sX21lcmdlQDQKCgovLyBzbWFydF9jb250cmFjdHMuY2l0YWRlbF9kYW8uY29udHJhY3QuU2ltcGxlQ2l0YWRlbERBTy5qb2luX2RhbyhwYXltZW50OiB1aW50NjQpIC0+IGJ5dGVzOgpqb2luX2RhbzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weTo5Mi05MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgam9pbl9kYW8oc2VsZiwgcGF5bWVudDogZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24pIC0+IFN0cmluZzoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjEwMy0xMDQKICAgIC8vICMgVmFsaWRhdGUgREFPIGlzIGluaXRpYWxpemVkIGFuZCBhY3RpdmUKICAgIC8vIGFzc2VydCBzZWxmLmlzX2luaXRpYWxpemVkLnZhbHVlID09IFVJbnQ2NCgxKSwgIkRBTyBub3QgaW5pdGlhbGl6ZWQiCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNiAvLyAiaXNfaW5pdGlhbGl6ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuaXNfaW5pdGlhbGl6ZWQgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgPT0KICAgIGFzc2VydCAvLyBEQU8gbm90IGluaXRpYWxpemVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MTA1CiAgICAvLyBhc3NlcnQgc2VsZi5pc19hY3RpdmUudmFsdWUgPT0gVUludDY0KDEpLCAiREFPIG5vdCBhY3RpdmUiCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNCAvLyAiaXNfYWN0aXZlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmlzX2FjdGl2ZSBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICA9PQogICAgYXNzZXJ0IC8vIERBTyBub3QgYWN0aXZlCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MTA3LTEwOAogICAgLy8gIyBWYWxpZGF0ZSBwYXltZW50CiAgICAvLyBhc3NlcnQgcGF5bWVudC5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLCAiUGF5bWVudCBtdXN0IGJlIHRvIERBTyBjb250cmFjdCIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIFBheW1lbnQgbXVzdCBiZSB0byBEQU8gY29udHJhY3QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToxMDkKICAgIC8vIGFzc2VydCBwYXltZW50LnNlbmRlciA9PSBUeG4uc2VuZGVyLCAiUGF5bWVudCBzZW5kZXIgbXVzdCBtYXRjaCBjYWxsZXIiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydCAvLyBQYXltZW50IHNlbmRlciBtdXN0IG1hdGNoIGNhbGxlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjExMAogICAgLy8gYXNzZXJ0IHBheW1lbnQuYW1vdW50ID49IHNlbGYubWluX3N0YWtlLnZhbHVlLCAiUGF5bWVudCBtdXN0IG1lZXQgbWluaW11bSBzdGFrZSIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQW1vdW50CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNyAvLyAibWluX3N0YWtlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm1pbl9zdGFrZSBleGlzdHMKICAgIGRpZyAxCiAgICA8PQogICAgYXNzZXJ0IC8vIFBheW1lbnQgbXVzdCBtZWV0IG1pbmltdW0gc3Rha2UKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToxMTItMTEzCiAgICAvLyAjIFVwZGF0ZSBjb3VudGVycwogICAgLy8gc2VsZi5tZW1iZXJfY291bnQudmFsdWUgKz0gVUludDY0KDEpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAibWVtYmVyX2NvdW50IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm1lbWJlcl9jb3VudCBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBieXRlY18yIC8vICJtZW1iZXJfY291bnQiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjExNAogICAgLy8gc2VsZi50b3RhbF9zdGFrZS52YWx1ZSArPSBwYXltZW50LmFtb3VudAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gInRvdGFsX3N0YWtlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsX3N0YWtlIGV4aXN0cwogICAgZGlnIDEKICAgICsKICAgIGJ5dGVjXzMgLy8gInRvdGFsX3N0YWtlIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToxMTUKICAgIC8vIHNlbGYudHJlYXN1cnlfYmFsYW5jZS52YWx1ZSArPSBwYXltZW50LmFtb3VudAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gInRyZWFzdXJ5X2JhbGFuY2UiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudHJlYXN1cnlfYmFsYW5jZSBleGlzdHMKICAgICsKICAgIGJ5dGVjXzAgLy8gInRyZWFzdXJ5X2JhbGFuY2UiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjExNwogICAgLy8gcmV0dXJuIFN0cmluZygiU3VjY2Vzc2Z1bGx5IGpvaW5lZCBEQU8iKQogICAgcHVzaGJ5dGVzICJTdWNjZXNzZnVsbHkgam9pbmVkIERBTyIKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5jaXRhZGVsX2Rhby5jb250cmFjdC5TaW1wbGVDaXRhZGVsREFPLmxlYXZlX2RhbyhyZWZ1bmRfYW1vdW50OiB1aW50NjQpIC0+IGJ5dGVzOgpsZWF2ZV9kYW86CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MTE5LTEyMAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgbGVhdmVfZGFvKHNlbGYsIHJlZnVuZF9hbW91bnQ6IFVJbnQ2NCkgLT4gU3RyaW5nOgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MTMwLTEzMQogICAgLy8gIyBWYWxpZGF0ZSBEQU8gc3RhdGUKICAgIC8vIGFzc2VydCBzZWxmLmlzX2luaXRpYWxpemVkLnZhbHVlID09IFVJbnQ2NCgxKSwgIkRBTyBub3QgaW5pdGlhbGl6ZWQiCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNiAvLyAiaXNfaW5pdGlhbGl6ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuaXNfaW5pdGlhbGl6ZWQgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgPT0KICAgIGFzc2VydCAvLyBEQU8gbm90IGluaXRpYWxpemVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MTMyCiAgICAvLyBhc3NlcnQgc2VsZi5tZW1iZXJfY291bnQudmFsdWUgPiBVSW50NjQoMCksICJObyBtZW1iZXJzIHRvIHJlbW92ZSIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJtZW1iZXJfY291bnQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubWVtYmVyX2NvdW50IGV4aXN0cwogICAgZHVwCiAgICBhc3NlcnQgLy8gTm8gbWVtYmVycyB0byByZW1vdmUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToxMzMKICAgIC8vIGFzc2VydCByZWZ1bmRfYW1vdW50IDw9IHNlbGYudHJlYXN1cnlfYmFsYW5jZS52YWx1ZSwgIkluc3VmZmljaWVudCB0cmVhc3VyeSBiYWxhbmNlIgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gInRyZWFzdXJ5X2JhbGFuY2UiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudHJlYXN1cnlfYmFsYW5jZSBleGlzdHMKICAgIGZyYW1lX2RpZyAtMQogICAgPj0KICAgIGFzc2VydCAvLyBJbnN1ZmZpY2llbnQgdHJlYXN1cnkgYmFsYW5jZQogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjEzNS0xNDAKICAgIC8vICMgU2VuZCByZWZ1bmQKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIC8vICAgICByZWNlaXZlcj1UeG4uc2VuZGVyLAogICAgLy8gICAgIGFtb3VudD1yZWZ1bmRfYW1vdW50LAogICAgLy8gICAgIG5vdGU9YiJEQU8gbWVtYmVyIHJlZnVuZCIKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToxMzcKICAgIC8vIHJlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MTM5CiAgICAvLyBub3RlPWIiREFPIG1lbWJlciByZWZ1bmQiCiAgICBwdXNoYnl0ZXMgMHg0NDQxNGYyMDZkNjU2ZDYyNjU3MjIwNzI2NTY2NzU2ZTY0CiAgICBpdHhuX2ZpZWxkIE5vdGUKICAgIGZyYW1lX2RpZyAtMQogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToxMzUtMTM2CiAgICAvLyAjIFNlbmQgcmVmdW5kCiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICBpbnRjXzEgLy8gcGF5CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToxMzUtMTQwCiAgICAvLyAjIFNlbmQgcmVmdW5kCiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIC8vICAgICBhbW91bnQ9cmVmdW5kX2Ftb3VudCwKICAgIC8vICAgICBub3RlPWIiREFPIG1lbWJlciByZWZ1bmQiCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjE0Mi0xNDMKICAgIC8vICMgVXBkYXRlIGNvdW50ZXJzCiAgICAvLyBzZWxmLm1lbWJlcl9jb3VudC52YWx1ZSAtPSBVSW50NjQoMSkKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICBieXRlY18yIC8vICJtZW1iZXJfY291bnQiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjE0NAogICAgLy8gc2VsZi50b3RhbF9zdGFrZS52YWx1ZSAtPSByZWZ1bmRfYW1vdW50CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAidG90YWxfc3Rha2UiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudG90YWxfc3Rha2UgZXhpc3RzCiAgICBmcmFtZV9kaWcgLTEKICAgIC0KICAgIGJ5dGVjXzMgLy8gInRvdGFsX3N0YWtlIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToxNDUKICAgIC8vIHNlbGYudHJlYXN1cnlfYmFsYW5jZS52YWx1ZSAtPSByZWZ1bmRfYW1vdW50CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAidHJlYXN1cnlfYmFsYW5jZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50cmVhc3VyeV9iYWxhbmNlIGV4aXN0cwogICAgZnJhbWVfZGlnIC0xCiAgICAtCiAgICBieXRlY18wIC8vICJ0cmVhc3VyeV9iYWxhbmNlIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToxNDcKICAgIC8vIHJldHVybiBTdHJpbmcoIlN1Y2Nlc3NmdWxseSBsZWZ0IERBTyIpCiAgICBwdXNoYnl0ZXMgIlN1Y2Nlc3NmdWxseSBsZWZ0IERBTyIKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5jaXRhZGVsX2Rhby5jb250cmFjdC5TaW1wbGVDaXRhZGVsREFPLmVtZXJnZW5jeV9wYXVzZSgpIC0+IGJ5dGVzOgplbWVyZ2VuY3lfcGF1c2U6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MTU3CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlci5ieXRlcyA9PSBzZWxmLmNyZWF0b3IudmFsdWUsICJPbmx5IGNyZWF0b3IgY2FuIHBhdXNlIERBTyIKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA1IC8vICJjcmVhdG9yIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNyZWF0b3IgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIE9ubHkgY3JlYXRvciBjYW4gcGF1c2UgREFPCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MTU5CiAgICAvLyBzZWxmLmlzX2FjdGl2ZS52YWx1ZSA9IFVJbnQ2NCgwKQogICAgYnl0ZWMgNCAvLyAiaXNfYWN0aXZlIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MTYxCiAgICAvLyByZXR1cm4gU3RyaW5nKCJEQU8gcGF1c2VkIikKICAgIHB1c2hieXRlcyAiREFPIHBhdXNlZCIKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5jaXRhZGVsX2Rhby5jb250cmFjdC5TaW1wbGVDaXRhZGVsREFPLmVtZXJnZW5jeV91bnBhdXNlKCkgLT4gYnl0ZXM6CmVtZXJnZW5jeV91bnBhdXNlOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjE3MQogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIuYnl0ZXMgPT0gc2VsZi5jcmVhdG9yLnZhbHVlLCAiT25seSBjcmVhdG9yIGNhbiB1bnBhdXNlIERBTyIKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA1IC8vICJjcmVhdG9yIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNyZWF0b3IgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIE9ubHkgY3JlYXRvciBjYW4gdW5wYXVzZSBEQU8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToxNzMKICAgIC8vIHNlbGYuaXNfYWN0aXZlLnZhbHVlID0gVUludDY0KDEpCiAgICBieXRlYyA0IC8vICJpc19hY3RpdmUiCiAgICBpbnRjXzEgLy8gMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToxNzUKICAgIC8vIHJldHVybiBTdHJpbmcoIkRBTyB1bnBhdXNlZCIpCiAgICBwdXNoYnl0ZXMgIkRBTyB1bnBhdXNlZCIKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5jaXRhZGVsX2Rhby5jb250cmFjdC5TaW1wbGVDaXRhZGVsREFPLmdldF9kYW9faW5mbygpIC0+IGJ5dGVzOgpnZXRfZGFvX2luZm86CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MTk3CiAgICAvLyBhcmM0LlN0cmluZy5mcm9tX2J5dGVzKHNlbGYuZGFvX25hbWUudmFsdWUpLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDggLy8gImRhb19uYW1lIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmRhb19uYW1lIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjE5OAogICAgLy8gYXJjNC5TdHJpbmcuZnJvbV9ieXRlcyhzZWxmLmRhb19kZXNjcmlwdGlvbi52YWx1ZSksCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgOSAvLyAiZGFvX2Rlc2NyaXB0aW9uIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmRhb19kZXNjcmlwdGlvbiBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToxOTkKICAgIC8vIGFyYzQuQWRkcmVzcy5mcm9tX2J5dGVzKHNlbGYuY3JlYXRvci52YWx1ZSksCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNSAvLyAiY3JlYXRvciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5jcmVhdG9yIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjIwMAogICAgLy8gYXJjNC5VSW50NjQoc2VsZi5taW5fc3Rha2UudmFsdWUpLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDcgLy8gIm1pbl9zdGFrZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5taW5fc3Rha2UgZXhpc3RzCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MjAxCiAgICAvLyBhcmM0LlVJbnQ2NChzZWxmLnZvdGluZ19wZXJpb2QudmFsdWUpLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDEwIC8vICJ2b3RpbmdfcGVyaW9kIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnZvdGluZ19wZXJpb2QgZXhpc3RzCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MjAyCiAgICAvLyBhcmM0LlVJbnQ2NChzZWxmLnF1b3J1bV90aHJlc2hvbGQudmFsdWUpLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDExIC8vICJxdW9ydW1fdGhyZXNob2xkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnF1b3J1bV90aHJlc2hvbGQgZXhpc3RzCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MjAzCiAgICAvLyBhcmM0LlVJbnQ2NChzZWxmLm1lbWJlcl9jb3VudC52YWx1ZSksCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAibWVtYmVyX2NvdW50IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm1lbWJlcl9jb3VudCBleGlzdHMKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToyMDQKICAgIC8vIGFyYzQuVUludDY0KHNlbGYudG90YWxfc3Rha2UudmFsdWUpLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gInRvdGFsX3N0YWtlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsX3N0YWtlIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjIwNQogICAgLy8gYXJjNC5VSW50NjQoc2VsZi50cmVhc3VyeV9iYWxhbmNlLnZhbHVlKSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJ0cmVhc3VyeV9iYWxhbmNlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRyZWFzdXJ5X2JhbGFuY2UgZXhpc3RzCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MjA2CiAgICAvLyBhcmM0LkJvb2woc2VsZi5pc19hY3RpdmUudmFsdWUgPT0gVUludDY0KDEpKSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJpc19hY3RpdmUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuaXNfYWN0aXZlIGV4aXN0cwogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBwdXNoYnl0ZXMgMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MTk2LTIwNwogICAgLy8gcmV0dXJuIGFyYzQuVHVwbGUoKAogICAgLy8gICAgIGFyYzQuU3RyaW5nLmZyb21fYnl0ZXMoc2VsZi5kYW9fbmFtZS52YWx1ZSksCiAgICAvLyAgICAgYXJjNC5TdHJpbmcuZnJvbV9ieXRlcyhzZWxmLmRhb19kZXNjcmlwdGlvbi52YWx1ZSksCiAgICAvLyAgICAgYXJjNC5BZGRyZXNzLmZyb21fYnl0ZXMoc2VsZi5jcmVhdG9yLnZhbHVlKSwKICAgIC8vICAgICBhcmM0LlVJbnQ2NChzZWxmLm1pbl9zdGFrZS52YWx1ZSksCiAgICAvLyAgICAgYXJjNC5VSW50NjQoc2VsZi52b3RpbmdfcGVyaW9kLnZhbHVlKSwKICAgIC8vICAgICBhcmM0LlVJbnQ2NChzZWxmLnF1b3J1bV90aHJlc2hvbGQudmFsdWUpLAogICAgLy8gICAgIGFyYzQuVUludDY0KHNlbGYubWVtYmVyX2NvdW50LnZhbHVlKSwKICAgIC8vICAgICBhcmM0LlVJbnQ2NChzZWxmLnRvdGFsX3N0YWtlLnZhbHVlKSwKICAgIC8vICAgICBhcmM0LlVJbnQ2NChzZWxmLnRyZWFzdXJ5X2JhbGFuY2UudmFsdWUpLAogICAgLy8gICAgIGFyYzQuQm9vbChzZWxmLmlzX2FjdGl2ZS52YWx1ZSA9PSBVSW50NjQoMSkpLAogICAgLy8gKSkKICAgIGRpZyA5CiAgICBsZW4KICAgIHB1c2hpbnQgODUgLy8gODUKICAgICsKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBwdXNoYnl0ZXMgMHgwMDU1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHVuY292ZXIgOAogICAgY29uY2F0CiAgICB1bmNvdmVyIDcKICAgIGNvbmNhdAogICAgdW5jb3ZlciA2CiAgICBjb25jYXQKICAgIHVuY292ZXIgNQogICAgY29uY2F0CiAgICB1bmNvdmVyIDQKICAgIGNvbmNhdAogICAgdW5jb3ZlciAzCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5jaXRhZGVsX2Rhby5jb250cmFjdC5TaW1wbGVDaXRhZGVsREFPLndpdGhkcmF3X3RyZWFzdXJ5KGFtb3VudDogdWludDY0LCByZWNpcGllbnQ6IGJ5dGVzKSAtPiBieXRlczoKd2l0aGRyYXdfdHJlYXN1cnk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MjA5LTIxMAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgd2l0aGRyYXdfdHJlYXN1cnkoc2VsZiwgYW1vdW50OiBVSW50NjQsIHJlY2lwaWVudDogQWNjb3VudCkgLT4gU3RyaW5nOgogICAgcHJvdG8gMiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MjIxCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlci5ieXRlcyA9PSBzZWxmLmNyZWF0b3IudmFsdWUsICJPbmx5IGNyZWF0b3IgY2FuIHdpdGhkcmF3IgogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDUgLy8gImNyZWF0b3IiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuY3JlYXRvciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBjcmVhdG9yIGNhbiB3aXRoZHJhdwogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjIyMgogICAgLy8gYXNzZXJ0IGFtb3VudCA8PSBzZWxmLnRyZWFzdXJ5X2JhbGFuY2UudmFsdWUsICJJbnN1ZmZpY2llbnQgdHJlYXN1cnkgYmFsYW5jZSIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJ0cmVhc3VyeV9iYWxhbmNlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRyZWFzdXJ5X2JhbGFuY2UgZXhpc3RzCiAgICBmcmFtZV9kaWcgLTIKICAgIGRpZyAxCiAgICA8PQogICAgYXNzZXJ0IC8vIEluc3VmZmljaWVudCB0cmVhc3VyeSBiYWxhbmNlCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MjI0LTIyOQogICAgLy8gIyBTZW5kIHBheW1lbnQKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIC8vICAgICByZWNlaXZlcj1yZWNpcGllbnQsCiAgICAvLyAgICAgYW1vdW50PWFtb3VudCwKICAgIC8vICAgICBub3RlPWIiVHJlYXN1cnkgd2l0aGRyYXdhbCIKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToyMjgKICAgIC8vIG5vdGU9YiJUcmVhc3VyeSB3aXRoZHJhd2FsIgogICAgcHVzaGJ5dGVzIDB4NTQ3MjY1NjE3Mzc1NzI3OTIwNzc2OTc0Njg2NDcyNjE3NzYxNmMKICAgIGl0eG5fZmllbGQgTm90ZQogICAgZnJhbWVfZGlnIC0yCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MjI0LTIyNQogICAgLy8gIyBTZW5kIHBheW1lbnQKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIGludGNfMSAvLyBwYXkKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjIyNC0yMjkKICAgIC8vICMgU2VuZCBwYXltZW50CiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9cmVjaXBpZW50LAogICAgLy8gICAgIGFtb3VudD1hbW91bnQsCiAgICAvLyAgICAgbm90ZT1iIlRyZWFzdXJ5IHdpdGhkcmF3YWwiCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjIzMS0yMzIKICAgIC8vICMgVXBkYXRlIHRyZWFzdXJ5IGJhbGFuY2UKICAgIC8vIHNlbGYudHJlYXN1cnlfYmFsYW5jZS52YWx1ZSAtPSBhbW91bnQKICAgIGZyYW1lX2RpZyAtMgogICAgLQogICAgYnl0ZWNfMCAvLyAidHJlYXN1cnlfYmFsYW5jZSIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2l0YWRlbF9kYW8vY29udHJhY3QucHk6MjM0CiAgICAvLyByZXR1cm4gU3RyaW5nKCJUcmVhc3VyeSB3aXRoZHJhd2FsIHN1Y2Nlc3NmdWwiKQogICAgcHVzaGJ5dGVzICJUcmVhc3VyeSB3aXRoZHJhd2FsIHN1Y2Nlc3NmdWwiCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuY2l0YWRlbF9kYW8uY29udHJhY3QuU2ltcGxlQ2l0YWRlbERBTy5nZXRfdHJlYXN1cnlfYmFsYW5jZSgpIC0+IGJ5dGVzOgpnZXRfdHJlYXN1cnlfYmFsYW5jZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToyNDQKICAgIC8vIHJldHVybiBhcmM0LlVJbnQ2NChzZWxmLnRyZWFzdXJ5X2JhbGFuY2UudmFsdWUpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAidHJlYXN1cnlfYmFsYW5jZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50cmVhc3VyeV9iYWxhbmNlIGV4aXN0cwogICAgaXRvYgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmNpdGFkZWxfZGFvLmNvbnRyYWN0LlNpbXBsZUNpdGFkZWxEQU8uaXNfZGFvX2FjdGl2ZSgpIC0+IGJ5dGVzOgppc19kYW9fYWN0aXZlOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NpdGFkZWxfZGFvL2NvbnRyYWN0LnB5OjI1NQogICAgLy8gc2VsZi5pc19pbml0aWFsaXplZC52YWx1ZSA9PSBVSW50NjQoMSkgYW5kCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNiAvLyAiaXNfaW5pdGlhbGl6ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuaXNfaW5pdGlhbGl6ZWQgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToyNTUtMjU2CiAgICAvLyBzZWxmLmlzX2luaXRpYWxpemVkLnZhbHVlID09IFVJbnQ2NCgxKSBhbmQKICAgIC8vIHNlbGYuaXNfYWN0aXZlLnZhbHVlID09IFVJbnQ2NCgxKQogICAgYnogaXNfZGFvX2FjdGl2ZV9ib29sX2ZhbHNlQDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToyNTYKICAgIC8vIHNlbGYuaXNfYWN0aXZlLnZhbHVlID09IFVJbnQ2NCgxKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDQgLy8gImlzX2FjdGl2ZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5pc19hY3RpdmUgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToyNTUtMjU2CiAgICAvLyBzZWxmLmlzX2luaXRpYWxpemVkLnZhbHVlID09IFVJbnQ2NCgxKSBhbmQKICAgIC8vIHNlbGYuaXNfYWN0aXZlLnZhbHVlID09IFVJbnQ2NCgxKQogICAgYnogaXNfZGFvX2FjdGl2ZV9ib29sX2ZhbHNlQDMKICAgIGludGNfMSAvLyAxCgppc19kYW9fYWN0aXZlX2Jvb2xfbWVyZ2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaXRhZGVsX2Rhby9jb250cmFjdC5weToyNTQtMjU3CiAgICAvLyByZXR1cm4gYXJjNC5Cb29sKAogICAgLy8gICAgIHNlbGYuaXNfaW5pdGlhbGl6ZWQudmFsdWUgPT0gVUludDY0KDEpIGFuZAogICAgLy8gICAgIHNlbGYuaXNfYWN0aXZlLnZhbHVlID09IFVJbnQ2NCgxKQogICAgLy8gKQogICAgcHVzaGJ5dGVzIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgcmV0c3ViCgppc19kYW9fYWN0aXZlX2Jvb2xfZmFsc2VAMzoKICAgIGludGNfMCAvLyAwCiAgICBiIGlzX2Rhb19hY3RpdmVfYm9vbF9tZXJnZUA0Cg==", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [600], "errorMessage": "DAO not active"}, {"pc": [592, 693], "errorMessage": "DAO not initialized"}, {"pc": [707, 976], "errorMessage": "Insufficient treasury balance"}, {"pc": [481], "errorMessage": "Minimum stake must be at least 0.1 ALGO"}, {"pc": [699], "errorMessage": "No members to remove"}, {"pc": [233, 249, 265, 299, 315, 339, 363, 391, 425], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [802], "errorMessage": "Only creator can pause DAO"}, {"pc": [828], "errorMessage": "Only creator can unpause DAO"}, {"pc": [966], "errorMessage": "Only creator can withdraw"}, {"pc": [608], "errorMessage": "Payment must be to DAO contract"}, {"pc": [629], "errorMessage": "Payment must meet minimum stake"}, {"pc": [616], "errorMessage": "Payment sender must match caller"}, {"pc": [503], "errorMessage": "Quorum threshold must be between 1-100%"}, {"pc": [488], "errorMessage": "Voting period must be at least 1 hour"}, {"pc": [429], "errorMessage": "can only call when creating"}, {"pc": [236, 252, 268, 302, 318, 342, 366, 394], "errorMessage": "can only call when not creating"}, {"pc": [800, 826, 862, 964], "errorMessage": "check self.creator exists"}, {"pc": [857], "errorMessage": "check self.dao_description exists"}, {"pc": [852], "errorMessage": "check self.dao_name exists"}, {"pc": [597, 900, 1075], "errorMessage": "check self.is_active exists"}, {"pc": [589, 690, 1065], "errorMessage": "check self.is_initialized exists"}, {"pc": [633, 697, 884], "errorMessage": "check self.member_count exists"}, {"pc": [625, 867], "errorMessage": "check self.min_stake exists"}, {"pc": [879], "errorMessage": "check self.quorum_threshold exists"}, {"pc": [642, 753, 889], "errorMessage": "check self.total_stake exists"}, {"pc": [652, 703, 763, 894, 970, 1058], "errorMessage": "check self.treasury_balance exists"}, {"pc": [873], "errorMessage": "check self.voting_period exists"}, {"pc": [404], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class JoinDaoArgs:
    """Dataclass for join_dao arguments"""
    payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "join_dao(pay)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class LeaveDaoArgs:
    """Dataclass for leave_dao arguments"""
    refund_amount: int

    @property
    def abi_method_signature(self) -> str:
        return "leave_dao(uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class WithdrawTreasuryArgs:
    """Dataclass for withdraw_treasury arguments"""
    amount: int
    recipient: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "withdraw_treasury(uint64,account)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateDaoArgs:
    """Dataclass for create_dao arguments"""
    name: str
    description: str
    min_stake: int
    voting_period: int
    quorum_threshold: int

    @property
    def abi_method_signature(self) -> str:
        return "create_dao(string,string,uint64,uint64,uint64)string"


class SimpleCitadelDaoParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def join_dao(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | JoinDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "join_dao(pay)string",
            "args": method_args,
        }))

    def leave_dao(
        self,
        args: tuple[int] | LeaveDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "leave_dao(uint64)string",
            "args": method_args,
        }))

    def emergency_pause(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "emergency_pause()string",
        }))

    def emergency_unpause(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "emergency_unpause()string",
        }))

    def get_dao_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)",
        }))

    def withdraw_treasury(
        self,
        args: tuple[int, str | bytes] | WithdrawTreasuryArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "withdraw_treasury(uint64,account)string",
            "args": method_args,
        }))

    def get_treasury_balance(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_treasury_balance()uint64",
        }))

    def is_dao_active(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_dao_active()bool",
        }))

    def create_dao(
        self,
        args: tuple[str, str, int, int, int] | CreateDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_dao(string,string,uint64,uint64,uint64)string",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class SimpleCitadelDaoCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def join_dao(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | JoinDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "join_dao(pay)string",
            "args": method_args,
        }))

    def leave_dao(
        self,
        args: tuple[int] | LeaveDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "leave_dao(uint64)string",
            "args": method_args,
        }))

    def emergency_pause(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "emergency_pause()string",
        }))

    def emergency_unpause(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "emergency_unpause()string",
        }))

    def get_dao_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)",
        }))

    def withdraw_treasury(
        self,
        args: tuple[int, str | bytes] | WithdrawTreasuryArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "withdraw_treasury(uint64,account)string",
            "args": method_args,
        }))

    def get_treasury_balance(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_treasury_balance()uint64",
        }))

    def is_dao_active(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_dao_active()bool",
        }))

    def create_dao(
        self,
        args: tuple[str, str, int, int, int] | CreateDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_dao(string,string,uint64,uint64,uint64)string",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class SimpleCitadelDaoSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def join_dao(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | JoinDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "join_dao(pay)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def leave_dao(
        self,
        args: tuple[int] | LeaveDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "leave_dao(uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def emergency_pause(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "emergency_pause()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def emergency_unpause(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "emergency_unpause()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_dao_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[str, str, str, int, int, int, int, int, int, bool]]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[str, str, str, int, int, int, int, int, int, bool]], parsed_response)

    def withdraw_treasury(
        self,
        args: tuple[int, str | bytes] | WithdrawTreasuryArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "withdraw_treasury(uint64,account)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_treasury_balance(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_treasury_balance()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def is_dao_active(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_dao_active()bool",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def create_dao(
        self,
        args: tuple[str, str, int, int, int] | CreateDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_dao(string,string,uint64,uint64,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    dao_name: bytes
    dao_description: bytes
    creator: bytes
    min_stake: int
    voting_period: int
    quorum_threshold: int
    member_count: int
    total_stake: int
    treasury_balance: int
    is_initialized: int
    is_active: int

class SimpleCitadelDaoState:
    """Methods to access state for the current SimpleCitadelDAO app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def dao_name(self) -> bytes:
        """Get the current value of the dao_name key in global_state state"""
        value = self.app_client.state.global_state.get_value("dao_name")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def dao_description(self) -> bytes:
        """Get the current value of the dao_description key in global_state state"""
        value = self.app_client.state.global_state.get_value("dao_description")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def creator(self) -> bytes:
        """Get the current value of the creator key in global_state state"""
        value = self.app_client.state.global_state.get_value("creator")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def min_stake(self) -> int:
        """Get the current value of the min_stake key in global_state state"""
        value = self.app_client.state.global_state.get_value("min_stake")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def voting_period(self) -> int:
        """Get the current value of the voting_period key in global_state state"""
        value = self.app_client.state.global_state.get_value("voting_period")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def quorum_threshold(self) -> int:
        """Get the current value of the quorum_threshold key in global_state state"""
        value = self.app_client.state.global_state.get_value("quorum_threshold")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def member_count(self) -> int:
        """Get the current value of the member_count key in global_state state"""
        value = self.app_client.state.global_state.get_value("member_count")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_stake(self) -> int:
        """Get the current value of the total_stake key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_stake")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def treasury_balance(self) -> int:
        """Get the current value of the treasury_balance key in global_state state"""
        value = self.app_client.state.global_state.get_value("treasury_balance")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def is_initialized(self) -> int:
        """Get the current value of the is_initialized key in global_state state"""
        value = self.app_client.state.global_state.get_value("is_initialized")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def is_active(self) -> int:
        """Get the current value of the is_active key in global_state state"""
        value = self.app_client.state.global_state.get_value("is_active")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class SimpleCitadelDaoClient:
    """Client for interacting with SimpleCitadelDAO smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = SimpleCitadelDaoParams(self.app_client)
        self.create_transaction = SimpleCitadelDaoCreateTransactionParams(self.app_client)
        self.send = SimpleCitadelDaoSend(self.app_client)
        self.state = SimpleCitadelDaoState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "SimpleCitadelDaoClient":
        return SimpleCitadelDaoClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "SimpleCitadelDaoClient":
        return SimpleCitadelDaoClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "SimpleCitadelDaoClient":
        return SimpleCitadelDaoClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "SimpleCitadelDaoComposer":
        return SimpleCitadelDaoComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["join_dao(pay)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["leave_dao(uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["emergency_pause()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["emergency_unpause()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[str, str, str, int, int, int, int, int, int, bool] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["withdraw_treasury(uint64,account)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_treasury_balance()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["is_dao_active()bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_dao(string,string,uint64,uint64,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | bool | int | str | tuple[str, str, str, int, int, int, int, int, int, bool]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class SimpleCitadelDaoMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        CreateDaoArgs,
        str | None,
    ]
):
    """Parameters for creating SimpleCitadelDao contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class SimpleCitadelDaoFactory(algokit_utils.TypedAppFactoryProtocol[SimpleCitadelDaoMethodCallCreateParams, None, None]):
    """Factory for deploying and managing SimpleCitadelDaoClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = SimpleCitadelDaoFactoryParams(self.app_factory)
        self.create_transaction = SimpleCitadelDaoFactoryCreateTransaction(self.app_factory)
        self.send = SimpleCitadelDaoFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: SimpleCitadelDaoMethodCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[SimpleCitadelDaoClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return SimpleCitadelDaoClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> SimpleCitadelDaoClient:
        """Get an app client by creator address and name"""
        return SimpleCitadelDaoClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> SimpleCitadelDaoClient:
        """Get an app client by app ID"""
        return SimpleCitadelDaoClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class SimpleCitadelDaoFactoryParams:
    """Parameters for creating transactions for SimpleCitadelDao contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SimpleCitadelDaoFactoryCreateParams(app_factory)
        self.update = SimpleCitadelDaoFactoryUpdateParams(app_factory)
        self.delete = SimpleCitadelDaoFactoryDeleteParams(app_factory)

class SimpleCitadelDaoFactoryCreateParams:
    """Parameters for 'create' operations of SimpleCitadelDao contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def join_dao(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | JoinDaoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the join_dao(pay)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "join_dao(pay)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def leave_dao(
        self,
        args: tuple[int] | LeaveDaoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the leave_dao(uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "leave_dao(uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def emergency_pause(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the emergency_pause()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "emergency_pause()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def emergency_unpause(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the emergency_unpause()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "emergency_unpause()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_dao_info(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def withdraw_treasury(
        self,
        args: tuple[int, str | bytes] | WithdrawTreasuryArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the withdraw_treasury(uint64,account)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "withdraw_treasury(uint64,account)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_treasury_balance(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_treasury_balance()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_treasury_balance()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def is_dao_active(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the is_dao_active()bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "is_dao_active()bool",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def create_dao(
        self,
        args: tuple[str, str, int, int, int] | CreateDaoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_dao(string,string,uint64,uint64,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_dao(string,string,uint64,uint64,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class SimpleCitadelDaoFactoryUpdateParams:
    """Parameters for 'update' operations of SimpleCitadelDao contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class SimpleCitadelDaoFactoryDeleteParams:
    """Parameters for 'delete' operations of SimpleCitadelDao contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class SimpleCitadelDaoFactoryCreateTransaction:
    """Create transactions for SimpleCitadelDao contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SimpleCitadelDaoFactoryCreateTransactionCreate(app_factory)


class SimpleCitadelDaoFactoryCreateTransactionCreate:
    """Create new instances of SimpleCitadelDao contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class SimpleCitadelDaoFactorySend:
    """Send calls to SimpleCitadelDao contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SimpleCitadelDaoFactorySendCreate(app_factory)


class SimpleCitadelDaoFactorySendCreate:
    """Send create calls to SimpleCitadelDao contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[SimpleCitadelDaoClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return SimpleCitadelDaoClient(result[0]), result[1]

    def create_dao(
        self,
        args: tuple[str, str, int, int, int] | CreateDaoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[SimpleCitadelDaoClient, algokit_utils.AppFactoryCreateMethodCallResult[str]]:
            """Creates and sends a transaction using the create_dao(string,string,uint64,uint64,uint64)string ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "create_dao(string,string,uint64,uint64,uint64)string",
                    "args": _parse_abi_args(args),
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(str, result.abi_return)
    
            return SimpleCitadelDaoClient(client), algokit_utils.AppFactoryCreateMethodCallResult[str](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class SimpleCitadelDaoComposer:
    """Composer for creating transaction groups for SimpleCitadelDao contract calls"""

    def __init__(self, client: "SimpleCitadelDaoClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def join_dao(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | JoinDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleCitadelDaoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.join_dao(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "join_dao(pay)string", v
            )
        )
        return self

    def leave_dao(
        self,
        args: tuple[int] | LeaveDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleCitadelDaoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.leave_dao(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "leave_dao(uint64)string", v
            )
        )
        return self

    def emergency_pause(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleCitadelDaoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.emergency_pause(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "emergency_pause()string", v
            )
        )
        return self

    def emergency_unpause(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleCitadelDaoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.emergency_unpause(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "emergency_unpause()string", v
            )
        )
        return self

    def get_dao_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleCitadelDaoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_dao_info(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_dao_info()(string,string,address,uint64,uint64,uint64,uint64,uint64,uint64,bool)", v
            )
        )
        return self

    def withdraw_treasury(
        self,
        args: tuple[int, str | bytes] | WithdrawTreasuryArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleCitadelDaoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.withdraw_treasury(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "withdraw_treasury(uint64,account)string", v
            )
        )
        return self

    def get_treasury_balance(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleCitadelDaoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_treasury_balance(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_treasury_balance()uint64", v
            )
        )
        return self

    def is_dao_active(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleCitadelDaoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.is_dao_active(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "is_dao_active()bool", v
            )
        )
        return self

    def create_dao(
        self,
        args: tuple[str, str, int, int, int] | CreateDaoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleCitadelDaoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_dao(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_dao(string,string,uint64,uint64,uint64)string", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "SimpleCitadelDaoComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "SimpleCitadelDaoComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
